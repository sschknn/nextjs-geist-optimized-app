{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/node_modules/%40magenta/music/esm/protobuf/proto.js"],"sourcesContent":["/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.tensorflow = (function() {\n\n    /**\n     * Namespace tensorflow.\n     * @exports tensorflow\n     * @namespace\n     */\n    var tensorflow = {};\n\n    tensorflow.magenta = (function() {\n\n        /**\n         * Namespace magenta.\n         * @memberof tensorflow\n         * @namespace\n         */\n        var magenta = {};\n\n        magenta.NoteSequence = (function() {\n\n            /**\n             * Properties of a NoteSequence.\n             * @memberof tensorflow.magenta\n             * @interface INoteSequence\n             * @property {string|null} [id] NoteSequence id\n             * @property {string|null} [filename] NoteSequence filename\n             * @property {number|null} [referenceNumber] NoteSequence referenceNumber\n             * @property {string|null} [collectionName] NoteSequence collectionName\n             * @property {number|null} [ticksPerQuarter] NoteSequence ticksPerQuarter\n             * @property {Array.<tensorflow.magenta.NoteSequence.ITimeSignature>|null} [timeSignatures] NoteSequence timeSignatures\n             * @property {Array.<tensorflow.magenta.NoteSequence.IKeySignature>|null} [keySignatures] NoteSequence keySignatures\n             * @property {Array.<tensorflow.magenta.NoteSequence.ITempo>|null} [tempos] NoteSequence tempos\n             * @property {Array.<tensorflow.magenta.NoteSequence.INote>|null} [notes] NoteSequence notes\n             * @property {number|null} [totalTime] NoteSequence totalTime\n             * @property {number|null} [totalQuantizedSteps] NoteSequence totalQuantizedSteps\n             * @property {Array.<tensorflow.magenta.NoteSequence.IPitchBend>|null} [pitchBends] NoteSequence pitchBends\n             * @property {Array.<tensorflow.magenta.NoteSequence.IControlChange>|null} [controlChanges] NoteSequence controlChanges\n             * @property {Array.<tensorflow.magenta.NoteSequence.IPartInfo>|null} [partInfos] NoteSequence partInfos\n             * @property {tensorflow.magenta.NoteSequence.ISourceInfo|null} [sourceInfo] NoteSequence sourceInfo\n             * @property {Array.<tensorflow.magenta.NoteSequence.ITextAnnotation>|null} [textAnnotations] NoteSequence textAnnotations\n             * @property {Array.<tensorflow.magenta.NoteSequence.ISectionAnnotation>|null} [sectionAnnotations] NoteSequence sectionAnnotations\n             * @property {Array.<tensorflow.magenta.NoteSequence.ISectionGroup>|null} [sectionGroups] NoteSequence sectionGroups\n             * @property {tensorflow.magenta.NoteSequence.IQuantizationInfo|null} [quantizationInfo] NoteSequence quantizationInfo\n             * @property {tensorflow.magenta.NoteSequence.ISubsequenceInfo|null} [subsequenceInfo] NoteSequence subsequenceInfo\n             * @property {tensorflow.magenta.ISequenceMetadata|null} [sequenceMetadata] NoteSequence sequenceMetadata\n             */\n\n            /**\n             * Constructs a new NoteSequence.\n             * @memberof tensorflow.magenta\n             * @classdesc Represents a NoteSequence.\n             * @implements INoteSequence\n             * @constructor\n             * @param {tensorflow.magenta.INoteSequence=} [properties] Properties to set\n             */\n            function NoteSequence(properties) {\n                this.timeSignatures = [];\n                this.keySignatures = [];\n                this.tempos = [];\n                this.notes = [];\n                this.pitchBends = [];\n                this.controlChanges = [];\n                this.partInfos = [];\n                this.textAnnotations = [];\n                this.sectionAnnotations = [];\n                this.sectionGroups = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * NoteSequence id.\n             * @member {string} id\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.id = \"\";\n\n            /**\n             * NoteSequence filename.\n             * @member {string} filename\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.filename = \"\";\n\n            /**\n             * NoteSequence referenceNumber.\n             * @member {number} referenceNumber\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.referenceNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * NoteSequence collectionName.\n             * @member {string} collectionName\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.collectionName = \"\";\n\n            /**\n             * NoteSequence ticksPerQuarter.\n             * @member {number} ticksPerQuarter\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.ticksPerQuarter = 0;\n\n            /**\n             * NoteSequence timeSignatures.\n             * @member {Array.<tensorflow.magenta.NoteSequence.ITimeSignature>} timeSignatures\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.timeSignatures = $util.emptyArray;\n\n            /**\n             * NoteSequence keySignatures.\n             * @member {Array.<tensorflow.magenta.NoteSequence.IKeySignature>} keySignatures\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.keySignatures = $util.emptyArray;\n\n            /**\n             * NoteSequence tempos.\n             * @member {Array.<tensorflow.magenta.NoteSequence.ITempo>} tempos\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.tempos = $util.emptyArray;\n\n            /**\n             * NoteSequence notes.\n             * @member {Array.<tensorflow.magenta.NoteSequence.INote>} notes\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.notes = $util.emptyArray;\n\n            /**\n             * NoteSequence totalTime.\n             * @member {number} totalTime\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.totalTime = 0;\n\n            /**\n             * NoteSequence totalQuantizedSteps.\n             * @member {number} totalQuantizedSteps\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.totalQuantizedSteps = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * NoteSequence pitchBends.\n             * @member {Array.<tensorflow.magenta.NoteSequence.IPitchBend>} pitchBends\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.pitchBends = $util.emptyArray;\n\n            /**\n             * NoteSequence controlChanges.\n             * @member {Array.<tensorflow.magenta.NoteSequence.IControlChange>} controlChanges\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.controlChanges = $util.emptyArray;\n\n            /**\n             * NoteSequence partInfos.\n             * @member {Array.<tensorflow.magenta.NoteSequence.IPartInfo>} partInfos\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.partInfos = $util.emptyArray;\n\n            /**\n             * NoteSequence sourceInfo.\n             * @member {tensorflow.magenta.NoteSequence.ISourceInfo|null|undefined} sourceInfo\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.sourceInfo = null;\n\n            /**\n             * NoteSequence textAnnotations.\n             * @member {Array.<tensorflow.magenta.NoteSequence.ITextAnnotation>} textAnnotations\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.textAnnotations = $util.emptyArray;\n\n            /**\n             * NoteSequence sectionAnnotations.\n             * @member {Array.<tensorflow.magenta.NoteSequence.ISectionAnnotation>} sectionAnnotations\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.sectionAnnotations = $util.emptyArray;\n\n            /**\n             * NoteSequence sectionGroups.\n             * @member {Array.<tensorflow.magenta.NoteSequence.ISectionGroup>} sectionGroups\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.sectionGroups = $util.emptyArray;\n\n            /**\n             * NoteSequence quantizationInfo.\n             * @member {tensorflow.magenta.NoteSequence.IQuantizationInfo|null|undefined} quantizationInfo\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.quantizationInfo = null;\n\n            /**\n             * NoteSequence subsequenceInfo.\n             * @member {tensorflow.magenta.NoteSequence.ISubsequenceInfo|null|undefined} subsequenceInfo\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.subsequenceInfo = null;\n\n            /**\n             * NoteSequence sequenceMetadata.\n             * @member {tensorflow.magenta.ISequenceMetadata|null|undefined} sequenceMetadata\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             */\n            NoteSequence.prototype.sequenceMetadata = null;\n\n            /**\n             * Creates a new NoteSequence instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {tensorflow.magenta.INoteSequence=} [properties] Properties to set\n             * @returns {tensorflow.magenta.NoteSequence} NoteSequence instance\n             */\n            NoteSequence.create = function create(properties) {\n                return new NoteSequence(properties);\n            };\n\n            /**\n             * Encodes the specified NoteSequence message. Does not implicitly {@link tensorflow.magenta.NoteSequence.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {tensorflow.magenta.INoteSequence} message NoteSequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            NoteSequence.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n                if (message.filename != null && message.hasOwnProperty(\"filename\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.filename);\n                if (message.collectionName != null && message.hasOwnProperty(\"collectionName\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.collectionName);\n                if (message.ticksPerQuarter != null && message.hasOwnProperty(\"ticksPerQuarter\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.ticksPerQuarter);\n                if (message.timeSignatures != null && message.timeSignatures.length)\n                    for (var i = 0; i < message.timeSignatures.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.TimeSignature.encode(message.timeSignatures[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                if (message.keySignatures != null && message.keySignatures.length)\n                    for (var i = 0; i < message.keySignatures.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.KeySignature.encode(message.keySignatures[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                if (message.tempos != null && message.tempos.length)\n                    for (var i = 0; i < message.tempos.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.Tempo.encode(message.tempos[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                if (message.notes != null && message.notes.length)\n                    for (var i = 0; i < message.notes.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.Note.encode(message.notes[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                if (message.totalTime != null && message.hasOwnProperty(\"totalTime\"))\n                    writer.uint32(/* id 9, wireType 1 =*/73).double(message.totalTime);\n                if (message.pitchBends != null && message.pitchBends.length)\n                    for (var i = 0; i < message.pitchBends.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.PitchBend.encode(message.pitchBends[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n                if (message.controlChanges != null && message.controlChanges.length)\n                    for (var i = 0; i < message.controlChanges.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.ControlChange.encode(message.controlChanges[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                if (message.partInfos != null && message.partInfos.length)\n                    for (var i = 0; i < message.partInfos.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.PartInfo.encode(message.partInfos[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n                if (message.sourceInfo != null && message.hasOwnProperty(\"sourceInfo\"))\n                    $root.tensorflow.magenta.NoteSequence.SourceInfo.encode(message.sourceInfo, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n                if (message.textAnnotations != null && message.textAnnotations.length)\n                    for (var i = 0; i < message.textAnnotations.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.TextAnnotation.encode(message.textAnnotations[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n                if (message.quantizationInfo != null && message.hasOwnProperty(\"quantizationInfo\"))\n                    $root.tensorflow.magenta.NoteSequence.QuantizationInfo.encode(message.quantizationInfo, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n                if (message.totalQuantizedSteps != null && message.hasOwnProperty(\"totalQuantizedSteps\"))\n                    writer.uint32(/* id 16, wireType 0 =*/128).int64(message.totalQuantizedSteps);\n                if (message.subsequenceInfo != null && message.hasOwnProperty(\"subsequenceInfo\"))\n                    $root.tensorflow.magenta.NoteSequence.SubsequenceInfo.encode(message.subsequenceInfo, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();\n                if (message.referenceNumber != null && message.hasOwnProperty(\"referenceNumber\"))\n                    writer.uint32(/* id 18, wireType 0 =*/144).int64(message.referenceNumber);\n                if (message.sequenceMetadata != null && message.hasOwnProperty(\"sequenceMetadata\"))\n                    $root.tensorflow.magenta.SequenceMetadata.encode(message.sequenceMetadata, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();\n                if (message.sectionAnnotations != null && message.sectionAnnotations.length)\n                    for (var i = 0; i < message.sectionAnnotations.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.SectionAnnotation.encode(message.sectionAnnotations[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n                if (message.sectionGroups != null && message.sectionGroups.length)\n                    for (var i = 0; i < message.sectionGroups.length; ++i)\n                        $root.tensorflow.magenta.NoteSequence.SectionGroup.encode(message.sectionGroups[i], writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified NoteSequence message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {tensorflow.magenta.INoteSequence} message NoteSequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            NoteSequence.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a NoteSequence message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.magenta.NoteSequence} NoteSequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            NoteSequence.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.id = reader.string();\n                        break;\n                    case 2:\n                        message.filename = reader.string();\n                        break;\n                    case 18:\n                        message.referenceNumber = $util.Long?reader.int64().toNumber():reader.int64();\n                        break;\n                    case 3:\n                        message.collectionName = reader.string();\n                        break;\n                    case 4:\n                        message.ticksPerQuarter = reader.int32();\n                        break;\n                    case 5:\n                        if (!(message.timeSignatures && message.timeSignatures.length))\n                            message.timeSignatures = [];\n                        message.timeSignatures.push($root.tensorflow.magenta.NoteSequence.TimeSignature.decode(reader, reader.uint32()));\n                        break;\n                    case 6:\n                        if (!(message.keySignatures && message.keySignatures.length))\n                            message.keySignatures = [];\n                        message.keySignatures.push($root.tensorflow.magenta.NoteSequence.KeySignature.decode(reader, reader.uint32()));\n                        break;\n                    case 7:\n                        if (!(message.tempos && message.tempos.length))\n                            message.tempos = [];\n                        message.tempos.push($root.tensorflow.magenta.NoteSequence.Tempo.decode(reader, reader.uint32()));\n                        break;\n                    case 8:\n                        if (!(message.notes && message.notes.length))\n                            message.notes = [];\n                        message.notes.push($root.tensorflow.magenta.NoteSequence.Note.decode(reader, reader.uint32()));\n                        break;\n                    case 9:\n                        message.totalTime = reader.double();\n                        break;\n                    case 16:\n                        message.totalQuantizedSteps = $util.Long?reader.int64().toNumber():reader.int64();\n                        break;\n                    case 10:\n                        if (!(message.pitchBends && message.pitchBends.length))\n                            message.pitchBends = [];\n                        message.pitchBends.push($root.tensorflow.magenta.NoteSequence.PitchBend.decode(reader, reader.uint32()));\n                        break;\n                    case 11:\n                        if (!(message.controlChanges && message.controlChanges.length))\n                            message.controlChanges = [];\n                        message.controlChanges.push($root.tensorflow.magenta.NoteSequence.ControlChange.decode(reader, reader.uint32()));\n                        break;\n                    case 12:\n                        if (!(message.partInfos && message.partInfos.length))\n                            message.partInfos = [];\n                        message.partInfos.push($root.tensorflow.magenta.NoteSequence.PartInfo.decode(reader, reader.uint32()));\n                        break;\n                    case 13:\n                        message.sourceInfo = $root.tensorflow.magenta.NoteSequence.SourceInfo.decode(reader, reader.uint32());\n                        break;\n                    case 14:\n                        if (!(message.textAnnotations && message.textAnnotations.length))\n                            message.textAnnotations = [];\n                        message.textAnnotations.push($root.tensorflow.magenta.NoteSequence.TextAnnotation.decode(reader, reader.uint32()));\n                        break;\n                    case 20:\n                        if (!(message.sectionAnnotations && message.sectionAnnotations.length))\n                            message.sectionAnnotations = [];\n                        message.sectionAnnotations.push($root.tensorflow.magenta.NoteSequence.SectionAnnotation.decode(reader, reader.uint32()));\n                        break;\n                    case 21:\n                        if (!(message.sectionGroups && message.sectionGroups.length))\n                            message.sectionGroups = [];\n                        message.sectionGroups.push($root.tensorflow.magenta.NoteSequence.SectionGroup.decode(reader, reader.uint32()));\n                        break;\n                    case 15:\n                        message.quantizationInfo = $root.tensorflow.magenta.NoteSequence.QuantizationInfo.decode(reader, reader.uint32());\n                        break;\n                    case 17:\n                        message.subsequenceInfo = $root.tensorflow.magenta.NoteSequence.SubsequenceInfo.decode(reader, reader.uint32());\n                        break;\n                    case 19:\n                        message.sequenceMetadata = $root.tensorflow.magenta.SequenceMetadata.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a NoteSequence message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.magenta.NoteSequence} NoteSequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            NoteSequence.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a NoteSequence message.\n             * @function verify\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            NoteSequence.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (!$util.isString(message.id))\n                        return \"id: string expected\";\n                if (message.filename != null && message.hasOwnProperty(\"filename\"))\n                    if (!$util.isString(message.filename))\n                        return \"filename: string expected\";\n                if (message.referenceNumber != null && message.hasOwnProperty(\"referenceNumber\"))\n                    if (!$util.isInteger(message.referenceNumber) && !(message.referenceNumber && $util.isInteger(message.referenceNumber.low) && $util.isInteger(message.referenceNumber.high)))\n                        return \"referenceNumber: integer|Long expected\";\n                if (message.collectionName != null && message.hasOwnProperty(\"collectionName\"))\n                    if (!$util.isString(message.collectionName))\n                        return \"collectionName: string expected\";\n                if (message.ticksPerQuarter != null && message.hasOwnProperty(\"ticksPerQuarter\"))\n                    if (!$util.isInteger(message.ticksPerQuarter))\n                        return \"ticksPerQuarter: integer expected\";\n                if (message.timeSignatures != null && message.hasOwnProperty(\"timeSignatures\")) {\n                    if (!Array.isArray(message.timeSignatures))\n                        return \"timeSignatures: array expected\";\n                    for (var i = 0; i < message.timeSignatures.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.TimeSignature.verify(message.timeSignatures[i]);\n                        if (error)\n                            return \"timeSignatures.\" + error;\n                    }\n                }\n                if (message.keySignatures != null && message.hasOwnProperty(\"keySignatures\")) {\n                    if (!Array.isArray(message.keySignatures))\n                        return \"keySignatures: array expected\";\n                    for (var i = 0; i < message.keySignatures.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.KeySignature.verify(message.keySignatures[i]);\n                        if (error)\n                            return \"keySignatures.\" + error;\n                    }\n                }\n                if (message.tempos != null && message.hasOwnProperty(\"tempos\")) {\n                    if (!Array.isArray(message.tempos))\n                        return \"tempos: array expected\";\n                    for (var i = 0; i < message.tempos.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.Tempo.verify(message.tempos[i]);\n                        if (error)\n                            return \"tempos.\" + error;\n                    }\n                }\n                if (message.notes != null && message.hasOwnProperty(\"notes\")) {\n                    if (!Array.isArray(message.notes))\n                        return \"notes: array expected\";\n                    for (var i = 0; i < message.notes.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.Note.verify(message.notes[i]);\n                        if (error)\n                            return \"notes.\" + error;\n                    }\n                }\n                if (message.totalTime != null && message.hasOwnProperty(\"totalTime\"))\n                    if (typeof message.totalTime !== \"number\")\n                        return \"totalTime: number expected\";\n                if (message.totalQuantizedSteps != null && message.hasOwnProperty(\"totalQuantizedSteps\"))\n                    if (!$util.isInteger(message.totalQuantizedSteps) && !(message.totalQuantizedSteps && $util.isInteger(message.totalQuantizedSteps.low) && $util.isInteger(message.totalQuantizedSteps.high)))\n                        return \"totalQuantizedSteps: integer|Long expected\";\n                if (message.pitchBends != null && message.hasOwnProperty(\"pitchBends\")) {\n                    if (!Array.isArray(message.pitchBends))\n                        return \"pitchBends: array expected\";\n                    for (var i = 0; i < message.pitchBends.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.PitchBend.verify(message.pitchBends[i]);\n                        if (error)\n                            return \"pitchBends.\" + error;\n                    }\n                }\n                if (message.controlChanges != null && message.hasOwnProperty(\"controlChanges\")) {\n                    if (!Array.isArray(message.controlChanges))\n                        return \"controlChanges: array expected\";\n                    for (var i = 0; i < message.controlChanges.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.ControlChange.verify(message.controlChanges[i]);\n                        if (error)\n                            return \"controlChanges.\" + error;\n                    }\n                }\n                if (message.partInfos != null && message.hasOwnProperty(\"partInfos\")) {\n                    if (!Array.isArray(message.partInfos))\n                        return \"partInfos: array expected\";\n                    for (var i = 0; i < message.partInfos.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.PartInfo.verify(message.partInfos[i]);\n                        if (error)\n                            return \"partInfos.\" + error;\n                    }\n                }\n                if (message.sourceInfo != null && message.hasOwnProperty(\"sourceInfo\")) {\n                    var error = $root.tensorflow.magenta.NoteSequence.SourceInfo.verify(message.sourceInfo);\n                    if (error)\n                        return \"sourceInfo.\" + error;\n                }\n                if (message.textAnnotations != null && message.hasOwnProperty(\"textAnnotations\")) {\n                    if (!Array.isArray(message.textAnnotations))\n                        return \"textAnnotations: array expected\";\n                    for (var i = 0; i < message.textAnnotations.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.TextAnnotation.verify(message.textAnnotations[i]);\n                        if (error)\n                            return \"textAnnotations.\" + error;\n                    }\n                }\n                if (message.sectionAnnotations != null && message.hasOwnProperty(\"sectionAnnotations\")) {\n                    if (!Array.isArray(message.sectionAnnotations))\n                        return \"sectionAnnotations: array expected\";\n                    for (var i = 0; i < message.sectionAnnotations.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.SectionAnnotation.verify(message.sectionAnnotations[i]);\n                        if (error)\n                            return \"sectionAnnotations.\" + error;\n                    }\n                }\n                if (message.sectionGroups != null && message.hasOwnProperty(\"sectionGroups\")) {\n                    if (!Array.isArray(message.sectionGroups))\n                        return \"sectionGroups: array expected\";\n                    for (var i = 0; i < message.sectionGroups.length; ++i) {\n                        var error = $root.tensorflow.magenta.NoteSequence.SectionGroup.verify(message.sectionGroups[i]);\n                        if (error)\n                            return \"sectionGroups.\" + error;\n                    }\n                }\n                if (message.quantizationInfo != null && message.hasOwnProperty(\"quantizationInfo\")) {\n                    var error = $root.tensorflow.magenta.NoteSequence.QuantizationInfo.verify(message.quantizationInfo);\n                    if (error)\n                        return \"quantizationInfo.\" + error;\n                }\n                if (message.subsequenceInfo != null && message.hasOwnProperty(\"subsequenceInfo\")) {\n                    var error = $root.tensorflow.magenta.NoteSequence.SubsequenceInfo.verify(message.subsequenceInfo);\n                    if (error)\n                        return \"subsequenceInfo.\" + error;\n                }\n                if (message.sequenceMetadata != null && message.hasOwnProperty(\"sequenceMetadata\")) {\n                    var error = $root.tensorflow.magenta.SequenceMetadata.verify(message.sequenceMetadata);\n                    if (error)\n                        return \"sequenceMetadata.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a NoteSequence message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.magenta.NoteSequence} NoteSequence\n             */\n            NoteSequence.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.magenta.NoteSequence)\n                    return object;\n                var message = new $root.tensorflow.magenta.NoteSequence();\n                if (object.id != null)\n                    message.id = String(object.id);\n                if (object.filename != null)\n                    message.filename = String(object.filename);\n                if (object.referenceNumber != null)\n                    if ($util.Long)\n                        (message.referenceNumber = $util.Long.fromValue(object.referenceNumber)).unsigned = false;\n                    else if (typeof object.referenceNumber === \"string\")\n                        message.referenceNumber = parseInt(object.referenceNumber, 10);\n                    else if (typeof object.referenceNumber === \"number\")\n                        message.referenceNumber = object.referenceNumber;\n                    else if (typeof object.referenceNumber === \"object\")\n                        message.referenceNumber = new $util.LongBits(object.referenceNumber.low >>> 0, object.referenceNumber.high >>> 0).toNumber();\n                if (object.collectionName != null)\n                    message.collectionName = String(object.collectionName);\n                if (object.ticksPerQuarter != null)\n                    message.ticksPerQuarter = object.ticksPerQuarter | 0;\n                if (object.timeSignatures) {\n                    if (!Array.isArray(object.timeSignatures))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.timeSignatures: array expected\");\n                    message.timeSignatures = [];\n                    for (var i = 0; i < object.timeSignatures.length; ++i) {\n                        if (typeof object.timeSignatures[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.timeSignatures: object expected\");\n                        message.timeSignatures[i] = $root.tensorflow.magenta.NoteSequence.TimeSignature.fromObject(object.timeSignatures[i]);\n                    }\n                }\n                if (object.keySignatures) {\n                    if (!Array.isArray(object.keySignatures))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.keySignatures: array expected\");\n                    message.keySignatures = [];\n                    for (var i = 0; i < object.keySignatures.length; ++i) {\n                        if (typeof object.keySignatures[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.keySignatures: object expected\");\n                        message.keySignatures[i] = $root.tensorflow.magenta.NoteSequence.KeySignature.fromObject(object.keySignatures[i]);\n                    }\n                }\n                if (object.tempos) {\n                    if (!Array.isArray(object.tempos))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.tempos: array expected\");\n                    message.tempos = [];\n                    for (var i = 0; i < object.tempos.length; ++i) {\n                        if (typeof object.tempos[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.tempos: object expected\");\n                        message.tempos[i] = $root.tensorflow.magenta.NoteSequence.Tempo.fromObject(object.tempos[i]);\n                    }\n                }\n                if (object.notes) {\n                    if (!Array.isArray(object.notes))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.notes: array expected\");\n                    message.notes = [];\n                    for (var i = 0; i < object.notes.length; ++i) {\n                        if (typeof object.notes[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.notes: object expected\");\n                        message.notes[i] = $root.tensorflow.magenta.NoteSequence.Note.fromObject(object.notes[i]);\n                    }\n                }\n                if (object.totalTime != null)\n                    message.totalTime = Number(object.totalTime);\n                if (object.totalQuantizedSteps != null)\n                    if ($util.Long)\n                        (message.totalQuantizedSteps = $util.Long.fromValue(object.totalQuantizedSteps)).unsigned = false;\n                    else if (typeof object.totalQuantizedSteps === \"string\")\n                        message.totalQuantizedSteps = parseInt(object.totalQuantizedSteps, 10);\n                    else if (typeof object.totalQuantizedSteps === \"number\")\n                        message.totalQuantizedSteps = object.totalQuantizedSteps;\n                    else if (typeof object.totalQuantizedSteps === \"object\")\n                        message.totalQuantizedSteps = new $util.LongBits(object.totalQuantizedSteps.low >>> 0, object.totalQuantizedSteps.high >>> 0).toNumber();\n                if (object.pitchBends) {\n                    if (!Array.isArray(object.pitchBends))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.pitchBends: array expected\");\n                    message.pitchBends = [];\n                    for (var i = 0; i < object.pitchBends.length; ++i) {\n                        if (typeof object.pitchBends[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.pitchBends: object expected\");\n                        message.pitchBends[i] = $root.tensorflow.magenta.NoteSequence.PitchBend.fromObject(object.pitchBends[i]);\n                    }\n                }\n                if (object.controlChanges) {\n                    if (!Array.isArray(object.controlChanges))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.controlChanges: array expected\");\n                    message.controlChanges = [];\n                    for (var i = 0; i < object.controlChanges.length; ++i) {\n                        if (typeof object.controlChanges[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.controlChanges: object expected\");\n                        message.controlChanges[i] = $root.tensorflow.magenta.NoteSequence.ControlChange.fromObject(object.controlChanges[i]);\n                    }\n                }\n                if (object.partInfos) {\n                    if (!Array.isArray(object.partInfos))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.partInfos: array expected\");\n                    message.partInfos = [];\n                    for (var i = 0; i < object.partInfos.length; ++i) {\n                        if (typeof object.partInfos[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.partInfos: object expected\");\n                        message.partInfos[i] = $root.tensorflow.magenta.NoteSequence.PartInfo.fromObject(object.partInfos[i]);\n                    }\n                }\n                if (object.sourceInfo != null) {\n                    if (typeof object.sourceInfo !== \"object\")\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.sourceInfo: object expected\");\n                    message.sourceInfo = $root.tensorflow.magenta.NoteSequence.SourceInfo.fromObject(object.sourceInfo);\n                }\n                if (object.textAnnotations) {\n                    if (!Array.isArray(object.textAnnotations))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.textAnnotations: array expected\");\n                    message.textAnnotations = [];\n                    for (var i = 0; i < object.textAnnotations.length; ++i) {\n                        if (typeof object.textAnnotations[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.textAnnotations: object expected\");\n                        message.textAnnotations[i] = $root.tensorflow.magenta.NoteSequence.TextAnnotation.fromObject(object.textAnnotations[i]);\n                    }\n                }\n                if (object.sectionAnnotations) {\n                    if (!Array.isArray(object.sectionAnnotations))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.sectionAnnotations: array expected\");\n                    message.sectionAnnotations = [];\n                    for (var i = 0; i < object.sectionAnnotations.length; ++i) {\n                        if (typeof object.sectionAnnotations[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.sectionAnnotations: object expected\");\n                        message.sectionAnnotations[i] = $root.tensorflow.magenta.NoteSequence.SectionAnnotation.fromObject(object.sectionAnnotations[i]);\n                    }\n                }\n                if (object.sectionGroups) {\n                    if (!Array.isArray(object.sectionGroups))\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.sectionGroups: array expected\");\n                    message.sectionGroups = [];\n                    for (var i = 0; i < object.sectionGroups.length; ++i) {\n                        if (typeof object.sectionGroups[i] !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.sectionGroups: object expected\");\n                        message.sectionGroups[i] = $root.tensorflow.magenta.NoteSequence.SectionGroup.fromObject(object.sectionGroups[i]);\n                    }\n                }\n                if (object.quantizationInfo != null) {\n                    if (typeof object.quantizationInfo !== \"object\")\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.quantizationInfo: object expected\");\n                    message.quantizationInfo = $root.tensorflow.magenta.NoteSequence.QuantizationInfo.fromObject(object.quantizationInfo);\n                }\n                if (object.subsequenceInfo != null) {\n                    if (typeof object.subsequenceInfo !== \"object\")\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.subsequenceInfo: object expected\");\n                    message.subsequenceInfo = $root.tensorflow.magenta.NoteSequence.SubsequenceInfo.fromObject(object.subsequenceInfo);\n                }\n                if (object.sequenceMetadata != null) {\n                    if (typeof object.sequenceMetadata !== \"object\")\n                        throw TypeError(\".tensorflow.magenta.NoteSequence.sequenceMetadata: object expected\");\n                    message.sequenceMetadata = $root.tensorflow.magenta.SequenceMetadata.fromObject(object.sequenceMetadata);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a NoteSequence message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.magenta.NoteSequence\n             * @static\n             * @param {tensorflow.magenta.NoteSequence} message NoteSequence\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            NoteSequence.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults) {\n                    object.timeSignatures = [];\n                    object.keySignatures = [];\n                    object.tempos = [];\n                    object.notes = [];\n                    object.pitchBends = [];\n                    object.controlChanges = [];\n                    object.partInfos = [];\n                    object.textAnnotations = [];\n                    object.sectionAnnotations = [];\n                    object.sectionGroups = [];\n                }\n                if (options.defaults) {\n                    object.id = \"\";\n                    object.filename = \"\";\n                    object.collectionName = \"\";\n                    object.ticksPerQuarter = 0;\n                    object.totalTime = 0;\n                    object.sourceInfo = null;\n                    object.quantizationInfo = null;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.totalQuantizedSteps = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.totalQuantizedSteps = options.longs === String ? \"0\" : 0;\n                    object.subsequenceInfo = null;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.referenceNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.referenceNumber = options.longs === String ? \"0\" : 0;\n                    object.sequenceMetadata = null;\n                }\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    object.id = message.id;\n                if (message.filename != null && message.hasOwnProperty(\"filename\"))\n                    object.filename = message.filename;\n                if (message.collectionName != null && message.hasOwnProperty(\"collectionName\"))\n                    object.collectionName = message.collectionName;\n                if (message.ticksPerQuarter != null && message.hasOwnProperty(\"ticksPerQuarter\"))\n                    object.ticksPerQuarter = message.ticksPerQuarter;\n                if (message.timeSignatures && message.timeSignatures.length) {\n                    object.timeSignatures = [];\n                    for (var j = 0; j < message.timeSignatures.length; ++j)\n                        object.timeSignatures[j] = $root.tensorflow.magenta.NoteSequence.TimeSignature.toObject(message.timeSignatures[j], options);\n                }\n                if (message.keySignatures && message.keySignatures.length) {\n                    object.keySignatures = [];\n                    for (var j = 0; j < message.keySignatures.length; ++j)\n                        object.keySignatures[j] = $root.tensorflow.magenta.NoteSequence.KeySignature.toObject(message.keySignatures[j], options);\n                }\n                if (message.tempos && message.tempos.length) {\n                    object.tempos = [];\n                    for (var j = 0; j < message.tempos.length; ++j)\n                        object.tempos[j] = $root.tensorflow.magenta.NoteSequence.Tempo.toObject(message.tempos[j], options);\n                }\n                if (message.notes && message.notes.length) {\n                    object.notes = [];\n                    for (var j = 0; j < message.notes.length; ++j)\n                        object.notes[j] = $root.tensorflow.magenta.NoteSequence.Note.toObject(message.notes[j], options);\n                }\n                if (message.totalTime != null && message.hasOwnProperty(\"totalTime\"))\n                    object.totalTime = options.json && !isFinite(message.totalTime) ? String(message.totalTime) : message.totalTime;\n                if (message.pitchBends && message.pitchBends.length) {\n                    object.pitchBends = [];\n                    for (var j = 0; j < message.pitchBends.length; ++j)\n                        object.pitchBends[j] = $root.tensorflow.magenta.NoteSequence.PitchBend.toObject(message.pitchBends[j], options);\n                }\n                if (message.controlChanges && message.controlChanges.length) {\n                    object.controlChanges = [];\n                    for (var j = 0; j < message.controlChanges.length; ++j)\n                        object.controlChanges[j] = $root.tensorflow.magenta.NoteSequence.ControlChange.toObject(message.controlChanges[j], options);\n                }\n                if (message.partInfos && message.partInfos.length) {\n                    object.partInfos = [];\n                    for (var j = 0; j < message.partInfos.length; ++j)\n                        object.partInfos[j] = $root.tensorflow.magenta.NoteSequence.PartInfo.toObject(message.partInfos[j], options);\n                }\n                if (message.sourceInfo != null && message.hasOwnProperty(\"sourceInfo\"))\n                    object.sourceInfo = $root.tensorflow.magenta.NoteSequence.SourceInfo.toObject(message.sourceInfo, options);\n                if (message.textAnnotations && message.textAnnotations.length) {\n                    object.textAnnotations = [];\n                    for (var j = 0; j < message.textAnnotations.length; ++j)\n                        object.textAnnotations[j] = $root.tensorflow.magenta.NoteSequence.TextAnnotation.toObject(message.textAnnotations[j], options);\n                }\n                if (message.quantizationInfo != null && message.hasOwnProperty(\"quantizationInfo\"))\n                    object.quantizationInfo = $root.tensorflow.magenta.NoteSequence.QuantizationInfo.toObject(message.quantizationInfo, options);\n                if (message.totalQuantizedSteps != null && message.hasOwnProperty(\"totalQuantizedSteps\"))\n                    if (typeof message.totalQuantizedSteps === \"number\")\n                        object.totalQuantizedSteps = options.longs === String ? String(message.totalQuantizedSteps) : message.totalQuantizedSteps;\n                    else\n                        object.totalQuantizedSteps = options.longs === String ? $util.Long.prototype.toString.call(message.totalQuantizedSteps) : options.longs === Number ? new $util.LongBits(message.totalQuantizedSteps.low >>> 0, message.totalQuantizedSteps.high >>> 0).toNumber() : message.totalQuantizedSteps;\n                if (message.subsequenceInfo != null && message.hasOwnProperty(\"subsequenceInfo\"))\n                    object.subsequenceInfo = $root.tensorflow.magenta.NoteSequence.SubsequenceInfo.toObject(message.subsequenceInfo, options);\n                if (message.referenceNumber != null && message.hasOwnProperty(\"referenceNumber\"))\n                    if (typeof message.referenceNumber === \"number\")\n                        object.referenceNumber = options.longs === String ? String(message.referenceNumber) : message.referenceNumber;\n                    else\n                        object.referenceNumber = options.longs === String ? $util.Long.prototype.toString.call(message.referenceNumber) : options.longs === Number ? new $util.LongBits(message.referenceNumber.low >>> 0, message.referenceNumber.high >>> 0).toNumber() : message.referenceNumber;\n                if (message.sequenceMetadata != null && message.hasOwnProperty(\"sequenceMetadata\"))\n                    object.sequenceMetadata = $root.tensorflow.magenta.SequenceMetadata.toObject(message.sequenceMetadata, options);\n                if (message.sectionAnnotations && message.sectionAnnotations.length) {\n                    object.sectionAnnotations = [];\n                    for (var j = 0; j < message.sectionAnnotations.length; ++j)\n                        object.sectionAnnotations[j] = $root.tensorflow.magenta.NoteSequence.SectionAnnotation.toObject(message.sectionAnnotations[j], options);\n                }\n                if (message.sectionGroups && message.sectionGroups.length) {\n                    object.sectionGroups = [];\n                    for (var j = 0; j < message.sectionGroups.length; ++j)\n                        object.sectionGroups[j] = $root.tensorflow.magenta.NoteSequence.SectionGroup.toObject(message.sectionGroups[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this NoteSequence to JSON.\n             * @function toJSON\n             * @memberof tensorflow.magenta.NoteSequence\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            NoteSequence.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            NoteSequence.Note = (function() {\n\n                /**\n                 * Properties of a Note.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface INote\n                 * @property {number|null} [pitch] Note pitch\n                 * @property {tensorflow.magenta.NoteSequence.PitchName|null} [pitchName] Note pitchName\n                 * @property {number|null} [velocity] Note velocity\n                 * @property {number|null} [startTime] Note startTime\n                 * @property {number|null} [quantizedStartStep] Note quantizedStartStep\n                 * @property {number|null} [endTime] Note endTime\n                 * @property {number|null} [quantizedEndStep] Note quantizedEndStep\n                 * @property {number|null} [numerator] Note numerator\n                 * @property {number|null} [denominator] Note denominator\n                 * @property {number|null} [instrument] Note instrument\n                 * @property {number|null} [program] Note program\n                 * @property {boolean|null} [isDrum] Note isDrum\n                 * @property {number|null} [part] Note part\n                 * @property {number|null} [voice] Note voice\n                 */\n\n                /**\n                 * Constructs a new Note.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a Note.\n                 * @implements INote\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.INote=} [properties] Properties to set\n                 */\n                function Note(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Note pitch.\n                 * @member {number} pitch\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.pitch = 0;\n\n                /**\n                 * Note pitchName.\n                 * @member {tensorflow.magenta.NoteSequence.PitchName} pitchName\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.pitchName = 0;\n\n                /**\n                 * Note velocity.\n                 * @member {number} velocity\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.velocity = 0;\n\n                /**\n                 * Note startTime.\n                 * @member {number} startTime\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.startTime = 0;\n\n                /**\n                 * Note quantizedStartStep.\n                 * @member {number} quantizedStartStep\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.quantizedStartStep = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Note endTime.\n                 * @member {number} endTime\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.endTime = 0;\n\n                /**\n                 * Note quantizedEndStep.\n                 * @member {number} quantizedEndStep\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.quantizedEndStep = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Note numerator.\n                 * @member {number} numerator\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.numerator = 0;\n\n                /**\n                 * Note denominator.\n                 * @member {number} denominator\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.denominator = 0;\n\n                /**\n                 * Note instrument.\n                 * @member {number} instrument\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.instrument = 0;\n\n                /**\n                 * Note program.\n                 * @member {number} program\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.program = 0;\n\n                /**\n                 * Note isDrum.\n                 * @member {boolean} isDrum\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.isDrum = false;\n\n                /**\n                 * Note part.\n                 * @member {number} part\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.part = 0;\n\n                /**\n                 * Note voice.\n                 * @member {number} voice\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 */\n                Note.prototype.voice = 0;\n\n                /**\n                 * Creates a new Note instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.INote=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.Note} Note instance\n                 */\n                Note.create = function create(properties) {\n                    return new Note(properties);\n                };\n\n                /**\n                 * Encodes the specified Note message. Does not implicitly {@link tensorflow.magenta.NoteSequence.Note.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.INote} message Note message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Note.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.pitch != null && message.hasOwnProperty(\"pitch\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.pitch);\n                    if (message.velocity != null && message.hasOwnProperty(\"velocity\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.velocity);\n                    if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                        writer.uint32(/* id 3, wireType 1 =*/25).double(message.startTime);\n                    if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                        writer.uint32(/* id 4, wireType 1 =*/33).double(message.endTime);\n                    if (message.numerator != null && message.hasOwnProperty(\"numerator\"))\n                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.numerator);\n                    if (message.denominator != null && message.hasOwnProperty(\"denominator\"))\n                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.denominator);\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.instrument);\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.program);\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        writer.uint32(/* id 9, wireType 0 =*/72).bool(message.isDrum);\n                    if (message.part != null && message.hasOwnProperty(\"part\"))\n                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.part);\n                    if (message.pitchName != null && message.hasOwnProperty(\"pitchName\"))\n                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.pitchName);\n                    if (message.voice != null && message.hasOwnProperty(\"voice\"))\n                        writer.uint32(/* id 12, wireType 0 =*/96).int32(message.voice);\n                    if (message.quantizedStartStep != null && message.hasOwnProperty(\"quantizedStartStep\"))\n                        writer.uint32(/* id 13, wireType 0 =*/104).int64(message.quantizedStartStep);\n                    if (message.quantizedEndStep != null && message.hasOwnProperty(\"quantizedEndStep\"))\n                        writer.uint32(/* id 14, wireType 0 =*/112).int64(message.quantizedEndStep);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Note message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.Note.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.INote} message Note message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Note.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Note message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.Note} Note\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Note.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.Note();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.pitch = reader.int32();\n                            break;\n                        case 11:\n                            message.pitchName = reader.int32();\n                            break;\n                        case 2:\n                            message.velocity = reader.int32();\n                            break;\n                        case 3:\n                            message.startTime = reader.double();\n                            break;\n                        case 13:\n                            message.quantizedStartStep = $util.Long?reader.int64().toNumber():reader.int64();\n                            break;\n                        case 4:\n                            message.endTime = reader.double();\n                            break;\n                        case 14:\n                            message.quantizedEndStep = $util.Long?reader.int64().toNumber():reader.int64();\n                            break;\n                        case 5:\n                            message.numerator = reader.int32();\n                            break;\n                        case 6:\n                            message.denominator = reader.int32();\n                            break;\n                        case 7:\n                            message.instrument = reader.int32();\n                            break;\n                        case 8:\n                            message.program = reader.int32();\n                            break;\n                        case 9:\n                            message.isDrum = reader.bool();\n                            break;\n                        case 10:\n                            message.part = reader.int32();\n                            break;\n                        case 12:\n                            message.voice = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Note message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.Note} Note\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Note.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Note message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Note.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.pitch != null && message.hasOwnProperty(\"pitch\"))\n                        if (!$util.isInteger(message.pitch))\n                            return \"pitch: integer expected\";\n                    if (message.pitchName != null && message.hasOwnProperty(\"pitchName\"))\n                        switch (message.pitchName) {\n                        default:\n                            return \"pitchName: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 11:\n                        case 12:\n                        case 13:\n                        case 14:\n                        case 15:\n                        case 16:\n                        case 17:\n                        case 18:\n                        case 19:\n                        case 20:\n                        case 21:\n                        case 22:\n                        case 23:\n                        case 24:\n                        case 25:\n                        case 26:\n                        case 27:\n                        case 28:\n                        case 29:\n                        case 30:\n                        case 31:\n                        case 32:\n                        case 33:\n                        case 34:\n                        case 35:\n                            break;\n                        }\n                    if (message.velocity != null && message.hasOwnProperty(\"velocity\"))\n                        if (!$util.isInteger(message.velocity))\n                            return \"velocity: integer expected\";\n                    if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                        if (typeof message.startTime !== \"number\")\n                            return \"startTime: number expected\";\n                    if (message.quantizedStartStep != null && message.hasOwnProperty(\"quantizedStartStep\"))\n                        if (!$util.isInteger(message.quantizedStartStep) && !(message.quantizedStartStep && $util.isInteger(message.quantizedStartStep.low) && $util.isInteger(message.quantizedStartStep.high)))\n                            return \"quantizedStartStep: integer|Long expected\";\n                    if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                        if (typeof message.endTime !== \"number\")\n                            return \"endTime: number expected\";\n                    if (message.quantizedEndStep != null && message.hasOwnProperty(\"quantizedEndStep\"))\n                        if (!$util.isInteger(message.quantizedEndStep) && !(message.quantizedEndStep && $util.isInteger(message.quantizedEndStep.low) && $util.isInteger(message.quantizedEndStep.high)))\n                            return \"quantizedEndStep: integer|Long expected\";\n                    if (message.numerator != null && message.hasOwnProperty(\"numerator\"))\n                        if (!$util.isInteger(message.numerator))\n                            return \"numerator: integer expected\";\n                    if (message.denominator != null && message.hasOwnProperty(\"denominator\"))\n                        if (!$util.isInteger(message.denominator))\n                            return \"denominator: integer expected\";\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        if (!$util.isInteger(message.instrument))\n                            return \"instrument: integer expected\";\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        if (!$util.isInteger(message.program))\n                            return \"program: integer expected\";\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        if (typeof message.isDrum !== \"boolean\")\n                            return \"isDrum: boolean expected\";\n                    if (message.part != null && message.hasOwnProperty(\"part\"))\n                        if (!$util.isInteger(message.part))\n                            return \"part: integer expected\";\n                    if (message.voice != null && message.hasOwnProperty(\"voice\"))\n                        if (!$util.isInteger(message.voice))\n                            return \"voice: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a Note message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.Note} Note\n                 */\n                Note.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.Note)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.Note();\n                    if (object.pitch != null)\n                        message.pitch = object.pitch | 0;\n                    switch (object.pitchName) {\n                    case \"UNKNOWN_PITCH_NAME\":\n                    case 0:\n                        message.pitchName = 0;\n                        break;\n                    case \"F_FLAT_FLAT\":\n                    case 1:\n                        message.pitchName = 1;\n                        break;\n                    case \"C_FLAT_FLAT\":\n                    case 2:\n                        message.pitchName = 2;\n                        break;\n                    case \"G_FLAT_FLAT\":\n                    case 3:\n                        message.pitchName = 3;\n                        break;\n                    case \"D_FLAT_FLAT\":\n                    case 4:\n                        message.pitchName = 4;\n                        break;\n                    case \"A_FLAT_FLAT\":\n                    case 5:\n                        message.pitchName = 5;\n                        break;\n                    case \"E_FLAT_FLAT\":\n                    case 6:\n                        message.pitchName = 6;\n                        break;\n                    case \"B_FLAT_FLAT\":\n                    case 7:\n                        message.pitchName = 7;\n                        break;\n                    case \"F_FLAT\":\n                    case 8:\n                        message.pitchName = 8;\n                        break;\n                    case \"C_FLAT\":\n                    case 9:\n                        message.pitchName = 9;\n                        break;\n                    case \"G_FLAT\":\n                    case 10:\n                        message.pitchName = 10;\n                        break;\n                    case \"D_FLAT\":\n                    case 11:\n                        message.pitchName = 11;\n                        break;\n                    case \"A_FLAT\":\n                    case 12:\n                        message.pitchName = 12;\n                        break;\n                    case \"E_FLAT\":\n                    case 13:\n                        message.pitchName = 13;\n                        break;\n                    case \"B_FLAT\":\n                    case 14:\n                        message.pitchName = 14;\n                        break;\n                    case \"F\":\n                    case 15:\n                        message.pitchName = 15;\n                        break;\n                    case \"C\":\n                    case 16:\n                        message.pitchName = 16;\n                        break;\n                    case \"G\":\n                    case 17:\n                        message.pitchName = 17;\n                        break;\n                    case \"D\":\n                    case 18:\n                        message.pitchName = 18;\n                        break;\n                    case \"A\":\n                    case 19:\n                        message.pitchName = 19;\n                        break;\n                    case \"E\":\n                    case 20:\n                        message.pitchName = 20;\n                        break;\n                    case \"B\":\n                    case 21:\n                        message.pitchName = 21;\n                        break;\n                    case \"F_SHARP\":\n                    case 22:\n                        message.pitchName = 22;\n                        break;\n                    case \"C_SHARP\":\n                    case 23:\n                        message.pitchName = 23;\n                        break;\n                    case \"G_SHARP\":\n                    case 24:\n                        message.pitchName = 24;\n                        break;\n                    case \"D_SHARP\":\n                    case 25:\n                        message.pitchName = 25;\n                        break;\n                    case \"A_SHARP\":\n                    case 26:\n                        message.pitchName = 26;\n                        break;\n                    case \"E_SHARP\":\n                    case 27:\n                        message.pitchName = 27;\n                        break;\n                    case \"B_SHARP\":\n                    case 28:\n                        message.pitchName = 28;\n                        break;\n                    case \"F_SHARP_SHARP\":\n                    case 29:\n                        message.pitchName = 29;\n                        break;\n                    case \"C_SHARP_SHARP\":\n                    case 30:\n                        message.pitchName = 30;\n                        break;\n                    case \"G_SHARP_SHARP\":\n                    case 31:\n                        message.pitchName = 31;\n                        break;\n                    case \"D_SHARP_SHARP\":\n                    case 32:\n                        message.pitchName = 32;\n                        break;\n                    case \"A_SHARP_SHARP\":\n                    case 33:\n                        message.pitchName = 33;\n                        break;\n                    case \"E_SHARP_SHARP\":\n                    case 34:\n                        message.pitchName = 34;\n                        break;\n                    case \"B_SHARP_SHARP\":\n                    case 35:\n                        message.pitchName = 35;\n                        break;\n                    }\n                    if (object.velocity != null)\n                        message.velocity = object.velocity | 0;\n                    if (object.startTime != null)\n                        message.startTime = Number(object.startTime);\n                    if (object.quantizedStartStep != null)\n                        if ($util.Long)\n                            (message.quantizedStartStep = $util.Long.fromValue(object.quantizedStartStep)).unsigned = false;\n                        else if (typeof object.quantizedStartStep === \"string\")\n                            message.quantizedStartStep = parseInt(object.quantizedStartStep, 10);\n                        else if (typeof object.quantizedStartStep === \"number\")\n                            message.quantizedStartStep = object.quantizedStartStep;\n                        else if (typeof object.quantizedStartStep === \"object\")\n                            message.quantizedStartStep = new $util.LongBits(object.quantizedStartStep.low >>> 0, object.quantizedStartStep.high >>> 0).toNumber();\n                    if (object.endTime != null)\n                        message.endTime = Number(object.endTime);\n                    if (object.quantizedEndStep != null)\n                        if ($util.Long)\n                            (message.quantizedEndStep = $util.Long.fromValue(object.quantizedEndStep)).unsigned = false;\n                        else if (typeof object.quantizedEndStep === \"string\")\n                            message.quantizedEndStep = parseInt(object.quantizedEndStep, 10);\n                        else if (typeof object.quantizedEndStep === \"number\")\n                            message.quantizedEndStep = object.quantizedEndStep;\n                        else if (typeof object.quantizedEndStep === \"object\")\n                            message.quantizedEndStep = new $util.LongBits(object.quantizedEndStep.low >>> 0, object.quantizedEndStep.high >>> 0).toNumber();\n                    if (object.numerator != null)\n                        message.numerator = object.numerator | 0;\n                    if (object.denominator != null)\n                        message.denominator = object.denominator | 0;\n                    if (object.instrument != null)\n                        message.instrument = object.instrument | 0;\n                    if (object.program != null)\n                        message.program = object.program | 0;\n                    if (object.isDrum != null)\n                        message.isDrum = Boolean(object.isDrum);\n                    if (object.part != null)\n                        message.part = object.part | 0;\n                    if (object.voice != null)\n                        message.voice = object.voice | 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Note message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.Note} message Note\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Note.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.pitch = 0;\n                        object.velocity = 0;\n                        object.startTime = 0;\n                        object.endTime = 0;\n                        object.numerator = 0;\n                        object.denominator = 0;\n                        object.instrument = 0;\n                        object.program = 0;\n                        object.isDrum = false;\n                        object.part = 0;\n                        object.pitchName = options.enums === String ? \"UNKNOWN_PITCH_NAME\" : 0;\n                        object.voice = 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.quantizedStartStep = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.quantizedStartStep = options.longs === String ? \"0\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.quantizedEndStep = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.quantizedEndStep = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.pitch != null && message.hasOwnProperty(\"pitch\"))\n                        object.pitch = message.pitch;\n                    if (message.velocity != null && message.hasOwnProperty(\"velocity\"))\n                        object.velocity = message.velocity;\n                    if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                        object.startTime = options.json && !isFinite(message.startTime) ? String(message.startTime) : message.startTime;\n                    if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                        object.endTime = options.json && !isFinite(message.endTime) ? String(message.endTime) : message.endTime;\n                    if (message.numerator != null && message.hasOwnProperty(\"numerator\"))\n                        object.numerator = message.numerator;\n                    if (message.denominator != null && message.hasOwnProperty(\"denominator\"))\n                        object.denominator = message.denominator;\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        object.instrument = message.instrument;\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        object.program = message.program;\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        object.isDrum = message.isDrum;\n                    if (message.part != null && message.hasOwnProperty(\"part\"))\n                        object.part = message.part;\n                    if (message.pitchName != null && message.hasOwnProperty(\"pitchName\"))\n                        object.pitchName = options.enums === String ? $root.tensorflow.magenta.NoteSequence.PitchName[message.pitchName] : message.pitchName;\n                    if (message.voice != null && message.hasOwnProperty(\"voice\"))\n                        object.voice = message.voice;\n                    if (message.quantizedStartStep != null && message.hasOwnProperty(\"quantizedStartStep\"))\n                        if (typeof message.quantizedStartStep === \"number\")\n                            object.quantizedStartStep = options.longs === String ? String(message.quantizedStartStep) : message.quantizedStartStep;\n                        else\n                            object.quantizedStartStep = options.longs === String ? $util.Long.prototype.toString.call(message.quantizedStartStep) : options.longs === Number ? new $util.LongBits(message.quantizedStartStep.low >>> 0, message.quantizedStartStep.high >>> 0).toNumber() : message.quantizedStartStep;\n                    if (message.quantizedEndStep != null && message.hasOwnProperty(\"quantizedEndStep\"))\n                        if (typeof message.quantizedEndStep === \"number\")\n                            object.quantizedEndStep = options.longs === String ? String(message.quantizedEndStep) : message.quantizedEndStep;\n                        else\n                            object.quantizedEndStep = options.longs === String ? $util.Long.prototype.toString.call(message.quantizedEndStep) : options.longs === Number ? new $util.LongBits(message.quantizedEndStep.low >>> 0, message.quantizedEndStep.high >>> 0).toNumber() : message.quantizedEndStep;\n                    return object;\n                };\n\n                /**\n                 * Converts this Note to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.Note\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Note.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Note;\n            })();\n\n            /**\n             * PitchName enum.\n             * @name tensorflow.magenta.NoteSequence.PitchName\n             * @enum {string}\n             * @property {number} UNKNOWN_PITCH_NAME=0 UNKNOWN_PITCH_NAME value\n             * @property {number} F_FLAT_FLAT=1 F_FLAT_FLAT value\n             * @property {number} C_FLAT_FLAT=2 C_FLAT_FLAT value\n             * @property {number} G_FLAT_FLAT=3 G_FLAT_FLAT value\n             * @property {number} D_FLAT_FLAT=4 D_FLAT_FLAT value\n             * @property {number} A_FLAT_FLAT=5 A_FLAT_FLAT value\n             * @property {number} E_FLAT_FLAT=6 E_FLAT_FLAT value\n             * @property {number} B_FLAT_FLAT=7 B_FLAT_FLAT value\n             * @property {number} F_FLAT=8 F_FLAT value\n             * @property {number} C_FLAT=9 C_FLAT value\n             * @property {number} G_FLAT=10 G_FLAT value\n             * @property {number} D_FLAT=11 D_FLAT value\n             * @property {number} A_FLAT=12 A_FLAT value\n             * @property {number} E_FLAT=13 E_FLAT value\n             * @property {number} B_FLAT=14 B_FLAT value\n             * @property {number} F=15 F value\n             * @property {number} C=16 C value\n             * @property {number} G=17 G value\n             * @property {number} D=18 D value\n             * @property {number} A=19 A value\n             * @property {number} E=20 E value\n             * @property {number} B=21 B value\n             * @property {number} F_SHARP=22 F_SHARP value\n             * @property {number} C_SHARP=23 C_SHARP value\n             * @property {number} G_SHARP=24 G_SHARP value\n             * @property {number} D_SHARP=25 D_SHARP value\n             * @property {number} A_SHARP=26 A_SHARP value\n             * @property {number} E_SHARP=27 E_SHARP value\n             * @property {number} B_SHARP=28 B_SHARP value\n             * @property {number} F_SHARP_SHARP=29 F_SHARP_SHARP value\n             * @property {number} C_SHARP_SHARP=30 C_SHARP_SHARP value\n             * @property {number} G_SHARP_SHARP=31 G_SHARP_SHARP value\n             * @property {number} D_SHARP_SHARP=32 D_SHARP_SHARP value\n             * @property {number} A_SHARP_SHARP=33 A_SHARP_SHARP value\n             * @property {number} E_SHARP_SHARP=34 E_SHARP_SHARP value\n             * @property {number} B_SHARP_SHARP=35 B_SHARP_SHARP value\n             */\n            NoteSequence.PitchName = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"UNKNOWN_PITCH_NAME\"] = 0;\n                values[valuesById[1] = \"F_FLAT_FLAT\"] = 1;\n                values[valuesById[2] = \"C_FLAT_FLAT\"] = 2;\n                values[valuesById[3] = \"G_FLAT_FLAT\"] = 3;\n                values[valuesById[4] = \"D_FLAT_FLAT\"] = 4;\n                values[valuesById[5] = \"A_FLAT_FLAT\"] = 5;\n                values[valuesById[6] = \"E_FLAT_FLAT\"] = 6;\n                values[valuesById[7] = \"B_FLAT_FLAT\"] = 7;\n                values[valuesById[8] = \"F_FLAT\"] = 8;\n                values[valuesById[9] = \"C_FLAT\"] = 9;\n                values[valuesById[10] = \"G_FLAT\"] = 10;\n                values[valuesById[11] = \"D_FLAT\"] = 11;\n                values[valuesById[12] = \"A_FLAT\"] = 12;\n                values[valuesById[13] = \"E_FLAT\"] = 13;\n                values[valuesById[14] = \"B_FLAT\"] = 14;\n                values[valuesById[15] = \"F\"] = 15;\n                values[valuesById[16] = \"C\"] = 16;\n                values[valuesById[17] = \"G\"] = 17;\n                values[valuesById[18] = \"D\"] = 18;\n                values[valuesById[19] = \"A\"] = 19;\n                values[valuesById[20] = \"E\"] = 20;\n                values[valuesById[21] = \"B\"] = 21;\n                values[valuesById[22] = \"F_SHARP\"] = 22;\n                values[valuesById[23] = \"C_SHARP\"] = 23;\n                values[valuesById[24] = \"G_SHARP\"] = 24;\n                values[valuesById[25] = \"D_SHARP\"] = 25;\n                values[valuesById[26] = \"A_SHARP\"] = 26;\n                values[valuesById[27] = \"E_SHARP\"] = 27;\n                values[valuesById[28] = \"B_SHARP\"] = 28;\n                values[valuesById[29] = \"F_SHARP_SHARP\"] = 29;\n                values[valuesById[30] = \"C_SHARP_SHARP\"] = 30;\n                values[valuesById[31] = \"G_SHARP_SHARP\"] = 31;\n                values[valuesById[32] = \"D_SHARP_SHARP\"] = 32;\n                values[valuesById[33] = \"A_SHARP_SHARP\"] = 33;\n                values[valuesById[34] = \"E_SHARP_SHARP\"] = 34;\n                values[valuesById[35] = \"B_SHARP_SHARP\"] = 35;\n                return values;\n            })();\n\n            NoteSequence.TimeSignature = (function() {\n\n                /**\n                 * Properties of a TimeSignature.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ITimeSignature\n                 * @property {number|null} [time] TimeSignature time\n                 * @property {number|null} [numerator] TimeSignature numerator\n                 * @property {number|null} [denominator] TimeSignature denominator\n                 */\n\n                /**\n                 * Constructs a new TimeSignature.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a TimeSignature.\n                 * @implements ITimeSignature\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ITimeSignature=} [properties] Properties to set\n                 */\n                function TimeSignature(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TimeSignature time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @instance\n                 */\n                TimeSignature.prototype.time = 0;\n\n                /**\n                 * TimeSignature numerator.\n                 * @member {number} numerator\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @instance\n                 */\n                TimeSignature.prototype.numerator = 0;\n\n                /**\n                 * TimeSignature denominator.\n                 * @member {number} denominator\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @instance\n                 */\n                TimeSignature.prototype.denominator = 0;\n\n                /**\n                 * Creates a new TimeSignature instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITimeSignature=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.TimeSignature} TimeSignature instance\n                 */\n                TimeSignature.create = function create(properties) {\n                    return new TimeSignature(properties);\n                };\n\n                /**\n                 * Encodes the specified TimeSignature message. Does not implicitly {@link tensorflow.magenta.NoteSequence.TimeSignature.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITimeSignature} message TimeSignature message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TimeSignature.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.numerator != null && message.hasOwnProperty(\"numerator\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.numerator);\n                    if (message.denominator != null && message.hasOwnProperty(\"denominator\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.denominator);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TimeSignature message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.TimeSignature.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITimeSignature} message TimeSignature message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TimeSignature.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TimeSignature message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.TimeSignature} TimeSignature\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TimeSignature.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.TimeSignature();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 2:\n                            message.numerator = reader.int32();\n                            break;\n                        case 3:\n                            message.denominator = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TimeSignature message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.TimeSignature} TimeSignature\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TimeSignature.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TimeSignature message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TimeSignature.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.numerator != null && message.hasOwnProperty(\"numerator\"))\n                        if (!$util.isInteger(message.numerator))\n                            return \"numerator: integer expected\";\n                    if (message.denominator != null && message.hasOwnProperty(\"denominator\"))\n                        if (!$util.isInteger(message.denominator))\n                            return \"denominator: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a TimeSignature message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.TimeSignature} TimeSignature\n                 */\n                TimeSignature.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.TimeSignature)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.TimeSignature();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    if (object.numerator != null)\n                        message.numerator = object.numerator | 0;\n                    if (object.denominator != null)\n                        message.denominator = object.denominator | 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TimeSignature message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.TimeSignature} message TimeSignature\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TimeSignature.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        object.numerator = 0;\n                        object.denominator = 0;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.numerator != null && message.hasOwnProperty(\"numerator\"))\n                        object.numerator = message.numerator;\n                    if (message.denominator != null && message.hasOwnProperty(\"denominator\"))\n                        object.denominator = message.denominator;\n                    return object;\n                };\n\n                /**\n                 * Converts this TimeSignature to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.TimeSignature\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TimeSignature.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return TimeSignature;\n            })();\n\n            NoteSequence.KeySignature = (function() {\n\n                /**\n                 * Properties of a KeySignature.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface IKeySignature\n                 * @property {number|null} [time] KeySignature time\n                 * @property {tensorflow.magenta.NoteSequence.KeySignature.Key|null} [key] KeySignature key\n                 * @property {tensorflow.magenta.NoteSequence.KeySignature.Mode|null} [mode] KeySignature mode\n                 */\n\n                /**\n                 * Constructs a new KeySignature.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a KeySignature.\n                 * @implements IKeySignature\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.IKeySignature=} [properties] Properties to set\n                 */\n                function KeySignature(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * KeySignature time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @instance\n                 */\n                KeySignature.prototype.time = 0;\n\n                /**\n                 * KeySignature key.\n                 * @member {tensorflow.magenta.NoteSequence.KeySignature.Key} key\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @instance\n                 */\n                KeySignature.prototype.key = 0;\n\n                /**\n                 * KeySignature mode.\n                 * @member {tensorflow.magenta.NoteSequence.KeySignature.Mode} mode\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @instance\n                 */\n                KeySignature.prototype.mode = 0;\n\n                /**\n                 * Creates a new KeySignature instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IKeySignature=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.KeySignature} KeySignature instance\n                 */\n                KeySignature.create = function create(properties) {\n                    return new KeySignature(properties);\n                };\n\n                /**\n                 * Encodes the specified KeySignature message. Does not implicitly {@link tensorflow.magenta.NoteSequence.KeySignature.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IKeySignature} message KeySignature message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                KeySignature.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.key != null && message.hasOwnProperty(\"key\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.key);\n                    if (message.mode != null && message.hasOwnProperty(\"mode\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.mode);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified KeySignature message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.KeySignature.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IKeySignature} message KeySignature message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                KeySignature.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a KeySignature message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.KeySignature} KeySignature\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                KeySignature.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.KeySignature();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 2:\n                            message.key = reader.int32();\n                            break;\n                        case 3:\n                            message.mode = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a KeySignature message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.KeySignature} KeySignature\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                KeySignature.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a KeySignature message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                KeySignature.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.key != null && message.hasOwnProperty(\"key\"))\n                        switch (message.key) {\n                        default:\n                            return \"key: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 6:\n                        case 7:\n                        case 8:\n                        case 8:\n                        case 9:\n                        case 10:\n                        case 10:\n                        case 11:\n                            break;\n                        }\n                    if (message.mode != null && message.hasOwnProperty(\"mode\"))\n                        switch (message.mode) {\n                        default:\n                            return \"mode: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 7:\n                            break;\n                        }\n                    return null;\n                };\n\n                /**\n                 * Creates a KeySignature message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.KeySignature} KeySignature\n                 */\n                KeySignature.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.KeySignature)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.KeySignature();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    switch (object.key) {\n                    case \"C\":\n                    case 0:\n                        message.key = 0;\n                        break;\n                    case \"C_SHARP\":\n                    case 1:\n                        message.key = 1;\n                        break;\n                    case \"D_FLAT\":\n                    case 1:\n                        message.key = 1;\n                        break;\n                    case \"D\":\n                    case 2:\n                        message.key = 2;\n                        break;\n                    case \"D_SHARP\":\n                    case 3:\n                        message.key = 3;\n                        break;\n                    case \"E_FLAT\":\n                    case 3:\n                        message.key = 3;\n                        break;\n                    case \"E\":\n                    case 4:\n                        message.key = 4;\n                        break;\n                    case \"F\":\n                    case 5:\n                        message.key = 5;\n                        break;\n                    case \"F_SHARP\":\n                    case 6:\n                        message.key = 6;\n                        break;\n                    case \"G_FLAT\":\n                    case 6:\n                        message.key = 6;\n                        break;\n                    case \"G\":\n                    case 7:\n                        message.key = 7;\n                        break;\n                    case \"G_SHARP\":\n                    case 8:\n                        message.key = 8;\n                        break;\n                    case \"A_FLAT\":\n                    case 8:\n                        message.key = 8;\n                        break;\n                    case \"A\":\n                    case 9:\n                        message.key = 9;\n                        break;\n                    case \"A_SHARP\":\n                    case 10:\n                        message.key = 10;\n                        break;\n                    case \"B_FLAT\":\n                    case 10:\n                        message.key = 10;\n                        break;\n                    case \"B\":\n                    case 11:\n                        message.key = 11;\n                        break;\n                    }\n                    switch (object.mode) {\n                    case \"MAJOR\":\n                    case 0:\n                        message.mode = 0;\n                        break;\n                    case \"MINOR\":\n                    case 1:\n                        message.mode = 1;\n                        break;\n                    case \"NOT_SPECIFIED\":\n                    case 2:\n                        message.mode = 2;\n                        break;\n                    case \"MIXOLYDIAN\":\n                    case 3:\n                        message.mode = 3;\n                        break;\n                    case \"DORIAN\":\n                    case 4:\n                        message.mode = 4;\n                        break;\n                    case \"PHRYGIAN\":\n                    case 5:\n                        message.mode = 5;\n                        break;\n                    case \"LYDIAN\":\n                    case 6:\n                        message.mode = 6;\n                        break;\n                    case \"LOCRIAN\":\n                    case 7:\n                        message.mode = 7;\n                        break;\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a KeySignature message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.KeySignature} message KeySignature\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                KeySignature.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        object.key = options.enums === String ? \"C\" : 0;\n                        object.mode = options.enums === String ? \"MAJOR\" : 0;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.key != null && message.hasOwnProperty(\"key\"))\n                        object.key = options.enums === String ? $root.tensorflow.magenta.NoteSequence.KeySignature.Key[message.key] : message.key;\n                    if (message.mode != null && message.hasOwnProperty(\"mode\"))\n                        object.mode = options.enums === String ? $root.tensorflow.magenta.NoteSequence.KeySignature.Mode[message.mode] : message.mode;\n                    return object;\n                };\n\n                /**\n                 * Converts this KeySignature to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.KeySignature\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                KeySignature.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                /**\n                 * Key enum.\n                 * @name tensorflow.magenta.NoteSequence.KeySignature.Key\n                 * @enum {string}\n                 * @property {number} C=0 C value\n                 * @property {number} C_SHARP=1 C_SHARP value\n                 * @property {number} D_FLAT=1 D_FLAT value\n                 * @property {number} D=2 D value\n                 * @property {number} D_SHARP=3 D_SHARP value\n                 * @property {number} E_FLAT=3 E_FLAT value\n                 * @property {number} E=4 E value\n                 * @property {number} F=5 F value\n                 * @property {number} F_SHARP=6 F_SHARP value\n                 * @property {number} G_FLAT=6 G_FLAT value\n                 * @property {number} G=7 G value\n                 * @property {number} G_SHARP=8 G_SHARP value\n                 * @property {number} A_FLAT=8 A_FLAT value\n                 * @property {number} A=9 A value\n                 * @property {number} A_SHARP=10 A_SHARP value\n                 * @property {number} B_FLAT=10 B_FLAT value\n                 * @property {number} B=11 B value\n                 */\n                KeySignature.Key = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"C\"] = 0;\n                    values[valuesById[1] = \"C_SHARP\"] = 1;\n                    values[\"D_FLAT\"] = 1;\n                    values[valuesById[2] = \"D\"] = 2;\n                    values[valuesById[3] = \"D_SHARP\"] = 3;\n                    values[\"E_FLAT\"] = 3;\n                    values[valuesById[4] = \"E\"] = 4;\n                    values[valuesById[5] = \"F\"] = 5;\n                    values[valuesById[6] = \"F_SHARP\"] = 6;\n                    values[\"G_FLAT\"] = 6;\n                    values[valuesById[7] = \"G\"] = 7;\n                    values[valuesById[8] = \"G_SHARP\"] = 8;\n                    values[\"A_FLAT\"] = 8;\n                    values[valuesById[9] = \"A\"] = 9;\n                    values[valuesById[10] = \"A_SHARP\"] = 10;\n                    values[\"B_FLAT\"] = 10;\n                    values[valuesById[11] = \"B\"] = 11;\n                    return values;\n                })();\n\n                /**\n                 * Mode enum.\n                 * @name tensorflow.magenta.NoteSequence.KeySignature.Mode\n                 * @enum {string}\n                 * @property {number} MAJOR=0 MAJOR value\n                 * @property {number} MINOR=1 MINOR value\n                 * @property {number} NOT_SPECIFIED=2 NOT_SPECIFIED value\n                 * @property {number} MIXOLYDIAN=3 MIXOLYDIAN value\n                 * @property {number} DORIAN=4 DORIAN value\n                 * @property {number} PHRYGIAN=5 PHRYGIAN value\n                 * @property {number} LYDIAN=6 LYDIAN value\n                 * @property {number} LOCRIAN=7 LOCRIAN value\n                 */\n                KeySignature.Mode = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"MAJOR\"] = 0;\n                    values[valuesById[1] = \"MINOR\"] = 1;\n                    values[valuesById[2] = \"NOT_SPECIFIED\"] = 2;\n                    values[valuesById[3] = \"MIXOLYDIAN\"] = 3;\n                    values[valuesById[4] = \"DORIAN\"] = 4;\n                    values[valuesById[5] = \"PHRYGIAN\"] = 5;\n                    values[valuesById[6] = \"LYDIAN\"] = 6;\n                    values[valuesById[7] = \"LOCRIAN\"] = 7;\n                    return values;\n                })();\n\n                return KeySignature;\n            })();\n\n            NoteSequence.Tempo = (function() {\n\n                /**\n                 * Properties of a Tempo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ITempo\n                 * @property {number|null} [time] Tempo time\n                 * @property {number|null} [qpm] Tempo qpm\n                 */\n\n                /**\n                 * Constructs a new Tempo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a Tempo.\n                 * @implements ITempo\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ITempo=} [properties] Properties to set\n                 */\n                function Tempo(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Tempo time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @instance\n                 */\n                Tempo.prototype.time = 0;\n\n                /**\n                 * Tempo qpm.\n                 * @member {number} qpm\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @instance\n                 */\n                Tempo.prototype.qpm = 0;\n\n                /**\n                 * Creates a new Tempo instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITempo=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.Tempo} Tempo instance\n                 */\n                Tempo.create = function create(properties) {\n                    return new Tempo(properties);\n                };\n\n                /**\n                 * Encodes the specified Tempo message. Does not implicitly {@link tensorflow.magenta.NoteSequence.Tempo.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITempo} message Tempo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Tempo.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.qpm != null && message.hasOwnProperty(\"qpm\"))\n                        writer.uint32(/* id 2, wireType 1 =*/17).double(message.qpm);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Tempo message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.Tempo.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITempo} message Tempo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Tempo.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Tempo message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.Tempo} Tempo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Tempo.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.Tempo();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 2:\n                            message.qpm = reader.double();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Tempo message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.Tempo} Tempo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Tempo.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Tempo message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Tempo.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.qpm != null && message.hasOwnProperty(\"qpm\"))\n                        if (typeof message.qpm !== \"number\")\n                            return \"qpm: number expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a Tempo message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.Tempo} Tempo\n                 */\n                Tempo.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.Tempo)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.Tempo();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    if (object.qpm != null)\n                        message.qpm = Number(object.qpm);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Tempo message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.Tempo} message Tempo\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Tempo.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        object.qpm = 0;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.qpm != null && message.hasOwnProperty(\"qpm\"))\n                        object.qpm = options.json && !isFinite(message.qpm) ? String(message.qpm) : message.qpm;\n                    return object;\n                };\n\n                /**\n                 * Converts this Tempo to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.Tempo\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Tempo.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Tempo;\n            })();\n\n            NoteSequence.PitchBend = (function() {\n\n                /**\n                 * Properties of a PitchBend.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface IPitchBend\n                 * @property {number|null} [time] PitchBend time\n                 * @property {number|null} [bend] PitchBend bend\n                 * @property {number|null} [instrument] PitchBend instrument\n                 * @property {number|null} [program] PitchBend program\n                 * @property {boolean|null} [isDrum] PitchBend isDrum\n                 */\n\n                /**\n                 * Constructs a new PitchBend.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a PitchBend.\n                 * @implements IPitchBend\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.IPitchBend=} [properties] Properties to set\n                 */\n                function PitchBend(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * PitchBend time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @instance\n                 */\n                PitchBend.prototype.time = 0;\n\n                /**\n                 * PitchBend bend.\n                 * @member {number} bend\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @instance\n                 */\n                PitchBend.prototype.bend = 0;\n\n                /**\n                 * PitchBend instrument.\n                 * @member {number} instrument\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @instance\n                 */\n                PitchBend.prototype.instrument = 0;\n\n                /**\n                 * PitchBend program.\n                 * @member {number} program\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @instance\n                 */\n                PitchBend.prototype.program = 0;\n\n                /**\n                 * PitchBend isDrum.\n                 * @member {boolean} isDrum\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @instance\n                 */\n                PitchBend.prototype.isDrum = false;\n\n                /**\n                 * Creates a new PitchBend instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IPitchBend=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.PitchBend} PitchBend instance\n                 */\n                PitchBend.create = function create(properties) {\n                    return new PitchBend(properties);\n                };\n\n                /**\n                 * Encodes the specified PitchBend message. Does not implicitly {@link tensorflow.magenta.NoteSequence.PitchBend.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IPitchBend} message PitchBend message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PitchBend.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.bend != null && message.hasOwnProperty(\"bend\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.bend);\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.instrument);\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.program);\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isDrum);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified PitchBend message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.PitchBend.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IPitchBend} message PitchBend message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PitchBend.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a PitchBend message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.PitchBend} PitchBend\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PitchBend.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.PitchBend();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 2:\n                            message.bend = reader.int32();\n                            break;\n                        case 3:\n                            message.instrument = reader.int32();\n                            break;\n                        case 4:\n                            message.program = reader.int32();\n                            break;\n                        case 5:\n                            message.isDrum = reader.bool();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a PitchBend message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.PitchBend} PitchBend\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PitchBend.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a PitchBend message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                PitchBend.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.bend != null && message.hasOwnProperty(\"bend\"))\n                        if (!$util.isInteger(message.bend))\n                            return \"bend: integer expected\";\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        if (!$util.isInteger(message.instrument))\n                            return \"instrument: integer expected\";\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        if (!$util.isInteger(message.program))\n                            return \"program: integer expected\";\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        if (typeof message.isDrum !== \"boolean\")\n                            return \"isDrum: boolean expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a PitchBend message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.PitchBend} PitchBend\n                 */\n                PitchBend.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.PitchBend)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.PitchBend();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    if (object.bend != null)\n                        message.bend = object.bend | 0;\n                    if (object.instrument != null)\n                        message.instrument = object.instrument | 0;\n                    if (object.program != null)\n                        message.program = object.program | 0;\n                    if (object.isDrum != null)\n                        message.isDrum = Boolean(object.isDrum);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a PitchBend message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.PitchBend} message PitchBend\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                PitchBend.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        object.bend = 0;\n                        object.instrument = 0;\n                        object.program = 0;\n                        object.isDrum = false;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.bend != null && message.hasOwnProperty(\"bend\"))\n                        object.bend = message.bend;\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        object.instrument = message.instrument;\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        object.program = message.program;\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        object.isDrum = message.isDrum;\n                    return object;\n                };\n\n                /**\n                 * Converts this PitchBend to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.PitchBend\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                PitchBend.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return PitchBend;\n            })();\n\n            NoteSequence.ControlChange = (function() {\n\n                /**\n                 * Properties of a ControlChange.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface IControlChange\n                 * @property {number|null} [time] ControlChange time\n                 * @property {number|null} [quantizedStep] ControlChange quantizedStep\n                 * @property {number|null} [controlNumber] ControlChange controlNumber\n                 * @property {number|null} [controlValue] ControlChange controlValue\n                 * @property {number|null} [instrument] ControlChange instrument\n                 * @property {number|null} [program] ControlChange program\n                 * @property {boolean|null} [isDrum] ControlChange isDrum\n                 */\n\n                /**\n                 * Constructs a new ControlChange.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a ControlChange.\n                 * @implements IControlChange\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.IControlChange=} [properties] Properties to set\n                 */\n                function ControlChange(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * ControlChange time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.time = 0;\n\n                /**\n                 * ControlChange quantizedStep.\n                 * @member {number} quantizedStep\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.quantizedStep = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * ControlChange controlNumber.\n                 * @member {number} controlNumber\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.controlNumber = 0;\n\n                /**\n                 * ControlChange controlValue.\n                 * @member {number} controlValue\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.controlValue = 0;\n\n                /**\n                 * ControlChange instrument.\n                 * @member {number} instrument\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.instrument = 0;\n\n                /**\n                 * ControlChange program.\n                 * @member {number} program\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.program = 0;\n\n                /**\n                 * ControlChange isDrum.\n                 * @member {boolean} isDrum\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 */\n                ControlChange.prototype.isDrum = false;\n\n                /**\n                 * Creates a new ControlChange instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IControlChange=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.ControlChange} ControlChange instance\n                 */\n                ControlChange.create = function create(properties) {\n                    return new ControlChange(properties);\n                };\n\n                /**\n                 * Encodes the specified ControlChange message. Does not implicitly {@link tensorflow.magenta.NoteSequence.ControlChange.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IControlChange} message ControlChange message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ControlChange.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.controlNumber != null && message.hasOwnProperty(\"controlNumber\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.controlNumber);\n                    if (message.controlValue != null && message.hasOwnProperty(\"controlValue\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.controlValue);\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.instrument);\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.program);\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.isDrum);\n                    if (message.quantizedStep != null && message.hasOwnProperty(\"quantizedStep\"))\n                        writer.uint32(/* id 7, wireType 0 =*/56).int64(message.quantizedStep);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified ControlChange message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.ControlChange.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IControlChange} message ControlChange message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ControlChange.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a ControlChange message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.ControlChange} ControlChange\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ControlChange.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.ControlChange();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 7:\n                            message.quantizedStep = $util.Long?reader.int64().toNumber():reader.int64();\n                            break;\n                        case 2:\n                            message.controlNumber = reader.int32();\n                            break;\n                        case 3:\n                            message.controlValue = reader.int32();\n                            break;\n                        case 4:\n                            message.instrument = reader.int32();\n                            break;\n                        case 5:\n                            message.program = reader.int32();\n                            break;\n                        case 6:\n                            message.isDrum = reader.bool();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a ControlChange message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.ControlChange} ControlChange\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ControlChange.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a ControlChange message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                ControlChange.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.quantizedStep != null && message.hasOwnProperty(\"quantizedStep\"))\n                        if (!$util.isInteger(message.quantizedStep) && !(message.quantizedStep && $util.isInteger(message.quantizedStep.low) && $util.isInteger(message.quantizedStep.high)))\n                            return \"quantizedStep: integer|Long expected\";\n                    if (message.controlNumber != null && message.hasOwnProperty(\"controlNumber\"))\n                        if (!$util.isInteger(message.controlNumber))\n                            return \"controlNumber: integer expected\";\n                    if (message.controlValue != null && message.hasOwnProperty(\"controlValue\"))\n                        if (!$util.isInteger(message.controlValue))\n                            return \"controlValue: integer expected\";\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        if (!$util.isInteger(message.instrument))\n                            return \"instrument: integer expected\";\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        if (!$util.isInteger(message.program))\n                            return \"program: integer expected\";\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        if (typeof message.isDrum !== \"boolean\")\n                            return \"isDrum: boolean expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a ControlChange message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.ControlChange} ControlChange\n                 */\n                ControlChange.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.ControlChange)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.ControlChange();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    if (object.quantizedStep != null)\n                        if ($util.Long)\n                            (message.quantizedStep = $util.Long.fromValue(object.quantizedStep)).unsigned = false;\n                        else if (typeof object.quantizedStep === \"string\")\n                            message.quantizedStep = parseInt(object.quantizedStep, 10);\n                        else if (typeof object.quantizedStep === \"number\")\n                            message.quantizedStep = object.quantizedStep;\n                        else if (typeof object.quantizedStep === \"object\")\n                            message.quantizedStep = new $util.LongBits(object.quantizedStep.low >>> 0, object.quantizedStep.high >>> 0).toNumber();\n                    if (object.controlNumber != null)\n                        message.controlNumber = object.controlNumber | 0;\n                    if (object.controlValue != null)\n                        message.controlValue = object.controlValue | 0;\n                    if (object.instrument != null)\n                        message.instrument = object.instrument | 0;\n                    if (object.program != null)\n                        message.program = object.program | 0;\n                    if (object.isDrum != null)\n                        message.isDrum = Boolean(object.isDrum);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a ControlChange message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ControlChange} message ControlChange\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                ControlChange.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        object.controlNumber = 0;\n                        object.controlValue = 0;\n                        object.instrument = 0;\n                        object.program = 0;\n                        object.isDrum = false;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.quantizedStep = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.quantizedStep = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.controlNumber != null && message.hasOwnProperty(\"controlNumber\"))\n                        object.controlNumber = message.controlNumber;\n                    if (message.controlValue != null && message.hasOwnProperty(\"controlValue\"))\n                        object.controlValue = message.controlValue;\n                    if (message.instrument != null && message.hasOwnProperty(\"instrument\"))\n                        object.instrument = message.instrument;\n                    if (message.program != null && message.hasOwnProperty(\"program\"))\n                        object.program = message.program;\n                    if (message.isDrum != null && message.hasOwnProperty(\"isDrum\"))\n                        object.isDrum = message.isDrum;\n                    if (message.quantizedStep != null && message.hasOwnProperty(\"quantizedStep\"))\n                        if (typeof message.quantizedStep === \"number\")\n                            object.quantizedStep = options.longs === String ? String(message.quantizedStep) : message.quantizedStep;\n                        else\n                            object.quantizedStep = options.longs === String ? $util.Long.prototype.toString.call(message.quantizedStep) : options.longs === Number ? new $util.LongBits(message.quantizedStep.low >>> 0, message.quantizedStep.high >>> 0).toNumber() : message.quantizedStep;\n                    return object;\n                };\n\n                /**\n                 * Converts this ControlChange to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.ControlChange\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                ControlChange.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return ControlChange;\n            })();\n\n            NoteSequence.PartInfo = (function() {\n\n                /**\n                 * Properties of a PartInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface IPartInfo\n                 * @property {number|null} [part] PartInfo part\n                 * @property {string|null} [name] PartInfo name\n                 */\n\n                /**\n                 * Constructs a new PartInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a PartInfo.\n                 * @implements IPartInfo\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.IPartInfo=} [properties] Properties to set\n                 */\n                function PartInfo(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * PartInfo part.\n                 * @member {number} part\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @instance\n                 */\n                PartInfo.prototype.part = 0;\n\n                /**\n                 * PartInfo name.\n                 * @member {string} name\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @instance\n                 */\n                PartInfo.prototype.name = \"\";\n\n                /**\n                 * Creates a new PartInfo instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IPartInfo=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.PartInfo} PartInfo instance\n                 */\n                PartInfo.create = function create(properties) {\n                    return new PartInfo(properties);\n                };\n\n                /**\n                 * Encodes the specified PartInfo message. Does not implicitly {@link tensorflow.magenta.NoteSequence.PartInfo.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IPartInfo} message PartInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PartInfo.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.part != null && message.hasOwnProperty(\"part\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.part);\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified PartInfo message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.PartInfo.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IPartInfo} message PartInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PartInfo.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a PartInfo message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.PartInfo} PartInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PartInfo.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.PartInfo();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.part = reader.int32();\n                            break;\n                        case 2:\n                            message.name = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a PartInfo message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.PartInfo} PartInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PartInfo.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a PartInfo message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                PartInfo.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.part != null && message.hasOwnProperty(\"part\"))\n                        if (!$util.isInteger(message.part))\n                            return \"part: integer expected\";\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        if (!$util.isString(message.name))\n                            return \"name: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a PartInfo message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.PartInfo} PartInfo\n                 */\n                PartInfo.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.PartInfo)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.PartInfo();\n                    if (object.part != null)\n                        message.part = object.part | 0;\n                    if (object.name != null)\n                        message.name = String(object.name);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a PartInfo message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.PartInfo} message PartInfo\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                PartInfo.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.part = 0;\n                        object.name = \"\";\n                    }\n                    if (message.part != null && message.hasOwnProperty(\"part\"))\n                        object.part = message.part;\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        object.name = message.name;\n                    return object;\n                };\n\n                /**\n                 * Converts this PartInfo to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.PartInfo\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                PartInfo.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return PartInfo;\n            })();\n\n            NoteSequence.SourceInfo = (function() {\n\n                /**\n                 * Properties of a SourceInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ISourceInfo\n                 * @property {tensorflow.magenta.NoteSequence.SourceInfo.SourceType|null} [sourceType] SourceInfo sourceType\n                 * @property {tensorflow.magenta.NoteSequence.SourceInfo.EncodingType|null} [encodingType] SourceInfo encodingType\n                 * @property {tensorflow.magenta.NoteSequence.SourceInfo.Parser|null} [parser] SourceInfo parser\n                 */\n\n                /**\n                 * Constructs a new SourceInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a SourceInfo.\n                 * @implements ISourceInfo\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ISourceInfo=} [properties] Properties to set\n                 */\n                function SourceInfo(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SourceInfo sourceType.\n                 * @member {tensorflow.magenta.NoteSequence.SourceInfo.SourceType} sourceType\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @instance\n                 */\n                SourceInfo.prototype.sourceType = 0;\n\n                /**\n                 * SourceInfo encodingType.\n                 * @member {tensorflow.magenta.NoteSequence.SourceInfo.EncodingType} encodingType\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @instance\n                 */\n                SourceInfo.prototype.encodingType = 0;\n\n                /**\n                 * SourceInfo parser.\n                 * @member {tensorflow.magenta.NoteSequence.SourceInfo.Parser} parser\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @instance\n                 */\n                SourceInfo.prototype.parser = 0;\n\n                /**\n                 * Creates a new SourceInfo instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISourceInfo=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.SourceInfo} SourceInfo instance\n                 */\n                SourceInfo.create = function create(properties) {\n                    return new SourceInfo(properties);\n                };\n\n                /**\n                 * Encodes the specified SourceInfo message. Does not implicitly {@link tensorflow.magenta.NoteSequence.SourceInfo.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISourceInfo} message SourceInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SourceInfo.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.sourceType != null && message.hasOwnProperty(\"sourceType\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.sourceType);\n                    if (message.encodingType != null && message.hasOwnProperty(\"encodingType\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.encodingType);\n                    if (message.parser != null && message.hasOwnProperty(\"parser\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.parser);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SourceInfo message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.SourceInfo.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISourceInfo} message SourceInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SourceInfo.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SourceInfo message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.SourceInfo} SourceInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SourceInfo.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.SourceInfo();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.sourceType = reader.int32();\n                            break;\n                        case 2:\n                            message.encodingType = reader.int32();\n                            break;\n                        case 3:\n                            message.parser = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SourceInfo message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.SourceInfo} SourceInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SourceInfo.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SourceInfo message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SourceInfo.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.sourceType != null && message.hasOwnProperty(\"sourceType\"))\n                        switch (message.sourceType) {\n                        default:\n                            return \"sourceType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    if (message.encodingType != null && message.hasOwnProperty(\"encodingType\"))\n                        switch (message.encodingType) {\n                        default:\n                            return \"encodingType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                            break;\n                        }\n                    if (message.parser != null && message.hasOwnProperty(\"parser\"))\n                        switch (message.parser) {\n                        default:\n                            return \"parser: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                            break;\n                        }\n                    return null;\n                };\n\n                /**\n                 * Creates a SourceInfo message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.SourceInfo} SourceInfo\n                 */\n                SourceInfo.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.SourceInfo)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.SourceInfo();\n                    switch (object.sourceType) {\n                    case \"UNKNOWN_SOURCE_TYPE\":\n                    case 0:\n                        message.sourceType = 0;\n                        break;\n                    case \"SCORE_BASED\":\n                    case 1:\n                        message.sourceType = 1;\n                        break;\n                    case \"PERFORMANCE_BASED\":\n                    case 2:\n                        message.sourceType = 2;\n                        break;\n                    }\n                    switch (object.encodingType) {\n                    case \"UNKNOWN_ENCODING_TYPE\":\n                    case 0:\n                        message.encodingType = 0;\n                        break;\n                    case \"MUSIC_XML\":\n                    case 1:\n                        message.encodingType = 1;\n                        break;\n                    case \"ABC\":\n                    case 2:\n                        message.encodingType = 2;\n                        break;\n                    case \"MIDI\":\n                    case 3:\n                        message.encodingType = 3;\n                        break;\n                    case \"MUSICNET\":\n                    case 4:\n                        message.encodingType = 4;\n                        break;\n                    }\n                    switch (object.parser) {\n                    case \"UNKNOWN_PARSER\":\n                    case 0:\n                        message.parser = 0;\n                        break;\n                    case \"MUSIC21\":\n                    case 1:\n                        message.parser = 1;\n                        break;\n                    case \"PRETTY_MIDI\":\n                    case 2:\n                        message.parser = 2;\n                        break;\n                    case \"MAGENTA_MUSIC_XML\":\n                    case 3:\n                        message.parser = 3;\n                        break;\n                    case \"MAGENTA_MUSICNET\":\n                    case 4:\n                        message.parser = 4;\n                        break;\n                    case \"MAGENTA_ABC\":\n                    case 5:\n                        message.parser = 5;\n                        break;\n                    case \"TONEJS_MIDI_CONVERT\":\n                    case 6:\n                        message.parser = 6;\n                        break;\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SourceInfo message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.SourceInfo} message SourceInfo\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SourceInfo.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.sourceType = options.enums === String ? \"UNKNOWN_SOURCE_TYPE\" : 0;\n                        object.encodingType = options.enums === String ? \"UNKNOWN_ENCODING_TYPE\" : 0;\n                        object.parser = options.enums === String ? \"UNKNOWN_PARSER\" : 0;\n                    }\n                    if (message.sourceType != null && message.hasOwnProperty(\"sourceType\"))\n                        object.sourceType = options.enums === String ? $root.tensorflow.magenta.NoteSequence.SourceInfo.SourceType[message.sourceType] : message.sourceType;\n                    if (message.encodingType != null && message.hasOwnProperty(\"encodingType\"))\n                        object.encodingType = options.enums === String ? $root.tensorflow.magenta.NoteSequence.SourceInfo.EncodingType[message.encodingType] : message.encodingType;\n                    if (message.parser != null && message.hasOwnProperty(\"parser\"))\n                        object.parser = options.enums === String ? $root.tensorflow.magenta.NoteSequence.SourceInfo.Parser[message.parser] : message.parser;\n                    return object;\n                };\n\n                /**\n                 * Converts this SourceInfo to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.SourceInfo\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SourceInfo.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                /**\n                 * SourceType enum.\n                 * @name tensorflow.magenta.NoteSequence.SourceInfo.SourceType\n                 * @enum {string}\n                 * @property {number} UNKNOWN_SOURCE_TYPE=0 UNKNOWN_SOURCE_TYPE value\n                 * @property {number} SCORE_BASED=1 SCORE_BASED value\n                 * @property {number} PERFORMANCE_BASED=2 PERFORMANCE_BASED value\n                 */\n                SourceInfo.SourceType = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"UNKNOWN_SOURCE_TYPE\"] = 0;\n                    values[valuesById[1] = \"SCORE_BASED\"] = 1;\n                    values[valuesById[2] = \"PERFORMANCE_BASED\"] = 2;\n                    return values;\n                })();\n\n                /**\n                 * EncodingType enum.\n                 * @name tensorflow.magenta.NoteSequence.SourceInfo.EncodingType\n                 * @enum {string}\n                 * @property {number} UNKNOWN_ENCODING_TYPE=0 UNKNOWN_ENCODING_TYPE value\n                 * @property {number} MUSIC_XML=1 MUSIC_XML value\n                 * @property {number} ABC=2 ABC value\n                 * @property {number} MIDI=3 MIDI value\n                 * @property {number} MUSICNET=4 MUSICNET value\n                 */\n                SourceInfo.EncodingType = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"UNKNOWN_ENCODING_TYPE\"] = 0;\n                    values[valuesById[1] = \"MUSIC_XML\"] = 1;\n                    values[valuesById[2] = \"ABC\"] = 2;\n                    values[valuesById[3] = \"MIDI\"] = 3;\n                    values[valuesById[4] = \"MUSICNET\"] = 4;\n                    return values;\n                })();\n\n                /**\n                 * Parser enum.\n                 * @name tensorflow.magenta.NoteSequence.SourceInfo.Parser\n                 * @enum {string}\n                 * @property {number} UNKNOWN_PARSER=0 UNKNOWN_PARSER value\n                 * @property {number} MUSIC21=1 MUSIC21 value\n                 * @property {number} PRETTY_MIDI=2 PRETTY_MIDI value\n                 * @property {number} MAGENTA_MUSIC_XML=3 MAGENTA_MUSIC_XML value\n                 * @property {number} MAGENTA_MUSICNET=4 MAGENTA_MUSICNET value\n                 * @property {number} MAGENTA_ABC=5 MAGENTA_ABC value\n                 * @property {number} TONEJS_MIDI_CONVERT=6 TONEJS_MIDI_CONVERT value\n                 */\n                SourceInfo.Parser = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"UNKNOWN_PARSER\"] = 0;\n                    values[valuesById[1] = \"MUSIC21\"] = 1;\n                    values[valuesById[2] = \"PRETTY_MIDI\"] = 2;\n                    values[valuesById[3] = \"MAGENTA_MUSIC_XML\"] = 3;\n                    values[valuesById[4] = \"MAGENTA_MUSICNET\"] = 4;\n                    values[valuesById[5] = \"MAGENTA_ABC\"] = 5;\n                    values[valuesById[6] = \"TONEJS_MIDI_CONVERT\"] = 6;\n                    return values;\n                })();\n\n                return SourceInfo;\n            })();\n\n            NoteSequence.TextAnnotation = (function() {\n\n                /**\n                 * Properties of a TextAnnotation.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ITextAnnotation\n                 * @property {number|null} [time] TextAnnotation time\n                 * @property {number|null} [quantizedStep] TextAnnotation quantizedStep\n                 * @property {string|null} [text] TextAnnotation text\n                 * @property {tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType|null} [annotationType] TextAnnotation annotationType\n                 */\n\n                /**\n                 * Constructs a new TextAnnotation.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a TextAnnotation.\n                 * @implements ITextAnnotation\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ITextAnnotation=} [properties] Properties to set\n                 */\n                function TextAnnotation(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TextAnnotation time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @instance\n                 */\n                TextAnnotation.prototype.time = 0;\n\n                /**\n                 * TextAnnotation quantizedStep.\n                 * @member {number} quantizedStep\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @instance\n                 */\n                TextAnnotation.prototype.quantizedStep = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * TextAnnotation text.\n                 * @member {string} text\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @instance\n                 */\n                TextAnnotation.prototype.text = \"\";\n\n                /**\n                 * TextAnnotation annotationType.\n                 * @member {tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType} annotationType\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @instance\n                 */\n                TextAnnotation.prototype.annotationType = 0;\n\n                /**\n                 * Creates a new TextAnnotation instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITextAnnotation=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.TextAnnotation} TextAnnotation instance\n                 */\n                TextAnnotation.create = function create(properties) {\n                    return new TextAnnotation(properties);\n                };\n\n                /**\n                 * Encodes the specified TextAnnotation message. Does not implicitly {@link tensorflow.magenta.NoteSequence.TextAnnotation.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITextAnnotation} message TextAnnotation message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TextAnnotation.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.text != null && message.hasOwnProperty(\"text\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);\n                    if (message.annotationType != null && message.hasOwnProperty(\"annotationType\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.annotationType);\n                    if (message.quantizedStep != null && message.hasOwnProperty(\"quantizedStep\"))\n                        writer.uint32(/* id 4, wireType 0 =*/32).int64(message.quantizedStep);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TextAnnotation message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.TextAnnotation.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ITextAnnotation} message TextAnnotation message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TextAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TextAnnotation message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.TextAnnotation} TextAnnotation\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TextAnnotation.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.TextAnnotation();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 4:\n                            message.quantizedStep = $util.Long?reader.int64().toNumber():reader.int64();\n                            break;\n                        case 2:\n                            message.text = reader.string();\n                            break;\n                        case 3:\n                            message.annotationType = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TextAnnotation message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.TextAnnotation} TextAnnotation\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TextAnnotation.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TextAnnotation message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TextAnnotation.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.quantizedStep != null && message.hasOwnProperty(\"quantizedStep\"))\n                        if (!$util.isInteger(message.quantizedStep) && !(message.quantizedStep && $util.isInteger(message.quantizedStep.low) && $util.isInteger(message.quantizedStep.high)))\n                            return \"quantizedStep: integer|Long expected\";\n                    if (message.text != null && message.hasOwnProperty(\"text\"))\n                        if (!$util.isString(message.text))\n                            return \"text: string expected\";\n                    if (message.annotationType != null && message.hasOwnProperty(\"annotationType\"))\n                        switch (message.annotationType) {\n                        default:\n                            return \"annotationType: enum value expected\";\n                        case 0:\n                        case 1:\n                        case 2:\n                            break;\n                        }\n                    return null;\n                };\n\n                /**\n                 * Creates a TextAnnotation message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.TextAnnotation} TextAnnotation\n                 */\n                TextAnnotation.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.TextAnnotation)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.TextAnnotation();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    if (object.quantizedStep != null)\n                        if ($util.Long)\n                            (message.quantizedStep = $util.Long.fromValue(object.quantizedStep)).unsigned = false;\n                        else if (typeof object.quantizedStep === \"string\")\n                            message.quantizedStep = parseInt(object.quantizedStep, 10);\n                        else if (typeof object.quantizedStep === \"number\")\n                            message.quantizedStep = object.quantizedStep;\n                        else if (typeof object.quantizedStep === \"object\")\n                            message.quantizedStep = new $util.LongBits(object.quantizedStep.low >>> 0, object.quantizedStep.high >>> 0).toNumber();\n                    if (object.text != null)\n                        message.text = String(object.text);\n                    switch (object.annotationType) {\n                    case \"UNKNOWN\":\n                    case 0:\n                        message.annotationType = 0;\n                        break;\n                    case \"CHORD_SYMBOL\":\n                    case 1:\n                        message.annotationType = 1;\n                        break;\n                    case \"BEAT\":\n                    case 2:\n                        message.annotationType = 2;\n                        break;\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TextAnnotation message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.TextAnnotation} message TextAnnotation\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TextAnnotation.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        object.text = \"\";\n                        object.annotationType = options.enums === String ? \"UNKNOWN\" : 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.quantizedStep = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.quantizedStep = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.text != null && message.hasOwnProperty(\"text\"))\n                        object.text = message.text;\n                    if (message.annotationType != null && message.hasOwnProperty(\"annotationType\"))\n                        object.annotationType = options.enums === String ? $root.tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType[message.annotationType] : message.annotationType;\n                    if (message.quantizedStep != null && message.hasOwnProperty(\"quantizedStep\"))\n                        if (typeof message.quantizedStep === \"number\")\n                            object.quantizedStep = options.longs === String ? String(message.quantizedStep) : message.quantizedStep;\n                        else\n                            object.quantizedStep = options.longs === String ? $util.Long.prototype.toString.call(message.quantizedStep) : options.longs === Number ? new $util.LongBits(message.quantizedStep.low >>> 0, message.quantizedStep.high >>> 0).toNumber() : message.quantizedStep;\n                    return object;\n                };\n\n                /**\n                 * Converts this TextAnnotation to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.TextAnnotation\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TextAnnotation.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                /**\n                 * TextAnnotationType enum.\n                 * @name tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType\n                 * @enum {string}\n                 * @property {number} UNKNOWN=0 UNKNOWN value\n                 * @property {number} CHORD_SYMBOL=1 CHORD_SYMBOL value\n                 * @property {number} BEAT=2 BEAT value\n                 */\n                TextAnnotation.TextAnnotationType = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"UNKNOWN\"] = 0;\n                    values[valuesById[1] = \"CHORD_SYMBOL\"] = 1;\n                    values[valuesById[2] = \"BEAT\"] = 2;\n                    return values;\n                })();\n\n                return TextAnnotation;\n            })();\n\n            NoteSequence.QuantizationInfo = (function() {\n\n                /**\n                 * Properties of a QuantizationInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface IQuantizationInfo\n                 * @property {number|null} [stepsPerQuarter] QuantizationInfo stepsPerQuarter\n                 * @property {number|null} [stepsPerSecond] QuantizationInfo stepsPerSecond\n                 */\n\n                /**\n                 * Constructs a new QuantizationInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a QuantizationInfo.\n                 * @implements IQuantizationInfo\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.IQuantizationInfo=} [properties] Properties to set\n                 */\n                function QuantizationInfo(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * QuantizationInfo stepsPerQuarter.\n                 * @member {number} stepsPerQuarter\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @instance\n                 */\n                QuantizationInfo.prototype.stepsPerQuarter = 0;\n\n                /**\n                 * QuantizationInfo stepsPerSecond.\n                 * @member {number} stepsPerSecond\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @instance\n                 */\n                QuantizationInfo.prototype.stepsPerSecond = 0;\n\n                // OneOf field names bound to virtual getters and setters\n                var $oneOfFields;\n\n                /**\n                 * QuantizationInfo resolution.\n                 * @member {\"stepsPerQuarter\"|\"stepsPerSecond\"|undefined} resolution\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @instance\n                 */\n                Object.defineProperty(QuantizationInfo.prototype, \"resolution\", {\n                    get: $util.oneOfGetter($oneOfFields = [\"stepsPerQuarter\", \"stepsPerSecond\"]),\n                    set: $util.oneOfSetter($oneOfFields)\n                });\n\n                /**\n                 * Creates a new QuantizationInfo instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IQuantizationInfo=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.QuantizationInfo} QuantizationInfo instance\n                 */\n                QuantizationInfo.create = function create(properties) {\n                    return new QuantizationInfo(properties);\n                };\n\n                /**\n                 * Encodes the specified QuantizationInfo message. Does not implicitly {@link tensorflow.magenta.NoteSequence.QuantizationInfo.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IQuantizationInfo} message QuantizationInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                QuantizationInfo.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.stepsPerQuarter != null && message.hasOwnProperty(\"stepsPerQuarter\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.stepsPerQuarter);\n                    if (message.stepsPerSecond != null && message.hasOwnProperty(\"stepsPerSecond\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.stepsPerSecond);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified QuantizationInfo message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.QuantizationInfo.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.IQuantizationInfo} message QuantizationInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                QuantizationInfo.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a QuantizationInfo message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.QuantizationInfo} QuantizationInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                QuantizationInfo.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.QuantizationInfo();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.stepsPerQuarter = reader.int32();\n                            break;\n                        case 2:\n                            message.stepsPerSecond = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a QuantizationInfo message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.QuantizationInfo} QuantizationInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                QuantizationInfo.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a QuantizationInfo message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                QuantizationInfo.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    var properties = {};\n                    if (message.stepsPerQuarter != null && message.hasOwnProperty(\"stepsPerQuarter\")) {\n                        properties.resolution = 1;\n                        if (!$util.isInteger(message.stepsPerQuarter))\n                            return \"stepsPerQuarter: integer expected\";\n                    }\n                    if (message.stepsPerSecond != null && message.hasOwnProperty(\"stepsPerSecond\")) {\n                        if (properties.resolution === 1)\n                            return \"resolution: multiple values\";\n                        properties.resolution = 1;\n                        if (!$util.isInteger(message.stepsPerSecond))\n                            return \"stepsPerSecond: integer expected\";\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a QuantizationInfo message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.QuantizationInfo} QuantizationInfo\n                 */\n                QuantizationInfo.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.QuantizationInfo)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.QuantizationInfo();\n                    if (object.stepsPerQuarter != null)\n                        message.stepsPerQuarter = object.stepsPerQuarter | 0;\n                    if (object.stepsPerSecond != null)\n                        message.stepsPerSecond = object.stepsPerSecond | 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a QuantizationInfo message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.QuantizationInfo} message QuantizationInfo\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                QuantizationInfo.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (message.stepsPerQuarter != null && message.hasOwnProperty(\"stepsPerQuarter\")) {\n                        object.stepsPerQuarter = message.stepsPerQuarter;\n                        if (options.oneofs)\n                            object.resolution = \"stepsPerQuarter\";\n                    }\n                    if (message.stepsPerSecond != null && message.hasOwnProperty(\"stepsPerSecond\")) {\n                        object.stepsPerSecond = message.stepsPerSecond;\n                        if (options.oneofs)\n                            object.resolution = \"stepsPerSecond\";\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this QuantizationInfo to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.QuantizationInfo\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                QuantizationInfo.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return QuantizationInfo;\n            })();\n\n            NoteSequence.SubsequenceInfo = (function() {\n\n                /**\n                 * Properties of a SubsequenceInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ISubsequenceInfo\n                 * @property {number|null} [startTimeOffset] SubsequenceInfo startTimeOffset\n                 * @property {number|null} [endTimeOffset] SubsequenceInfo endTimeOffset\n                 */\n\n                /**\n                 * Constructs a new SubsequenceInfo.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a SubsequenceInfo.\n                 * @implements ISubsequenceInfo\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ISubsequenceInfo=} [properties] Properties to set\n                 */\n                function SubsequenceInfo(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SubsequenceInfo startTimeOffset.\n                 * @member {number} startTimeOffset\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @instance\n                 */\n                SubsequenceInfo.prototype.startTimeOffset = 0;\n\n                /**\n                 * SubsequenceInfo endTimeOffset.\n                 * @member {number} endTimeOffset\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @instance\n                 */\n                SubsequenceInfo.prototype.endTimeOffset = 0;\n\n                /**\n                 * Creates a new SubsequenceInfo instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISubsequenceInfo=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.SubsequenceInfo} SubsequenceInfo instance\n                 */\n                SubsequenceInfo.create = function create(properties) {\n                    return new SubsequenceInfo(properties);\n                };\n\n                /**\n                 * Encodes the specified SubsequenceInfo message. Does not implicitly {@link tensorflow.magenta.NoteSequence.SubsequenceInfo.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISubsequenceInfo} message SubsequenceInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SubsequenceInfo.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.startTimeOffset != null && message.hasOwnProperty(\"startTimeOffset\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.startTimeOffset);\n                    if (message.endTimeOffset != null && message.hasOwnProperty(\"endTimeOffset\"))\n                        writer.uint32(/* id 2, wireType 1 =*/17).double(message.endTimeOffset);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SubsequenceInfo message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.SubsequenceInfo.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISubsequenceInfo} message SubsequenceInfo message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SubsequenceInfo.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SubsequenceInfo message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.SubsequenceInfo} SubsequenceInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SubsequenceInfo.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.SubsequenceInfo();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.startTimeOffset = reader.double();\n                            break;\n                        case 2:\n                            message.endTimeOffset = reader.double();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SubsequenceInfo message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.SubsequenceInfo} SubsequenceInfo\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SubsequenceInfo.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SubsequenceInfo message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SubsequenceInfo.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.startTimeOffset != null && message.hasOwnProperty(\"startTimeOffset\"))\n                        if (typeof message.startTimeOffset !== \"number\")\n                            return \"startTimeOffset: number expected\";\n                    if (message.endTimeOffset != null && message.hasOwnProperty(\"endTimeOffset\"))\n                        if (typeof message.endTimeOffset !== \"number\")\n                            return \"endTimeOffset: number expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a SubsequenceInfo message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.SubsequenceInfo} SubsequenceInfo\n                 */\n                SubsequenceInfo.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.SubsequenceInfo)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.SubsequenceInfo();\n                    if (object.startTimeOffset != null)\n                        message.startTimeOffset = Number(object.startTimeOffset);\n                    if (object.endTimeOffset != null)\n                        message.endTimeOffset = Number(object.endTimeOffset);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SubsequenceInfo message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.SubsequenceInfo} message SubsequenceInfo\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SubsequenceInfo.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.startTimeOffset = 0;\n                        object.endTimeOffset = 0;\n                    }\n                    if (message.startTimeOffset != null && message.hasOwnProperty(\"startTimeOffset\"))\n                        object.startTimeOffset = options.json && !isFinite(message.startTimeOffset) ? String(message.startTimeOffset) : message.startTimeOffset;\n                    if (message.endTimeOffset != null && message.hasOwnProperty(\"endTimeOffset\"))\n                        object.endTimeOffset = options.json && !isFinite(message.endTimeOffset) ? String(message.endTimeOffset) : message.endTimeOffset;\n                    return object;\n                };\n\n                /**\n                 * Converts this SubsequenceInfo to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.SubsequenceInfo\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SubsequenceInfo.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return SubsequenceInfo;\n            })();\n\n            NoteSequence.SectionAnnotation = (function() {\n\n                /**\n                 * Properties of a SectionAnnotation.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ISectionAnnotation\n                 * @property {number|null} [time] SectionAnnotation time\n                 * @property {number|null} [sectionId] SectionAnnotation sectionId\n                 */\n\n                /**\n                 * Constructs a new SectionAnnotation.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a SectionAnnotation.\n                 * @implements ISectionAnnotation\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ISectionAnnotation=} [properties] Properties to set\n                 */\n                function SectionAnnotation(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SectionAnnotation time.\n                 * @member {number} time\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @instance\n                 */\n                SectionAnnotation.prototype.time = 0;\n\n                /**\n                 * SectionAnnotation sectionId.\n                 * @member {number} sectionId\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @instance\n                 */\n                SectionAnnotation.prototype.sectionId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Creates a new SectionAnnotation instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISectionAnnotation=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.SectionAnnotation} SectionAnnotation instance\n                 */\n                SectionAnnotation.create = function create(properties) {\n                    return new SectionAnnotation(properties);\n                };\n\n                /**\n                 * Encodes the specified SectionAnnotation message. Does not implicitly {@link tensorflow.magenta.NoteSequence.SectionAnnotation.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISectionAnnotation} message SectionAnnotation message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SectionAnnotation.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.time);\n                    if (message.sectionId != null && message.hasOwnProperty(\"sectionId\"))\n                        writer.uint32(/* id 4, wireType 0 =*/32).int64(message.sectionId);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SectionAnnotation message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.SectionAnnotation.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISectionAnnotation} message SectionAnnotation message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SectionAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SectionAnnotation message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.SectionAnnotation} SectionAnnotation\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SectionAnnotation.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.SectionAnnotation();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.time = reader.double();\n                            break;\n                        case 4:\n                            message.sectionId = $util.Long?reader.int64().toNumber():reader.int64();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SectionAnnotation message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.SectionAnnotation} SectionAnnotation\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SectionAnnotation.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SectionAnnotation message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SectionAnnotation.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        if (typeof message.time !== \"number\")\n                            return \"time: number expected\";\n                    if (message.sectionId != null && message.hasOwnProperty(\"sectionId\"))\n                        if (!$util.isInteger(message.sectionId) && !(message.sectionId && $util.isInteger(message.sectionId.low) && $util.isInteger(message.sectionId.high)))\n                            return \"sectionId: integer|Long expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a SectionAnnotation message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.SectionAnnotation} SectionAnnotation\n                 */\n                SectionAnnotation.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.SectionAnnotation)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.SectionAnnotation();\n                    if (object.time != null)\n                        message.time = Number(object.time);\n                    if (object.sectionId != null)\n                        if ($util.Long)\n                            (message.sectionId = $util.Long.fromValue(object.sectionId)).unsigned = false;\n                        else if (typeof object.sectionId === \"string\")\n                            message.sectionId = parseInt(object.sectionId, 10);\n                        else if (typeof object.sectionId === \"number\")\n                            message.sectionId = object.sectionId;\n                        else if (typeof object.sectionId === \"object\")\n                            message.sectionId = new $util.LongBits(object.sectionId.low >>> 0, object.sectionId.high >>> 0).toNumber();\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SectionAnnotation message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.SectionAnnotation} message SectionAnnotation\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SectionAnnotation.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.time = 0;\n                        if ($util.Long) {\n                            var long = new $util.Long(0, 0, false);\n                            object.sectionId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                        } else\n                            object.sectionId = options.longs === String ? \"0\" : 0;\n                    }\n                    if (message.time != null && message.hasOwnProperty(\"time\"))\n                        object.time = options.json && !isFinite(message.time) ? String(message.time) : message.time;\n                    if (message.sectionId != null && message.hasOwnProperty(\"sectionId\"))\n                        if (typeof message.sectionId === \"number\")\n                            object.sectionId = options.longs === String ? String(message.sectionId) : message.sectionId;\n                        else\n                            object.sectionId = options.longs === String ? $util.Long.prototype.toString.call(message.sectionId) : options.longs === Number ? new $util.LongBits(message.sectionId.low >>> 0, message.sectionId.high >>> 0).toNumber() : message.sectionId;\n                    return object;\n                };\n\n                /**\n                 * Converts this SectionAnnotation to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.SectionAnnotation\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SectionAnnotation.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return SectionAnnotation;\n            })();\n\n            NoteSequence.Section = (function() {\n\n                /**\n                 * Properties of a Section.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ISection\n                 * @property {number|null} [sectionId] Section sectionId\n                 * @property {tensorflow.magenta.NoteSequence.ISectionGroup|null} [sectionGroup] Section sectionGroup\n                 */\n\n                /**\n                 * Constructs a new Section.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a Section.\n                 * @implements ISection\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ISection=} [properties] Properties to set\n                 */\n                function Section(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Section sectionId.\n                 * @member {number} sectionId\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @instance\n                 */\n                Section.prototype.sectionId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                /**\n                 * Section sectionGroup.\n                 * @member {tensorflow.magenta.NoteSequence.ISectionGroup|null|undefined} sectionGroup\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @instance\n                 */\n                Section.prototype.sectionGroup = null;\n\n                // OneOf field names bound to virtual getters and setters\n                var $oneOfFields;\n\n                /**\n                 * Section sectionType.\n                 * @member {\"sectionId\"|\"sectionGroup\"|undefined} sectionType\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @instance\n                 */\n                Object.defineProperty(Section.prototype, \"sectionType\", {\n                    get: $util.oneOfGetter($oneOfFields = [\"sectionId\", \"sectionGroup\"]),\n                    set: $util.oneOfSetter($oneOfFields)\n                });\n\n                /**\n                 * Creates a new Section instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISection=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.Section} Section instance\n                 */\n                Section.create = function create(properties) {\n                    return new Section(properties);\n                };\n\n                /**\n                 * Encodes the specified Section message. Does not implicitly {@link tensorflow.magenta.NoteSequence.Section.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISection} message Section message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Section.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.sectionId != null && message.hasOwnProperty(\"sectionId\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.sectionId);\n                    if (message.sectionGroup != null && message.hasOwnProperty(\"sectionGroup\"))\n                        $root.tensorflow.magenta.NoteSequence.SectionGroup.encode(message.sectionGroup, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Section message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.Section.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISection} message Section message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Section.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Section message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.Section} Section\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Section.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.Section();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.sectionId = $util.Long?reader.int64().toNumber():reader.int64();\n                            break;\n                        case 2:\n                            message.sectionGroup = $root.tensorflow.magenta.NoteSequence.SectionGroup.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Section message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.Section} Section\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Section.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Section message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Section.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    var properties = {};\n                    if (message.sectionId != null && message.hasOwnProperty(\"sectionId\")) {\n                        properties.sectionType = 1;\n                        if (!$util.isInteger(message.sectionId) && !(message.sectionId && $util.isInteger(message.sectionId.low) && $util.isInteger(message.sectionId.high)))\n                            return \"sectionId: integer|Long expected\";\n                    }\n                    if (message.sectionGroup != null && message.hasOwnProperty(\"sectionGroup\")) {\n                        if (properties.sectionType === 1)\n                            return \"sectionType: multiple values\";\n                        properties.sectionType = 1;\n                        {\n                            var error = $root.tensorflow.magenta.NoteSequence.SectionGroup.verify(message.sectionGroup);\n                            if (error)\n                                return \"sectionGroup.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a Section message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.Section} Section\n                 */\n                Section.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.Section)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.Section();\n                    if (object.sectionId != null)\n                        if ($util.Long)\n                            (message.sectionId = $util.Long.fromValue(object.sectionId)).unsigned = false;\n                        else if (typeof object.sectionId === \"string\")\n                            message.sectionId = parseInt(object.sectionId, 10);\n                        else if (typeof object.sectionId === \"number\")\n                            message.sectionId = object.sectionId;\n                        else if (typeof object.sectionId === \"object\")\n                            message.sectionId = new $util.LongBits(object.sectionId.low >>> 0, object.sectionId.high >>> 0).toNumber();\n                    if (object.sectionGroup != null) {\n                        if (typeof object.sectionGroup !== \"object\")\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.Section.sectionGroup: object expected\");\n                        message.sectionGroup = $root.tensorflow.magenta.NoteSequence.SectionGroup.fromObject(object.sectionGroup);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Section message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.Section} message Section\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Section.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (message.sectionId != null && message.hasOwnProperty(\"sectionId\")) {\n                        if (typeof message.sectionId === \"number\")\n                            object.sectionId = options.longs === String ? String(message.sectionId) : message.sectionId;\n                        else\n                            object.sectionId = options.longs === String ? $util.Long.prototype.toString.call(message.sectionId) : options.longs === Number ? new $util.LongBits(message.sectionId.low >>> 0, message.sectionId.high >>> 0).toNumber() : message.sectionId;\n                        if (options.oneofs)\n                            object.sectionType = \"sectionId\";\n                    }\n                    if (message.sectionGroup != null && message.hasOwnProperty(\"sectionGroup\")) {\n                        object.sectionGroup = $root.tensorflow.magenta.NoteSequence.SectionGroup.toObject(message.sectionGroup, options);\n                        if (options.oneofs)\n                            object.sectionType = \"sectionGroup\";\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this Section to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.Section\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Section.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Section;\n            })();\n\n            NoteSequence.SectionGroup = (function() {\n\n                /**\n                 * Properties of a SectionGroup.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @interface ISectionGroup\n                 * @property {Array.<tensorflow.magenta.NoteSequence.ISection>|null} [sections] SectionGroup sections\n                 * @property {number|null} [numTimes] SectionGroup numTimes\n                 */\n\n                /**\n                 * Constructs a new SectionGroup.\n                 * @memberof tensorflow.magenta.NoteSequence\n                 * @classdesc Represents a SectionGroup.\n                 * @implements ISectionGroup\n                 * @constructor\n                 * @param {tensorflow.magenta.NoteSequence.ISectionGroup=} [properties] Properties to set\n                 */\n                function SectionGroup(properties) {\n                    this.sections = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SectionGroup sections.\n                 * @member {Array.<tensorflow.magenta.NoteSequence.ISection>} sections\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @instance\n                 */\n                SectionGroup.prototype.sections = $util.emptyArray;\n\n                /**\n                 * SectionGroup numTimes.\n                 * @member {number} numTimes\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @instance\n                 */\n                SectionGroup.prototype.numTimes = 0;\n\n                /**\n                 * Creates a new SectionGroup instance using the specified properties.\n                 * @function create\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISectionGroup=} [properties] Properties to set\n                 * @returns {tensorflow.magenta.NoteSequence.SectionGroup} SectionGroup instance\n                 */\n                SectionGroup.create = function create(properties) {\n                    return new SectionGroup(properties);\n                };\n\n                /**\n                 * Encodes the specified SectionGroup message. Does not implicitly {@link tensorflow.magenta.NoteSequence.SectionGroup.verify|verify} messages.\n                 * @function encode\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISectionGroup} message SectionGroup message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SectionGroup.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.sections != null && message.sections.length)\n                        for (var i = 0; i < message.sections.length; ++i)\n                            $root.tensorflow.magenta.NoteSequence.Section.encode(message.sections[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.numTimes != null && message.hasOwnProperty(\"numTimes\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.numTimes);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SectionGroup message, length delimited. Does not implicitly {@link tensorflow.magenta.NoteSequence.SectionGroup.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.ISectionGroup} message SectionGroup message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SectionGroup.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SectionGroup message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {tensorflow.magenta.NoteSequence.SectionGroup} SectionGroup\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SectionGroup.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.NoteSequence.SectionGroup();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.sections && message.sections.length))\n                                message.sections = [];\n                            message.sections.push($root.tensorflow.magenta.NoteSequence.Section.decode(reader, reader.uint32()));\n                            break;\n                        case 2:\n                            message.numTimes = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SectionGroup message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {tensorflow.magenta.NoteSequence.SectionGroup} SectionGroup\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SectionGroup.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SectionGroup message.\n                 * @function verify\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SectionGroup.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.sections != null && message.hasOwnProperty(\"sections\")) {\n                        if (!Array.isArray(message.sections))\n                            return \"sections: array expected\";\n                        for (var i = 0; i < message.sections.length; ++i) {\n                            var error = $root.tensorflow.magenta.NoteSequence.Section.verify(message.sections[i]);\n                            if (error)\n                                return \"sections.\" + error;\n                        }\n                    }\n                    if (message.numTimes != null && message.hasOwnProperty(\"numTimes\"))\n                        if (!$util.isInteger(message.numTimes))\n                            return \"numTimes: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a SectionGroup message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {tensorflow.magenta.NoteSequence.SectionGroup} SectionGroup\n                 */\n                SectionGroup.fromObject = function fromObject(object) {\n                    if (object instanceof $root.tensorflow.magenta.NoteSequence.SectionGroup)\n                        return object;\n                    var message = new $root.tensorflow.magenta.NoteSequence.SectionGroup();\n                    if (object.sections) {\n                        if (!Array.isArray(object.sections))\n                            throw TypeError(\".tensorflow.magenta.NoteSequence.SectionGroup.sections: array expected\");\n                        message.sections = [];\n                        for (var i = 0; i < object.sections.length; ++i) {\n                            if (typeof object.sections[i] !== \"object\")\n                                throw TypeError(\".tensorflow.magenta.NoteSequence.SectionGroup.sections: object expected\");\n                            message.sections[i] = $root.tensorflow.magenta.NoteSequence.Section.fromObject(object.sections[i]);\n                        }\n                    }\n                    if (object.numTimes != null)\n                        message.numTimes = object.numTimes | 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SectionGroup message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @static\n                 * @param {tensorflow.magenta.NoteSequence.SectionGroup} message SectionGroup\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SectionGroup.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.sections = [];\n                    if (options.defaults)\n                        object.numTimes = 0;\n                    if (message.sections && message.sections.length) {\n                        object.sections = [];\n                        for (var j = 0; j < message.sections.length; ++j)\n                            object.sections[j] = $root.tensorflow.magenta.NoteSequence.Section.toObject(message.sections[j], options);\n                    }\n                    if (message.numTimes != null && message.hasOwnProperty(\"numTimes\"))\n                        object.numTimes = message.numTimes;\n                    return object;\n                };\n\n                /**\n                 * Converts this SectionGroup to JSON.\n                 * @function toJSON\n                 * @memberof tensorflow.magenta.NoteSequence.SectionGroup\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SectionGroup.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return SectionGroup;\n            })();\n\n            return NoteSequence;\n        })();\n\n        magenta.SequenceMetadata = (function() {\n\n            /**\n             * Properties of a SequenceMetadata.\n             * @memberof tensorflow.magenta\n             * @interface ISequenceMetadata\n             * @property {string|null} [title] SequenceMetadata title\n             * @property {string|null} [artist] SequenceMetadata artist\n             * @property {Array.<string>|null} [genre] SequenceMetadata genre\n             * @property {Array.<string>|null} [composers] SequenceMetadata composers\n             */\n\n            /**\n             * Constructs a new SequenceMetadata.\n             * @memberof tensorflow.magenta\n             * @classdesc Represents a SequenceMetadata.\n             * @implements ISequenceMetadata\n             * @constructor\n             * @param {tensorflow.magenta.ISequenceMetadata=} [properties] Properties to set\n             */\n            function SequenceMetadata(properties) {\n                this.genre = [];\n                this.composers = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SequenceMetadata title.\n             * @member {string} title\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @instance\n             */\n            SequenceMetadata.prototype.title = \"\";\n\n            /**\n             * SequenceMetadata artist.\n             * @member {string} artist\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @instance\n             */\n            SequenceMetadata.prototype.artist = \"\";\n\n            /**\n             * SequenceMetadata genre.\n             * @member {Array.<string>} genre\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @instance\n             */\n            SequenceMetadata.prototype.genre = $util.emptyArray;\n\n            /**\n             * SequenceMetadata composers.\n             * @member {Array.<string>} composers\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @instance\n             */\n            SequenceMetadata.prototype.composers = $util.emptyArray;\n\n            /**\n             * Creates a new SequenceMetadata instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {tensorflow.magenta.ISequenceMetadata=} [properties] Properties to set\n             * @returns {tensorflow.magenta.SequenceMetadata} SequenceMetadata instance\n             */\n            SequenceMetadata.create = function create(properties) {\n                return new SequenceMetadata(properties);\n            };\n\n            /**\n             * Encodes the specified SequenceMetadata message. Does not implicitly {@link tensorflow.magenta.SequenceMetadata.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {tensorflow.magenta.ISequenceMetadata} message SequenceMetadata message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceMetadata.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.title != null && message.hasOwnProperty(\"title\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);\n                if (message.artist != null && message.hasOwnProperty(\"artist\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.artist);\n                if (message.genre != null && message.genre.length)\n                    for (var i = 0; i < message.genre.length; ++i)\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.genre[i]);\n                if (message.composers != null && message.composers.length)\n                    for (var i = 0; i < message.composers.length; ++i)\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.composers[i]);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SequenceMetadata message, length delimited. Does not implicitly {@link tensorflow.magenta.SequenceMetadata.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {tensorflow.magenta.ISequenceMetadata} message SequenceMetadata message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceMetadata.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SequenceMetadata message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.magenta.SequenceMetadata} SequenceMetadata\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceMetadata.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.SequenceMetadata();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.title = reader.string();\n                        break;\n                    case 2:\n                        message.artist = reader.string();\n                        break;\n                    case 3:\n                        if (!(message.genre && message.genre.length))\n                            message.genre = [];\n                        message.genre.push(reader.string());\n                        break;\n                    case 4:\n                        if (!(message.composers && message.composers.length))\n                            message.composers = [];\n                        message.composers.push(reader.string());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SequenceMetadata message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.magenta.SequenceMetadata} SequenceMetadata\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceMetadata.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SequenceMetadata message.\n             * @function verify\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SequenceMetadata.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.title != null && message.hasOwnProperty(\"title\"))\n                    if (!$util.isString(message.title))\n                        return \"title: string expected\";\n                if (message.artist != null && message.hasOwnProperty(\"artist\"))\n                    if (!$util.isString(message.artist))\n                        return \"artist: string expected\";\n                if (message.genre != null && message.hasOwnProperty(\"genre\")) {\n                    if (!Array.isArray(message.genre))\n                        return \"genre: array expected\";\n                    for (var i = 0; i < message.genre.length; ++i)\n                        if (!$util.isString(message.genre[i]))\n                            return \"genre: string[] expected\";\n                }\n                if (message.composers != null && message.hasOwnProperty(\"composers\")) {\n                    if (!Array.isArray(message.composers))\n                        return \"composers: array expected\";\n                    for (var i = 0; i < message.composers.length; ++i)\n                        if (!$util.isString(message.composers[i]))\n                            return \"composers: string[] expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a SequenceMetadata message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.magenta.SequenceMetadata} SequenceMetadata\n             */\n            SequenceMetadata.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.magenta.SequenceMetadata)\n                    return object;\n                var message = new $root.tensorflow.magenta.SequenceMetadata();\n                if (object.title != null)\n                    message.title = String(object.title);\n                if (object.artist != null)\n                    message.artist = String(object.artist);\n                if (object.genre) {\n                    if (!Array.isArray(object.genre))\n                        throw TypeError(\".tensorflow.magenta.SequenceMetadata.genre: array expected\");\n                    message.genre = [];\n                    for (var i = 0; i < object.genre.length; ++i)\n                        message.genre[i] = String(object.genre[i]);\n                }\n                if (object.composers) {\n                    if (!Array.isArray(object.composers))\n                        throw TypeError(\".tensorflow.magenta.SequenceMetadata.composers: array expected\");\n                    message.composers = [];\n                    for (var i = 0; i < object.composers.length; ++i)\n                        message.composers[i] = String(object.composers[i]);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a SequenceMetadata message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @static\n             * @param {tensorflow.magenta.SequenceMetadata} message SequenceMetadata\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SequenceMetadata.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults) {\n                    object.genre = [];\n                    object.composers = [];\n                }\n                if (options.defaults) {\n                    object.title = \"\";\n                    object.artist = \"\";\n                }\n                if (message.title != null && message.hasOwnProperty(\"title\"))\n                    object.title = message.title;\n                if (message.artist != null && message.hasOwnProperty(\"artist\"))\n                    object.artist = message.artist;\n                if (message.genre && message.genre.length) {\n                    object.genre = [];\n                    for (var j = 0; j < message.genre.length; ++j)\n                        object.genre[j] = message.genre[j];\n                }\n                if (message.composers && message.composers.length) {\n                    object.composers = [];\n                    for (var j = 0; j < message.composers.length; ++j)\n                        object.composers[j] = message.composers[j];\n                }\n                return object;\n            };\n\n            /**\n             * Converts this SequenceMetadata to JSON.\n             * @function toJSON\n             * @memberof tensorflow.magenta.SequenceMetadata\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SequenceMetadata.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return SequenceMetadata;\n        })();\n\n        magenta.VelocityRange = (function() {\n\n            /**\n             * Properties of a VelocityRange.\n             * @memberof tensorflow.magenta\n             * @interface IVelocityRange\n             * @property {number|null} [min] VelocityRange min\n             * @property {number|null} [max] VelocityRange max\n             */\n\n            /**\n             * Constructs a new VelocityRange.\n             * @memberof tensorflow.magenta\n             * @classdesc Represents a VelocityRange.\n             * @implements IVelocityRange\n             * @constructor\n             * @param {tensorflow.magenta.IVelocityRange=} [properties] Properties to set\n             */\n            function VelocityRange(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * VelocityRange min.\n             * @member {number} min\n             * @memberof tensorflow.magenta.VelocityRange\n             * @instance\n             */\n            VelocityRange.prototype.min = 0;\n\n            /**\n             * VelocityRange max.\n             * @member {number} max\n             * @memberof tensorflow.magenta.VelocityRange\n             * @instance\n             */\n            VelocityRange.prototype.max = 0;\n\n            /**\n             * Creates a new VelocityRange instance using the specified properties.\n             * @function create\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {tensorflow.magenta.IVelocityRange=} [properties] Properties to set\n             * @returns {tensorflow.magenta.VelocityRange} VelocityRange instance\n             */\n            VelocityRange.create = function create(properties) {\n                return new VelocityRange(properties);\n            };\n\n            /**\n             * Encodes the specified VelocityRange message. Does not implicitly {@link tensorflow.magenta.VelocityRange.verify|verify} messages.\n             * @function encode\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {tensorflow.magenta.IVelocityRange} message VelocityRange message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            VelocityRange.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.min != null && message.hasOwnProperty(\"min\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.min);\n                if (message.max != null && message.hasOwnProperty(\"max\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.max);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified VelocityRange message, length delimited. Does not implicitly {@link tensorflow.magenta.VelocityRange.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {tensorflow.magenta.IVelocityRange} message VelocityRange message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            VelocityRange.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a VelocityRange message from the specified reader or buffer.\n             * @function decode\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {tensorflow.magenta.VelocityRange} VelocityRange\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            VelocityRange.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tensorflow.magenta.VelocityRange();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.min = reader.int32();\n                        break;\n                    case 2:\n                        message.max = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a VelocityRange message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {tensorflow.magenta.VelocityRange} VelocityRange\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            VelocityRange.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a VelocityRange message.\n             * @function verify\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            VelocityRange.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.min != null && message.hasOwnProperty(\"min\"))\n                    if (!$util.isInteger(message.min))\n                        return \"min: integer expected\";\n                if (message.max != null && message.hasOwnProperty(\"max\"))\n                    if (!$util.isInteger(message.max))\n                        return \"max: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a VelocityRange message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {tensorflow.magenta.VelocityRange} VelocityRange\n             */\n            VelocityRange.fromObject = function fromObject(object) {\n                if (object instanceof $root.tensorflow.magenta.VelocityRange)\n                    return object;\n                var message = new $root.tensorflow.magenta.VelocityRange();\n                if (object.min != null)\n                    message.min = object.min | 0;\n                if (object.max != null)\n                    message.max = object.max | 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a VelocityRange message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof tensorflow.magenta.VelocityRange\n             * @static\n             * @param {tensorflow.magenta.VelocityRange} message VelocityRange\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            VelocityRange.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.min = 0;\n                    object.max = 0;\n                }\n                if (message.min != null && message.hasOwnProperty(\"min\"))\n                    object.min = message.min;\n                if (message.max != null && message.hasOwnProperty(\"max\"))\n                    object.max = message.max;\n                return object;\n            };\n\n            /**\n             * Converts this VelocityRange to JSON.\n             * @function toJSON\n             * @memberof tensorflow.magenta.VelocityRange\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            VelocityRange.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return VelocityRange;\n        })();\n\n        return magenta;\n    })();\n\n    return tensorflow;\n})();\n\nmodule.exports = $root;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4649, "column": 0}, "map": {"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/protobuf/index.ts"],"names":[],"mappings":";;;AAiBA,OAAO,EAAC,UAAU,EAAC,MAAM,SAAS,CAAC;;AACnC,IAAO,YAAY,qKAAG,aAAU,CAAC,OAAO,CAAC,YAAY,CAAC","debugId":null}}]
}