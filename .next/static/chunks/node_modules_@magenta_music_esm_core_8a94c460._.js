(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/@magenta/music/esm/core/aux_inputs.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AuxiliaryInput": (()=>AuxiliaryInput),
    "BinaryCounter": (()=>BinaryCounter),
    "auxiliaryInputFromSpec": (()=>auxiliaryInputFromSpec)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs/dist/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js [app-client] (ecmascript)");
;
function auxiliaryInputFromSpec(spec) {
    switch(spec.type){
        case 'BinaryCounter':
            return new BinaryCounter(spec.args);
        default:
            throw new Error(`Unknown auxiliary input: ${spec}`);
    }
}
class AuxiliaryInput {
    constructor(depth){
        this.depth = depth;
    }
}
class BinaryCounter extends AuxiliaryInput {
    constructor(args){
        super(args.numBits);
    }
    getTensors(numSteps) {
        const buffer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buffer"])([
            numSteps,
            this.depth
        ]);
        for(let step = 0; step < numSteps; ++step){
            for(let i = 0; i < this.depth; ++i){
                buffer.set(Math.floor((step + 1) / Math.pow(2, i)) % 2 ? 1.0 : -1.0, step, i);
            }
        }
        return buffer.toTensor().as2D(numSteps, this.depth);
    }
} //# sourceMappingURL=aux_inputs.js.map
}}),
"[project]/node_modules/@magenta/music/esm/core/constants.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "DEFAULT_CHANNEL": (()=>DEFAULT_CHANNEL),
    "DEFAULT_DRUM_PITCH_CLASSES": (()=>DEFAULT_DRUM_PITCH_CLASSES),
    "DEFAULT_PROGRAM": (()=>DEFAULT_PROGRAM),
    "DEFAULT_QUARTERS_PER_MINUTE": (()=>DEFAULT_QUARTERS_PER_MINUTE),
    "DEFAULT_STEPS_PER_BAR": (()=>DEFAULT_STEPS_PER_BAR),
    "DEFAULT_STEPS_PER_QUARTER": (()=>DEFAULT_STEPS_PER_QUARTER),
    "DEFAULT_STEPS_PER_SECOND": (()=>DEFAULT_STEPS_PER_SECOND),
    "DEFAULT_TICKS_PER_QUARTER": (()=>DEFAULT_TICKS_PER_QUARTER),
    "DEFAULT_VELOCITY": (()=>DEFAULT_VELOCITY),
    "DRUM_CHANNEL": (()=>DRUM_CHANNEL),
    "HI_CLICK_CLASS": (()=>HI_CLICK_CLASS),
    "HI_CLICK_PITCH": (()=>HI_CLICK_PITCH),
    "LO_CLICK_CLASS": (()=>LO_CLICK_CLASS),
    "LO_CLICK_PITCH": (()=>LO_CLICK_PITCH),
    "MAX_DRUM_PITCH": (()=>MAX_DRUM_PITCH),
    "MAX_MIDI_PITCH": (()=>MAX_MIDI_PITCH),
    "MAX_MIDI_PROGRAM": (()=>MAX_MIDI_PROGRAM),
    "MAX_MIDI_VELOCITY": (()=>MAX_MIDI_VELOCITY),
    "MAX_PIANO_PITCH": (()=>MAX_PIANO_PITCH),
    "MIDI_PITCHES": (()=>MIDI_PITCHES),
    "MIDI_VELOCITIES": (()=>MIDI_VELOCITIES),
    "MIN_DRUM_PITCH": (()=>MIN_DRUM_PITCH),
    "MIN_MIDI_PITCH": (()=>MIN_MIDI_PITCH),
    "MIN_MIDI_PROGRAM": (()=>MIN_MIDI_PROGRAM),
    "MIN_MIDI_VELOCITY": (()=>MIN_MIDI_VELOCITY),
    "MIN_PIANO_PITCH": (()=>MIN_PIANO_PITCH),
    "NON_DRUM_CHANNELS": (()=>NON_DRUM_CHANNELS),
    "NO_CHORD": (()=>NO_CHORD),
    "NUM_PITCH_CLASSES": (()=>NUM_PITCH_CLASSES)
});
null;
const DEFAULT_QUARTERS_PER_MINUTE = 120.0;
const DEFAULT_STEPS_PER_BAR = 16;
const DEFAULT_STEPS_PER_QUARTER = 4;
const DEFAULT_STEPS_PER_SECOND = 100;
const DEFAULT_VELOCITY = 80;
const DEFAULT_PROGRAM = 0;
const DEFAULT_TICKS_PER_QUARTER = 220;
const DEFAULT_CHANNEL = 0;
const DRUM_CHANNEL = 9;
const NON_DRUM_CHANNELS = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    10,
    11,
    12,
    13,
    14,
    15
];
const DEFAULT_DRUM_PITCH_CLASSES = [
    [
        36,
        35
    ],
    [
        38,
        27,
        28,
        31,
        32,
        33,
        34,
        37,
        39,
        40,
        56,
        65,
        66,
        75,
        85
    ],
    [
        42,
        44,
        54,
        68,
        69,
        70,
        71,
        73,
        78,
        80
    ],
    [
        46,
        67,
        72,
        74,
        79,
        81
    ],
    [
        45,
        29,
        41,
        61,
        64,
        84
    ],
    [
        48,
        47,
        60,
        63,
        77,
        86,
        87
    ],
    [
        50,
        30,
        43,
        62,
        76,
        83
    ],
    [
        49,
        55,
        57,
        58
    ],
    [
        51,
        52,
        53,
        59,
        82
    ]
];
const MIN_MIDI_VELOCITY = 0;
const MAX_MIDI_VELOCITY = 127;
const MIDI_VELOCITIES = MAX_MIDI_VELOCITY - MIN_MIDI_VELOCITY + 1;
const NO_CHORD = 'N.C.';
const NUM_PITCH_CLASSES = 12;
const MIN_MIDI_PITCH = 0;
const MAX_MIDI_PITCH = 127;
const MIDI_PITCHES = MAX_MIDI_PITCH - MIN_MIDI_PITCH + 1;
const MIN_PIANO_PITCH = 21;
const MAX_PIANO_PITCH = 108;
const MIN_DRUM_PITCH = 35;
const MAX_DRUM_PITCH = 81;
const MIN_MIDI_PROGRAM = 0;
const MAX_MIDI_PROGRAM = 127;
const LO_CLICK_PITCH = 89;
const HI_CLICK_PITCH = 90;
const LO_CLICK_CLASS = 9;
const HI_CLICK_CLASS = 10; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@magenta/music/esm/core/chords.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ChordEncoder": (()=>ChordEncoder),
    "ChordEncodingException": (()=>ChordEncodingException),
    "ChordQuality": (()=>ChordQuality),
    "ChordSymbolException": (()=>ChordSymbolException),
    "ChordSymbols": (()=>ChordSymbols),
    "MajorMinorChordEncoder": (()=>MajorMinorChordEncoder),
    "PitchChordEncoder": (()=>PitchChordEncoder),
    "TriadChordEncoder": (()=>TriadChordEncoder),
    "chordEncoderFromType": (()=>chordEncoderFromType)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs/dist/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/globals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$one_hot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$tensor1d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$concat_1d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/concat_1d.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$stack$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/stack.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tonal$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/tonal/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tonal$2d$chord$2f$build$2f$es6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__Chord$3e$__ = __turbopack_context__.i("[project]/node_modules/tonal-chord/build/es6.js [app-client] (ecmascript) <export * as Chord>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tonal$2d$note$2f$build$2f$es6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__Note$3e$__ = __turbopack_context__.i("[project]/node_modules/tonal-note/build/es6.js [app-client] (ecmascript) <export * as Note>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/constants.js [app-client] (ecmascript)");
;
;
;
const CHORD_QUALITY_INTERVALS = [
    [
        '1P',
        '3M',
        '5P'
    ],
    [
        '1P',
        '3m',
        '5P'
    ],
    [
        '1P',
        '3M',
        '5A'
    ],
    [
        '1P',
        '3m',
        '5d'
    ]
];
var ChordQuality;
(function(ChordQuality) {
    ChordQuality[ChordQuality["Major"] = 0] = "Major";
    ChordQuality[ChordQuality["Minor"] = 1] = "Minor";
    ChordQuality[ChordQuality["Augmented"] = 2] = "Augmented";
    ChordQuality[ChordQuality["Diminished"] = 3] = "Diminished";
    ChordQuality[ChordQuality["Other"] = 4] = "Other";
})(ChordQuality || (ChordQuality = {}));
class ChordSymbolException extends Error {
    constructor(message){
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
class ChordEncodingException extends Error {
    constructor(message){
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
class ChordSymbols {
    static pitches(chord) {
        const root = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tonal$2d$chord$2f$build$2f$es6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__Chord$3e$__["Chord"].tokenize(chord)[0];
        if (!root || !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tonal$2d$chord$2f$build$2f$es6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__Chord$3e$__["Chord"].exists(chord)) {
            throw new ChordSymbolException(`Unrecognized chord symbol: ${chord}`);
        }
        const notes = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tonal$2d$chord$2f$build$2f$es6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__Chord$3e$__["Chord"].notes(chord);
        return notes.map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tonal$2d$note$2f$build$2f$es6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__Note$3e$__["Note"].chroma);
    }
    static root(chord) {
        const root = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tonal$2d$chord$2f$build$2f$es6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__Chord$3e$__["Chord"].tokenize(chord)[0];
        if (!root) {
            throw new ChordSymbolException(`Chord symbol has unknown root: ${chord}`);
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tonal$2d$note$2f$build$2f$es6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__Note$3e$__["Note"].chroma(root);
    }
    static quality(chord) {
        if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tonal$2d$chord$2f$build$2f$es6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__Chord$3e$__["Chord"].exists(chord)) {
            throw new ChordSymbolException(`Unrecognized chord symbol: ${chord}`);
        }
        const intervals = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tonal$2d$chord$2f$build$2f$es6$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__Chord$3e$__["Chord"].intervals(chord);
        const qualities = CHORD_QUALITY_INTERVALS.map((cqis)=>cqis.every((cqi)=>intervals.includes(cqi)));
        const i = qualities.indexOf(true);
        const j = qualities.lastIndexOf(true);
        if (i >= 0 && i === j) {
            return i;
        } else {
            return ChordQuality.Other;
        }
    }
}
class ChordEncoder {
    encodeProgression(chords, numSteps) {
        const encodedChords = chords.map((chord)=>this.encode(chord));
        const indices = Array.from(Array(numSteps).keys()).map((step)=>Math.floor(step * encodedChords.length / numSteps));
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$stack$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stack"])(indices.map((i)=>encodedChords[i]));
    }
}
function chordEncoderFromType(type) {
    switch(type){
        case 'MajorMinorChordEncoder':
            return new MajorMinorChordEncoder();
        case 'TriadChordEncoder':
            return new TriadChordEncoder();
        case 'PitchChordEncoder':
            return new PitchChordEncoder();
        default:
            throw new Error(`Unknown chord encoder type: ${type}`);
    }
}
class MajorMinorChordEncoder extends ChordEncoder {
    constructor(){
        super(...arguments);
        this.depth = 1 + 2 * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NUM_PITCH_CLASSES"];
    }
    index(chord) {
        if (chord === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NO_CHORD"]) {
            return 0;
        }
        const root = ChordSymbols.root(chord);
        const quality = ChordSymbols.quality(chord);
        const index = 1 + quality * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NUM_PITCH_CLASSES"] + root;
        if (index >= this.depth) {
            throw new ChordEncodingException(`Chord is neither major nor minor: ${chord}`);
        }
        return index;
    }
    encode(chord) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tidy"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$one_hot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["oneHot"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$tensor1d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tensor1d"])([
                this.index(chord)
            ], 'int32'), this.depth).as1D());
    }
}
class TriadChordEncoder extends ChordEncoder {
    constructor(){
        super(...arguments);
        this.depth = 1 + 4 * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NUM_PITCH_CLASSES"];
    }
    index(chord) {
        if (chord === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NO_CHORD"]) {
            return 0;
        }
        const root = ChordSymbols.root(chord);
        const quality = ChordSymbols.quality(chord);
        const index = 1 + quality * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NUM_PITCH_CLASSES"] + root;
        if (index >= this.depth) {
            throw new ChordEncodingException(`Chord is not a standard triad: ${chord}`);
        }
        return index;
    }
    encode(chord) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tidy"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$one_hot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["oneHot"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$tensor1d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tensor1d"])([
                this.index(chord)
            ], 'int32'), this.depth).as1D());
    }
}
class PitchChordEncoder extends ChordEncoder {
    constructor(){
        super(...arguments);
        this.depth = 1 + 3 * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NUM_PITCH_CLASSES"];
    }
    encode(chord) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tidy"])(()=>{
            if (chord === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NO_CHORD"]) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$one_hot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["oneHot"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$tensor1d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tensor1d"])([
                    0
                ], 'int32'), this.depth).as1D();
            }
            const root = ChordSymbols.root(chord);
            const rootEncoding = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$one_hot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["oneHot"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$tensor1d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tensor1d"])([
                root
            ], 'int32'), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NUM_PITCH_CLASSES"]).as1D();
            const pitchBuffer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buffer"])([
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NUM_PITCH_CLASSES"]
            ]);
            ChordSymbols.pitches(chord).forEach((pitch)=>pitchBuffer.set(1.0, pitch));
            const pitchEncoding = pitchBuffer.toTensor().as1D();
            const bassEncoding = rootEncoding;
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$concat_1d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat1d"])([
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$tensor1d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tensor1d"])([
                    0.0
                ]),
                rootEncoding,
                pitchEncoding,
                bassEncoding
            ]);
        });
    }
} //# sourceMappingURL=chords.js.map
}}),
"[project]/node_modules/@magenta/music/esm/core/compat/global_browser.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "fetch": (()=>fetch),
    "getOfflineAudioContext": (()=>getOfflineAudioContext),
    "isSafari": (()=>isSafari),
    "navigator": (()=>navigator),
    "performance": (()=>performance)
});
function getGlobalObject() {
    if (typeof globalThis !== 'undefined') {
        return globalThis;
    }
    if (typeof self !== 'undefined') {
        return self;
    }
    if (typeof window !== 'undefined') {
        return window;
    }
    if (typeof global !== 'undefined') {
        return global;
    }
    throw new Error('cannot find the global object');
}
const globalObject = getGlobalObject();
const fetch = globalObject.fetch.bind(globalObject);
const performance = globalObject.performance;
const navigator = globalObject.navigator;
const isSafari = !!globalObject.webkitOfflineAudioContext;
const isWorker = typeof globalObject.WorkerGlobalScope !== 'undefined';
function getOfflineAudioContext(sampleRate) {
    const WEBKIT_SAMPLE_RATE = 44100;
    sampleRate = isSafari ? WEBKIT_SAMPLE_RATE : sampleRate;
    if (isWorker) {
        throw new Error('Cannot use offline audio context in a web worker.');
    }
    const SafariOfflineCtx = globalObject.webkitOfflineAudioContext;
    return isSafari ? new SafariOfflineCtx(1, sampleRate, sampleRate) : new globalObject.OfflineAudioContext(1, sampleRate, sampleRate);
} //# sourceMappingURL=global_browser.js.map
}}),
"[project]/node_modules/@magenta/music/esm/core/compat/performance_node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "now": (()=>now),
    "timing": (()=>timing)
});
const NS_PER_SEC = 1e9;
const time = global.process.hrtime();
const now = ()=>{
    const diff = global.process.hrtime(time);
    return diff[0] + diff[1] / NS_PER_SEC;
};
const timing = {
    navigationStart: Date.now()
}; //# sourceMappingURL=performance_node.js.map
}}),
"[project]/node_modules/@magenta/music/esm/core/compat/navigator_node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "userAgent": (()=>userAgent)
});
const userAgent = ''; //# sourceMappingURL=navigator_node.js.map
}}),
"[project]/node_modules/@magenta/music/esm/core/compat/global.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "fetch": (()=>fetch),
    "navigator": (()=>navigator),
    "performance": (()=>performance)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global_browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/compat/global_browser.js [app-client] (ecmascript)"); //# sourceMappingURL=global.js.map
const isNode = typeof global !== 'undefined' && typeof global.process !== 'undefined';
const fetch = isNode ? __turbopack_context__.r("[project]/node_modules/node-fetch/browser.js [app-client] (ecmascript)") : window.fetch.bind(window);
const performance = isNode ? __turbopack_context__.r("[project]/node_modules/@magenta/music/esm/core/compat/performance_node.js [app-client] (ecmascript)") : window.performance;
const navigator = isNode ? __turbopack_context__.r("[project]/node_modules/@magenta/music/esm/core/compat/navigator_node.js [app-client] (ecmascript)") : window.navigator;
;
}}),
"[project]/node_modules/@magenta/music/esm/core/compat/global.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global_browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/compat/global_browser.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/compat/global.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/@magenta/music/esm/core/logging.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Level": (()=>Level),
    "log": (()=>log),
    "logWithDuration": (()=>logWithDuration),
    "setVerbosity": (()=>setVerbosity),
    "verbosity": (()=>verbosity)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/compat/global.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/compat/global.js [app-client] (ecmascript) <locals>");
;
var Level;
(function(Level) {
    Level[Level["NONE"] = 0] = "NONE";
    Level[Level["WARN"] = 5] = "WARN";
    Level[Level["INFO"] = 10] = "INFO";
    Level[Level["DEBUG"] = 20] = "DEBUG";
})(Level || (Level = {}));
let verbosity = 10;
function setVerbosity(verbosity) {
    verbosity = verbosity;
}
function log(msg, prefix = 'Magenta.js', level = 10) {
    if (level === 0) {
        throw Error('Logging level cannot be NONE.');
    }
    if (verbosity >= level) {
        const logMethod = level === 5 ? console.warn : console.log;
        logMethod(`%c ${prefix} `, 'background:magenta; color:white', msg);
    }
}
function logWithDuration(msg, startTime, prefix = 'Magenta.js', level = 10) {
    const durationSeconds = (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["performance"].now() - startTime) / 1000;
    log(`${msg} in ${durationSeconds.toPrecision(3)}s`, prefix, level);
} //# sourceMappingURL=logging.js.map
}}),
"[project]/node_modules/@magenta/music/esm/core/sequences.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BadTimeSignatureException": (()=>BadTimeSignatureException),
    "MultipleTempoException": (()=>MultipleTempoException),
    "MultipleTimeSignatureException": (()=>MultipleTimeSignatureException),
    "NegativeTimeException": (()=>NegativeTimeException),
    "QuantizationStatusException": (()=>QuantizationStatusException),
    "applySustainControlChanges": (()=>applySustainControlChanges),
    "assertIsAbsoluteQuantizedSequence": (()=>assertIsAbsoluteQuantizedSequence),
    "assertIsQuantizedSequence": (()=>assertIsQuantizedSequence),
    "assertIsRelativeQuantizedSequence": (()=>assertIsRelativeQuantizedSequence),
    "clone": (()=>clone),
    "concatenate": (()=>concatenate),
    "createQuantizedNoteSequence": (()=>createQuantizedNoteSequence),
    "isAbsoluteQuantizedSequence": (()=>isAbsoluteQuantizedSequence),
    "isQuantizedSequence": (()=>isQuantizedSequence),
    "isRelativeQuantizedSequence": (()=>isRelativeQuantizedSequence),
    "mergeConsecutiveNotes": (()=>mergeConsecutiveNotes),
    "mergeInstruments": (()=>mergeInstruments),
    "quantizeNoteSequence": (()=>quantizeNoteSequence),
    "quantizeToStep": (()=>quantizeToStep),
    "replaceInstruments": (()=>replaceInstruments),
    "split": (()=>split),
    "stepsPerQuarterToStepsPerSecond": (()=>stepsPerQuarterToStepsPerSecond),
    "trim": (()=>trim),
    "unquantizeSequence": (()=>unquantizeSequence)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/protobuf/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/constants.js [app-client] (ecmascript)");
;
;
const QUANTIZE_CUTOFF = 0.5;
class MultipleTimeSignatureException extends Error {
    constructor(message){
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
class BadTimeSignatureException extends Error {
    constructor(message){
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
class NegativeTimeException extends Error {
    constructor(message){
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
class MultipleTempoException extends Error {
    constructor(message){
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
class QuantizationStatusException extends Error {
    constructor(message){
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
function isPowerOf2(n) {
    return n && (n & n - 1) === 0;
}
function clone(ns) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].decode(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].encode(ns).finish());
}
function stepsPerQuarterToStepsPerSecond(stepsPerQuarter, qpm) {
    return stepsPerQuarter * qpm / 60.0;
}
function quantizeToStep(unquantizedSeconds, stepsPerSecond, quantizeCutoff = QUANTIZE_CUTOFF) {
    const unquantizedSteps = unquantizedSeconds * stepsPerSecond;
    return Math.floor(unquantizedSteps + (1 - quantizeCutoff));
}
function getQuantizedTimeEvents(ns) {
    return ns.controlChanges.concat(ns.textAnnotations);
}
function quantizeNotesAndEvents(ns, stepsPerSecond) {
    for (const note of ns.notes){
        note.quantizedStartStep = quantizeToStep(note.startTime, stepsPerSecond);
        note.quantizedEndStep = quantizeToStep(note.endTime, stepsPerSecond);
        if (note.quantizedEndStep === note.quantizedStartStep) {
            note.quantizedEndStep += 1;
        }
        if (note.quantizedStartStep < 0 || note.quantizedEndStep < 0) {
            throw new NegativeTimeException(`Got negative note time: start_step = ` + `${note.quantizedStartStep}, end_step = ` + `${note.quantizedEndStep}`);
        }
        if (note.quantizedEndStep > ns.totalQuantizedSteps) {
            ns.totalQuantizedSteps = note.quantizedEndStep;
        }
    }
    getQuantizedTimeEvents(ns).forEach((event)=>{
        event.quantizedStep = quantizeToStep(event.time, stepsPerSecond);
        if (event.quantizedStep < 0) {
            throw new NegativeTimeException(`Got negative event time: step = ${event.quantizedStep}`);
        }
    });
}
function assertSingleTempo(ns) {
    if (!ns.tempos || ns.tempos.length === 0) {
        return;
    }
    ns.tempos.sort((a, b)=>a.time - b.time);
    if (ns.tempos[0].time !== 0 && ns.tempos[0].qpm !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_QUARTERS_PER_MINUTE"]) {
        throw new MultipleTempoException('NoteSequence has an implicit tempo change from initial ' + `${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_QUARTERS_PER_MINUTE"]} qpm to ` + `${ns.tempos[0].qpm} qpm at ${ns.tempos[0].time} seconds.`);
    }
    for(let i = 1; i < ns.tempos.length; i++){
        if (ns.tempos[i].qpm !== ns.tempos[0].qpm) {
            throw new MultipleTempoException('NoteSequence has at least one tempo change from ' + `${ns.tempos[0].qpm} qpm to ${ns.tempos[i].qpm}` + `qpm at ${ns.tempos[i].time} seconds.`);
        }
    }
}
function quantizeNoteSequence(ns, stepsPerQuarter) {
    const qns = clone(ns);
    qns.quantizationInfo = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].QuantizationInfo.create({
        stepsPerQuarter
    });
    if (qns.timeSignatures.length > 0) {
        qns.timeSignatures.sort((a, b)=>a.time - b.time);
        if (qns.timeSignatures[0].time !== 0 && !(qns.timeSignatures[0].numerator === 4 && qns.timeSignatures[0].denominator === 4)) {
            throw new MultipleTimeSignatureException('NoteSequence has an implicit change from initial 4/4 time ' + `signature to ${qns.timeSignatures[0].numerator}/` + `${qns.timeSignatures[0].denominator} at ` + `${qns.timeSignatures[0].time} seconds.`);
        }
        for(let i = 1; i < qns.timeSignatures.length; i++){
            const timeSignature = qns.timeSignatures[i];
            if (timeSignature.numerator !== qns.timeSignatures[0].numerator || timeSignature.denominator !== qns.timeSignatures[0].denominator) {
                throw new MultipleTimeSignatureException('NoteSequence has at least one time signature change from ' + `${qns.timeSignatures[0].numerator}/` + `${qns.timeSignatures[0].denominator} to ` + `${timeSignature.numerator}/${timeSignature.denominator} ` + `at ${timeSignature.time} seconds`);
            }
        }
        qns.timeSignatures[0].time = 0;
        qns.timeSignatures = [
            qns.timeSignatures[0]
        ];
    } else {
        const timeSignature = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].TimeSignature.create({
            numerator: 4,
            denominator: 4,
            time: 0
        });
        qns.timeSignatures.push(timeSignature);
    }
    const firstTS = qns.timeSignatures[0];
    if (!isPowerOf2(firstTS.denominator)) {
        throw new BadTimeSignatureException('Denominator is not a power of 2. Time signature: ' + `${firstTS.numerator}/${firstTS.denominator}`);
    }
    if (firstTS.numerator === 0) {
        throw new BadTimeSignatureException('Numerator is 0. Time signature: ' + `${firstTS.numerator}/${firstTS.denominator}`);
    }
    if (qns.tempos.length > 0) {
        assertSingleTempo(qns);
        qns.tempos[0].time = 0;
        qns.tempos = [
            qns.tempos[0]
        ];
    } else {
        const tempo = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Tempo.create({
            qpm: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_QUARTERS_PER_MINUTE"],
            time: 0
        });
        qns.tempos.push(tempo);
    }
    const stepsPerSecond = stepsPerQuarterToStepsPerSecond(stepsPerQuarter, qns.tempos[0].qpm);
    qns.totalQuantizedSteps = quantizeToStep(ns.totalTime, stepsPerSecond);
    quantizeNotesAndEvents(qns, stepsPerSecond);
    return qns;
}
function isQuantizedSequence(ns) {
    return ns.quantizationInfo && (ns.quantizationInfo.stepsPerQuarter > 0 || ns.quantizationInfo.stepsPerSecond > 0);
}
function assertIsQuantizedSequence(ns) {
    if (!isQuantizedSequence(ns)) {
        throw new QuantizationStatusException(`NoteSequence ${ns.id} is not quantized (missing quantizationInfo)`);
    }
}
function isRelativeQuantizedSequence(ns) {
    return ns.quantizationInfo && ns.quantizationInfo.stepsPerQuarter > 0;
}
function assertIsRelativeQuantizedSequence(ns) {
    if (!isRelativeQuantizedSequence(ns)) {
        throw new QuantizationStatusException(`NoteSequence ${ns.id} is not quantized or is quantized based on absolute timing`);
    }
}
function isAbsoluteQuantizedSequence(ns) {
    return ns.quantizationInfo && ns.quantizationInfo.stepsPerSecond > 0;
}
function assertIsAbsoluteQuantizedSequence(ns) {
    if (!isAbsoluteQuantizedSequence(ns)) {
        throw new QuantizationStatusException(`NoteSequence ${ns.id} is not quantized or is quantized based on relative timing`);
    }
}
function unquantizeSequence(qns, qpm) {
    assertIsRelativeQuantizedSequence(qns);
    assertSingleTempo(qns);
    const ns = clone(qns);
    if (qpm) {
        if (ns.tempos && ns.tempos.length > 0) {
            ns.tempos[0].qpm = qpm;
        } else {
            ns.tempos.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Tempo.create({
                time: 0,
                qpm
            }));
        }
    } else {
        qpm = qns.tempos && qns.tempos.length > 0 ? ns.tempos[0].qpm : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_QUARTERS_PER_MINUTE"];
    }
    const stepToSeconds = (step)=>step / ns.quantizationInfo.stepsPerQuarter * (60 / qpm);
    ns.totalTime = stepToSeconds(ns.totalQuantizedSteps);
    ns.notes.forEach((n)=>{
        n.startTime = stepToSeconds(n.quantizedStartStep);
        n.endTime = stepToSeconds(n.quantizedEndStep);
        ns.totalTime = Math.max(ns.totalTime, n.endTime);
        delete n.quantizedStartStep;
        delete n.quantizedEndStep;
    });
    getQuantizedTimeEvents(ns).forEach((event)=>{
        event.time = stepToSeconds(event.time);
    });
    delete ns.totalQuantizedSteps;
    delete ns.quantizationInfo;
    return ns;
}
function createQuantizedNoteSequence(stepsPerQuarter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_STEPS_PER_QUARTER"], qpm = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_QUARTERS_PER_MINUTE"]) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].create({
        quantizationInfo: {
            stepsPerQuarter
        },
        tempos: [
            {
                qpm
            }
        ]
    });
}
function mergeInstruments(ns) {
    const result = clone(ns);
    const events = result.notes.concat(result.pitchBends).concat(result.controlChanges);
    const programs = Array.from(new Set(events.filter((e)=>!e.isDrum).map((e)=>e.program)));
    events.forEach((e)=>{
        if (e.isDrum) {
            e.program = 0;
            e.instrument = programs.length;
        } else {
            e.instrument = programs.indexOf(e.program);
        }
    });
    return result;
}
function replaceInstruments(originalSequence, replaceSequence) {
    const instrumentsInOriginal = new Set(originalSequence.notes.map((n)=>n.instrument));
    const instrumentsInReplace = new Set(replaceSequence.notes.map((n)=>n.instrument));
    const newNotes = [];
    originalSequence.notes.forEach((n)=>{
        if (!instrumentsInReplace.has(n.instrument)) {
            newNotes.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note.create(n));
        }
    });
    replaceSequence.notes.forEach((n)=>{
        if (instrumentsInOriginal.has(n.instrument)) {
            newNotes.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note.create(n));
        }
    });
    const output = clone(originalSequence);
    output.notes = newNotes.sort((a, b)=>{
        const voiceCompare = a.instrument - b.instrument;
        if (voiceCompare) {
            return voiceCompare;
        }
        return a.quantizedStartStep - b.quantizedStartStep;
    });
    return output;
}
function mergeConsecutiveNotes(sequence) {
    assertIsQuantizedSequence(sequence);
    const output = clone(sequence);
    output.notes = [];
    const newNotes = sequence.notes.sort((a, b)=>{
        const voiceCompare = a.instrument - b.instrument;
        if (voiceCompare) {
            return voiceCompare;
        }
        return a.quantizedStartStep - b.quantizedStartStep;
    });
    const note = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note();
    note.pitch = newNotes[0].pitch;
    note.instrument = newNotes[0].instrument;
    note.quantizedStartStep = newNotes[0].quantizedStartStep;
    note.quantizedEndStep = newNotes[0].quantizedEndStep;
    output.notes.push(note);
    let o = 0;
    for(let i = 1; i < newNotes.length; i++){
        const thisNote = newNotes[i];
        const previousNote = output.notes[o];
        if (previousNote.instrument === thisNote.instrument && previousNote.pitch === thisNote.pitch && thisNote.quantizedStartStep === previousNote.quantizedEndStep && thisNote.quantizedStartStep % 16 !== 0) {
            output.notes[o].quantizedEndStep += thisNote.quantizedEndStep - thisNote.quantizedStartStep;
        } else {
            const note = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note();
            note.pitch = newNotes[i].pitch;
            note.instrument = newNotes[i].instrument;
            note.quantizedStartStep = newNotes[i].quantizedStartStep;
            note.quantizedEndStep = newNotes[i].quantizedEndStep;
            output.notes.push(note);
            o++;
        }
    }
    return output;
}
function applySustainControlChanges(noteSequence, sustainControlNumber = 64) {
    let MessageType;
    (function(MessageType) {
        MessageType[MessageType["SUSTAIN_ON"] = 0] = "SUSTAIN_ON";
        MessageType[MessageType["SUSTAIN_OFF"] = 1] = "SUSTAIN_OFF";
        MessageType[MessageType["NOTE_ON"] = 2] = "NOTE_ON";
        MessageType[MessageType["NOTE_OFF"] = 3] = "NOTE_OFF";
    })(MessageType || (MessageType = {}));
    const isQuantized = isQuantizedSequence(noteSequence);
    if (isQuantized) {
        throw new Error('Can only apply sustain to unquantized NoteSequence.');
    }
    const sequence = clone(noteSequence);
    const events = [];
    for (const note of sequence.notes){
        if (note.isDrum === false) {
            if (note.startTime !== null) {
                events.push({
                    time: note.startTime,
                    type: MessageType.NOTE_ON,
                    event: note
                });
            }
            if (note.endTime !== null) {
                events.push({
                    time: note.endTime,
                    type: MessageType.NOTE_OFF,
                    event: note
                });
            }
        }
    }
    for (const cc of sequence.controlChanges){
        if (cc.controlNumber === sustainControlNumber) {
            const value = cc.controlValue;
            if (value < 0 || value > 127) {}
            if (value >= 64) {
                events.push({
                    time: cc.time,
                    type: MessageType.SUSTAIN_ON,
                    event: cc
                });
            } else if (value < 64) {
                events.push({
                    time: cc.time,
                    type: MessageType.SUSTAIN_OFF,
                    event: cc
                });
            }
        }
    }
    events.sort((a, b)=>a.time - b.time);
    const activeNotes = {};
    const susActive = {};
    let time = 0;
    for (const item of events){
        time = item.time;
        const type = item.type;
        const event = item.event;
        if (type === MessageType.SUSTAIN_ON) {
            susActive[event.instrument] = true;
        } else if (type === MessageType.SUSTAIN_OFF) {
            susActive[event.instrument] = false;
            const newActiveNotes = [];
            if (!(event.instrument in activeNotes)) {
                activeNotes[event.instrument] = [];
            }
            for (const note of activeNotes[event.instrument]){
                if (note.endTime < time) {
                    note.endTime = time;
                    if (time > sequence.totalTime) {
                        sequence.totalTime = time;
                    }
                } else {
                    newActiveNotes.push(note);
                }
            }
            activeNotes[event.instrument] = newActiveNotes;
        } else if (type === MessageType.NOTE_ON) {
            if (susActive[event.instrument] === true) {
                const newActiveNotes = [];
                if (!(event.instrument in activeNotes)) {
                    activeNotes[event.instrument] = [];
                }
                for (const note of activeNotes[event.instrument]){
                    if (note.pitch === event.pitch) {
                        note.endTime = time;
                        if (note.startTime === note.endTime) {
                            sequence.notes.push(note);
                        }
                    } else {
                        newActiveNotes.push(note);
                    }
                }
                activeNotes[event.instrument] = newActiveNotes;
            }
            if (!(event.instrument in activeNotes)) {
                activeNotes[event.instrument] = [];
            }
            activeNotes[event.instrument].push(event);
        } else if (type === MessageType.NOTE_OFF) {
            if (susActive[event.instrument] === true) {} else {
                const index = activeNotes[event.instrument].indexOf(event);
                if (index > -1) {
                    activeNotes[event.instrument].splice(index, 1);
                }
            }
        }
    }
    for (const instrument of Object.values(activeNotes)){
        for (const note of instrument){
            note.endTime = time;
            sequence.totalTime = time;
        }
    }
    return sequence;
}
function concatenate(concatenateSequences, sequenceDurations) {
    if (sequenceDurations && sequenceDurations.length !== concatenateSequences.length) {
        throw new Error(`Number of sequences to concatenate and their individual
 durations does not match.`);
    }
    if (isQuantizedSequence(concatenateSequences[0])) {
        for(let i = 0; i < concatenateSequences.length; ++i){
            assertIsQuantizedSequence(concatenateSequences[i]);
            if (concatenateSequences[i].quantizationInfo.stepsPerQuarter !== concatenateSequences[0].quantizationInfo.stepsPerQuarter) {
                throw new Error('Not all sequences have the same quantizationInfo');
            }
        }
        return concatenateHelper(concatenateSequences, 'totalQuantizedSteps', 'quantizedStartStep', 'quantizedEndStep', sequenceDurations);
    } else {
        return concatenateHelper(concatenateSequences, 'totalTime', 'startTime', 'endTime', sequenceDurations);
    }
}
function trim(ns, start, end, truncateEndNotes) {
    return isQuantizedSequence(ns) ? trimHelper(ns, start, end, 'totalQuantizedSteps', 'quantizedStartStep', 'quantizedEndStep', truncateEndNotes) : trimHelper(ns, start, end, 'totalTime', 'startTime', 'endTime', truncateEndNotes);
}
function concatenateHelper(seqs, totalKey, startKey, endKey, sequenceDurations) {
    let concatSeq;
    let totalDuration = 0;
    for(let i = 0; i < seqs.length; ++i){
        const seqDuration = sequenceDurations ? sequenceDurations[i] : seqs[i][totalKey];
        if (seqDuration === 0) {
            throw Error(`Sequence ${seqs[i].id} has no ${totalKey}, and no individual duration was provided.`);
        }
        if (i === 0) {
            concatSeq = clone(seqs[0]);
        } else {
            Array.prototype.push.apply(concatSeq.notes, seqs[i].notes.map((n)=>{
                const newN = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note.create(n);
                newN[startKey] += totalDuration;
                newN[endKey] += totalDuration;
                return newN;
            }));
        }
        totalDuration += seqDuration;
    }
    concatSeq[totalKey] = totalDuration;
    return concatSeq;
}
function trimHelper(ns, start, end, totalKey, startKey, endKey, truncateEndNotes) {
    const result = clone(ns);
    result[totalKey] = end;
    result.notes = result.notes.filter((n)=>n[startKey] >= start && n[startKey] <= end && (truncateEndNotes || n[endKey] <= end));
    result[totalKey] -= start;
    for(let i = 0; i < result.notes.length; i++){
        result.notes[i][startKey] -= start;
        result.notes[i][endKey] -= start;
        if (truncateEndNotes) {
            result.notes[i][endKey] = Math.min(result.notes[i][endKey], result[totalKey]);
        }
    }
    return result;
}
function split(seq, chunkSize) {
    assertIsQuantizedSequence(seq);
    const ns = clone(seq);
    const notesBystartStep = ns.notes.sort((a, b)=>a.quantizedStartStep - b.quantizedStartStep);
    const chunks = [];
    let startStep = 0;
    let currentNotes = [];
    for(let i = 0; i < notesBystartStep.length; i++){
        const note = notesBystartStep[i];
        const originalStartStep = note.quantizedStartStep;
        const originalEndStep = note.quantizedEndStep;
        note.quantizedStartStep -= startStep;
        note.quantizedEndStep -= startStep;
        if (note.quantizedStartStep < 0) {
            continue;
        }
        if (note.quantizedEndStep <= chunkSize) {
            currentNotes.push(note);
        } else {
            if (note.quantizedStartStep < chunkSize) {
                const newNote = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note.create(note);
                newNote.quantizedEndStep = chunkSize;
                newNote.startTime = newNote.endTime = undefined;
                currentNotes.push(newNote);
                note.quantizedStartStep = startStep + chunkSize;
                note.quantizedEndStep = originalEndStep;
            } else {
                note.quantizedStartStep = originalStartStep;
                note.quantizedEndStep = originalEndStep;
            }
            if (note.quantizedEndStep > chunkSize || note.quantizedStartStep > chunkSize) {
                i = i - 1;
            }
            if (currentNotes.length !== 0) {
                const newSequence = clone(ns);
                newSequence.notes = currentNotes;
                newSequence.totalQuantizedSteps = chunkSize;
                chunks.push(newSequence);
            }
            currentNotes = [];
            startStep += chunkSize;
        }
    }
    if (currentNotes.length !== 0) {
        const newSequence = clone(ns);
        newSequence.notes = currentNotes;
        newSequence.totalQuantizedSteps = chunkSize;
        chunks.push(newSequence);
    }
    return chunks;
} //# sourceMappingURL=sequences.js.map
}}),
"[project]/node_modules/@magenta/music/esm/core/melodies.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Melody": (()=>Melody),
    "MelodyRegister": (()=>MelodyRegister),
    "MelodyRhythm": (()=>MelodyRhythm),
    "MelodyShape": (()=>MelodyShape),
    "NOTE_OFF": (()=>NOTE_OFF),
    "NO_EVENT": (()=>NO_EVENT)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs/dist/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$zeros$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/zeros.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/protobuf/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/sequences.js [app-client] (ecmascript)");
;
;
;
const NO_EVENT = 0;
const NOTE_OFF = 1;
const FIRST_PITCH = 2;
class Melody {
    constructor(events, minPitch, maxPitch){
        this.events = events;
        this.minPitch = minPitch;
        this.maxPitch = maxPitch;
    }
    static fromNoteSequence(noteSequence, minPitch, maxPitch, ignorePolyphony = true, numSteps) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assertIsQuantizedSequence"])(noteSequence);
        const sortedNotes = noteSequence.notes.sort((n1, n2)=>{
            if (n1.quantizedStartStep === n2.quantizedStartStep) {
                return n2.pitch - n1.pitch;
            }
            return n1.quantizedStartStep - n2.quantizedStartStep;
        });
        const events = new Int32Array(numSteps || noteSequence.totalQuantizedSteps);
        let lastStart = -1;
        sortedNotes.forEach((n)=>{
            if (n.quantizedStartStep === lastStart) {
                if (!ignorePolyphony) {
                    throw new Error('`NoteSequence` is not monophonic.');
                } else {
                    return;
                }
            }
            if (n.pitch < minPitch || n.pitch > maxPitch) {
                throw Error('`NoteSequence` has a pitch outside of the valid range: ' + `${n.pitch}`);
            }
            events[n.quantizedStartStep] = n.pitch - minPitch + FIRST_PITCH;
            events[n.quantizedEndStep] = NOTE_OFF;
            lastStart = n.quantizedStartStep;
        });
        return new Melody(events, minPitch, maxPitch);
    }
    toNoteSequence(stepsPerQuarter, qpm) {
        const noteSequence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createQuantizedNoteSequence"])(stepsPerQuarter, qpm);
        let currNote = null;
        for(let s = 0; s < this.events.length; ++s){
            const event = this.events[s];
            switch(event){
                case NO_EVENT:
                    break;
                case NOTE_OFF:
                    if (currNote) {
                        currNote.quantizedEndStep = s;
                        noteSequence.notes.push(currNote);
                        currNote = null;
                    }
                    break;
                default:
                    if (currNote) {
                        currNote.quantizedEndStep = s;
                        noteSequence.notes.push(currNote);
                    }
                    currNote = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note.create({
                        pitch: event - FIRST_PITCH + this.minPitch,
                        quantizedStartStep: s
                    });
            }
        }
        if (currNote) {
            currNote.quantizedEndStep = this.events.length;
            noteSequence.notes.push(currNote);
        }
        noteSequence.totalQuantizedSteps = this.events.length;
        return noteSequence;
    }
}
class MelodyRhythm {
    constructor(){
        this.depth = 1;
    }
    extract(melody) {
        const numSteps = melody.events.length;
        const buffer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buffer"])([
            numSteps,
            1
        ]);
        for(let step = 0; step < numSteps; ++step){
            buffer.set(melody.events[step] >= FIRST_PITCH ? 1 : 0, step, 0);
        }
        return buffer.toTensor().as2D(numSteps, 1);
    }
}
class MelodyShape {
    constructor(){
        this.depth = 3;
    }
    extract(melody) {
        const numSteps = melody.events.length;
        const buffer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buffer"])([
            numSteps,
            3
        ]);
        let lastIndex = null;
        let lastPitch = null;
        for(let step = 0; step < numSteps; ++step){
            if (melody.events[step] >= FIRST_PITCH) {
                if (lastIndex !== null) {
                    if (buffer.get(lastIndex, 0) === 0 && buffer.get(lastIndex, 1) === 0 && buffer.get(lastIndex, 2) === 0) {
                        lastIndex = -1;
                    }
                    let direction;
                    if (melody.events[step] < lastPitch) {
                        direction = 0;
                    } else if (melody.events[step] > lastPitch) {
                        direction = 2;
                    } else {
                        direction = 1;
                    }
                    for(let i = step; i > lastIndex; --i){
                        buffer.set(1, i, direction);
                    }
                }
                lastIndex = step;
                lastPitch = melody.events[step];
            }
        }
        if (lastIndex !== numSteps - 1) {
            if (lastIndex === null || buffer.get(lastIndex, 0) === 0 && buffer.get(lastIndex, 1) === 0 && buffer.get(lastIndex, 2) === 0) {
                for(let i = 0; i < numSteps; ++i){
                    buffer.set(1, i, 1);
                }
            } else {
                for(let i = numSteps - 1; i > lastIndex; --i){
                    for(let j = 0; j < 3; j++){
                        buffer.set(buffer.get(lastIndex, j), i, j);
                    }
                }
            }
        }
        return buffer.toTensor().as2D(numSteps, 3);
    }
}
class MelodyRegister {
    constructor(boundaryPitches){
        this.boundaryPitches = boundaryPitches;
        this.depth = boundaryPitches.length + 1;
    }
    meanMelodyPitch(melody) {
        let total = 0;
        let count = 0;
        let currentPitch = null;
        for(let step = 0; step < melody.events.length; ++step){
            if (melody.events[step] === NOTE_OFF) {
                currentPitch = null;
            } else if (melody.events[step] >= FIRST_PITCH) {
                currentPitch = melody.minPitch + melody.events[step] - FIRST_PITCH;
            }
            if (currentPitch !== null) {
                total += currentPitch;
                count += 1;
            }
        }
        if (count) {
            return total / count;
        } else {
            return null;
        }
    }
    extract(melody) {
        const numSteps = melody.events.length;
        const meanPitch = this.meanMelodyPitch(melody);
        if (meanPitch === null) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$zeros$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["zeros"])([
                numSteps,
                this.depth
            ]);
        }
        let bin = 0;
        while(bin < this.boundaryPitches.length && meanPitch >= this.boundaryPitches[bin]){
            bin++;
        }
        const buffer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buffer"])([
            numSteps,
            this.depth
        ]);
        for(let step = 0; step < numSteps; ++step){
            buffer.set(1, step, bin);
        }
        return buffer.toTensor().as2D(numSteps, this.depth);
    }
} //# sourceMappingURL=melodies.js.map
}}),
"[project]/node_modules/@magenta/music/esm/core/performance.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Performance": (()=>Performance)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/protobuf/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/sequences.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/logging.js [app-client] (ecmascript)");
;
;
;
;
class Performance {
    constructor(events, maxShiftSteps, numVelocityBins, program, isDrum){
        this.events = events;
        this.maxShiftSteps = maxShiftSteps;
        this.numVelocityBins = numVelocityBins;
        this.program = program;
        this.isDrum = isDrum;
    }
    static fromNoteSequence(noteSequence, maxShiftSteps, numVelocityBins, instrument) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assertIsQuantizedSequence"])(noteSequence);
        const notes = noteSequence.notes.filter((note, _)=>instrument !== undefined ? note.instrument === instrument : true);
        const sortedNotes = notes.sort((a, b)=>a.startTime === b.startTime ? a.pitch - b.pitch : a.startTime - b.startTime);
        const onsets = sortedNotes.map((note, i)=>({
                step: note.quantizedStartStep,
                index: i,
                isOffset: 0
            }));
        const offsets = sortedNotes.map((note, i)=>({
                step: note.quantizedEndStep,
                index: i,
                isOffset: 1
            }));
        const noteEvents = onsets.concat(offsets).sort((a, b)=>a.step === b.step ? a.index === b.index ? a.isOffset - b.isOffset : a.index - b.index : a.step - b.step);
        const velocityBinSize = numVelocityBins ? Math.ceil((__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MIDI_VELOCITIES"] - 1) / numVelocityBins) : undefined;
        const events = [];
        let currentStep = 0;
        let currentVelocityBin = numVelocityBins;
        for (const e of noteEvents){
            if (e.step > currentStep) {
                while(e.step > currentStep + maxShiftSteps){
                    events.push({
                        type: 'time-shift',
                        steps: maxShiftSteps
                    });
                    currentStep += maxShiftSteps;
                }
                events.push({
                    type: 'time-shift',
                    steps: e.step - currentStep
                });
                currentStep = e.step;
            }
            if (e.isOffset) {
                events.push({
                    type: 'note-off',
                    pitch: sortedNotes[e.index].pitch
                });
            } else {
                if (velocityBinSize) {
                    const velocityBin = Math.floor((sortedNotes[e.index].velocity - __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MIN_MIDI_VELOCITY"] - 1) / velocityBinSize) + 1;
                    if (velocityBin !== currentVelocityBin) {
                        events.push({
                            type: 'velocity-change',
                            velocityBin
                        });
                        currentVelocityBin = velocityBin;
                    }
                }
                events.push({
                    type: 'note-on',
                    pitch: sortedNotes[e.index].pitch
                });
            }
        }
        const isDrum = notes.some((note)=>note.isDrum) ? notes.some((note)=>!note.isDrum) ? undefined : true : false;
        const programs = Array.from(new Set(notes.map((note)=>note.program)));
        const program = !isDrum && programs.length === 1 ? programs[0] : undefined;
        const performance = new Performance(events, maxShiftSteps, numVelocityBins, program, isDrum);
        performance.setNumSteps(noteSequence.totalQuantizedSteps);
        return performance;
    }
    getNumSteps() {
        return this.events.filter((event)=>event.type === 'time-shift').map((event)=>event.steps).reduce((a, b)=>a + b, 0);
    }
    setNumSteps(numSteps) {
        let currentNumSteps = this.getNumSteps();
        if (currentNumSteps < numSteps) {
            if (this.events.length) {
                const event = this.events[this.events.length - 1];
                if (event.type === 'time-shift') {
                    const steps = Math.min(numSteps - currentNumSteps, this.maxShiftSteps - event.steps);
                    event.steps += steps;
                    currentNumSteps += steps;
                }
            }
            while(currentNumSteps < numSteps){
                if (currentNumSteps + this.maxShiftSteps > numSteps) {
                    this.events.push({
                        type: 'time-shift',
                        steps: numSteps - currentNumSteps
                    });
                    currentNumSteps = numSteps;
                } else {
                    this.events.push({
                        type: 'time-shift',
                        steps: this.maxShiftSteps
                    });
                    currentNumSteps += this.maxShiftSteps;
                }
            }
        } else if (currentNumSteps > numSteps) {
            while(this.events.length && currentNumSteps > numSteps){
                const event = this.events[this.events.length - 1];
                if (event.type === 'time-shift') {
                    if (currentNumSteps - event.steps < numSteps) {
                        event.steps -= currentNumSteps - numSteps;
                        currentNumSteps = numSteps;
                    } else {
                        this.events.pop();
                        currentNumSteps -= event.steps;
                    }
                } else {
                    this.events.pop();
                }
            }
        }
    }
    toNoteSequence(instrument) {
        const velocityBinSize = this.numVelocityBins ? Math.ceil((__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MIDI_VELOCITIES"] - 1) / this.numVelocityBins) : undefined;
        const noteSequence = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].create();
        let currentStep = 0;
        let currentVelocity = undefined;
        const pitchStartStepsAndVelocities = new Map();
        for(let i = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MIN_MIDI_PITCH"]; i <= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MAX_MIDI_PITCH"]; ++i){
            pitchStartStepsAndVelocities.set(i, []);
        }
        for (const event of this.events){
            switch(event.type){
                case 'note-on':
                    pitchStartStepsAndVelocities.get(event.pitch).push([
                        currentStep,
                        currentVelocity
                    ]);
                    break;
                case 'note-off':
                    const startStepsAndVelocities = pitchStartStepsAndVelocities.get(event.pitch);
                    if (startStepsAndVelocities.length) {
                        const [startStep, velocity] = startStepsAndVelocities.shift();
                        if (currentStep > startStep) {
                            noteSequence.notes.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note.create({
                                pitch: event.pitch,
                                velocity,
                                instrument,
                                quantizedStartStep: startStep,
                                quantizedEndStep: currentStep,
                                program: this.program,
                                isDrum: this.isDrum
                            }));
                        } else {
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])('Ignoring zero-length note: ' + `(pitch = ${event.pitch}, step = ${currentStep})`, 'Performance');
                        }
                    } else {
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])('Ignoring note-off with no previous note-on:' + `(pitch = ${event.pitch}, step = ${currentStep})`, 'Performance');
                    }
                    break;
                case 'time-shift':
                    currentStep += event.steps;
                    break;
                case 'velocity-change':
                    if (velocityBinSize) {
                        currentVelocity = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MIN_MIDI_VELOCITY"] + (event.velocityBin - 1) * velocityBinSize + 1;
                    } else {
                        throw new Error(`Unexpected velocity change event: ${event}`);
                    }
                    break;
                default:
                    throw new Error(`Unrecognized performance event: ${event}`);
            }
        }
        pitchStartStepsAndVelocities.forEach((startStepsAndVelocities, pitch)=>{
            for (const [startStep, velocity] of startStepsAndVelocities){
                if (currentStep > startStep) {
                    noteSequence.notes.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note.create({
                        pitch,
                        velocity,
                        instrument,
                        quantizedStartStep: startStep,
                        quantizedEndStep: currentStep,
                        program: this.program,
                        isDrum: this.isDrum
                    }));
                } else {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])('Ignoring zero-length note: ' + `(pitch = ${pitch}, step = ${currentStep})`, 'Performance');
                }
            }
        });
        noteSequence.totalQuantizedSteps = currentStep;
        return noteSequence;
    }
} //# sourceMappingURL=performance.js.map
}}),
"[project]/node_modules/@magenta/music/esm/core/data.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "DataConverter": (()=>DataConverter),
    "DrumRollConverter": (()=>DrumRollConverter),
    "DrumsConverter": (()=>DrumsConverter),
    "DrumsOneHotConverter": (()=>DrumsOneHotConverter),
    "GrooveConverter": (()=>GrooveConverter),
    "MelodyConverter": (()=>MelodyConverter),
    "MelodyRhythmConverter": (()=>MelodyRhythmConverter),
    "MelodyShapeConverter": (()=>MelodyShapeConverter),
    "MultitrackConverter": (()=>MultitrackConverter),
    "TrioConverter": (()=>TrioConverter),
    "TrioRhythmConverter": (()=>TrioRhythmConverter),
    "converterFromSpec": (()=>converterFromSpec)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs/dist/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$scalar$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/scalar.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/buffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/globals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$one_hot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/one_hot.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$tensor1d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/tensor1d.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$tensor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/tensor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$concat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/concat.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$split$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/split.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$arg_max$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/arg_max.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$greater$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/greater.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$stack$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/stack.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/protobuf/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/logging.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$melodies$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/melodies.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$performance$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/performance.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/sequences.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
function converterFromSpec(spec) {
    switch(spec.type){
        case 'MelodyConverter':
            return new MelodyConverter(spec.args);
        case 'MelodyRhythmConverter':
            return new MelodyRhythmConverter(spec.args);
        case 'MelodyShapeConverter':
            return new MelodyShapeConverter(spec.args);
        case 'DrumsConverter':
            return new DrumsConverter(spec.args);
        case 'DrumRollConverter':
            return new DrumRollConverter(spec.args);
        case 'TrioConverter':
            return new TrioConverter(spec.args);
        case 'TrioRhythmConverter':
            return new TrioRhythmConverter(spec.args);
        case 'DrumsOneHotConverter':
            return new DrumsOneHotConverter(spec.args);
        case 'MultitrackConverter':
            return new MultitrackConverter(spec.args);
        case 'GrooveConverter':
            return new GrooveConverter(spec.args);
        default:
            throw new Error(`Unknown DataConverter type: ${spec}`);
    }
}
class DataConverter {
    constructor(args){
        this.NUM_SPLITS = 0;
        this.SEGMENTED_BY_TRACK = false;
        this.numSteps = args.numSteps;
        this.numSegments = args.numSegments;
    }
    tensorSteps(tensor) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$scalar$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["scalar"])(tensor.shape[0], 'int32');
    }
}
class DrumsConverter extends DataConverter {
    constructor(args){
        super(args);
        this.pitchClasses = args.pitchClasses || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_DRUM_PITCH_CLASSES"];
        this.pitchToClass = new Map();
        for(let c = 0; c < this.pitchClasses.length; ++c){
            this.pitchClasses[c].forEach((p)=>{
                this.pitchToClass.set(p, c);
            });
        }
        this.depth = this.pitchClasses.length + 1;
    }
    toTensor(noteSequence) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assertIsQuantizedSequence"])(noteSequence);
        const numSteps = this.numSteps || noteSequence.totalQuantizedSteps;
        const drumRoll = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buffer"])([
            numSteps,
            this.pitchClasses.length + 1
        ], 'int32');
        for(let i = 0; i < numSteps; ++i){
            drumRoll.set(1, i, -1);
        }
        noteSequence.notes.forEach((note)=>{
            drumRoll.set(1, note.quantizedStartStep, this.pitchToClass.get(note.pitch));
            drumRoll.set(0, note.quantizedStartStep, -1);
        });
        return drumRoll.toTensor();
    }
    async toNoteSequence(oh, stepsPerQuarter, qpm) {
        const noteSequence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createQuantizedNoteSequence"])(stepsPerQuarter, qpm);
        const labelsTensor = oh.argMax(1);
        const labels = await labelsTensor.data();
        labelsTensor.dispose();
        for(let s = 0; s < labels.length; ++s){
            for(let p = 0; p < this.pitchClasses.length; p++){
                if (labels[s] >> p & 1) {
                    noteSequence.notes.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note.create({
                        pitch: this.pitchClasses[p][0],
                        quantizedStartStep: s,
                        quantizedEndStep: s + 1,
                        isDrum: true
                    }));
                }
            }
        }
        noteSequence.totalQuantizedSteps = labels.length;
        return noteSequence;
    }
}
class DrumRollConverter extends DrumsConverter {
    async toNoteSequence(roll, stepsPerQuarter, qpm) {
        const noteSequence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createQuantizedNoteSequence"])(stepsPerQuarter, qpm);
        const flatRoll = await roll.data();
        for(let s = 0; s < roll.shape[0]; ++s){
            const pitches = flatRoll.slice(s * this.pitchClasses.length, (s + 1) * this.pitchClasses.length);
            for(let p = 0; p < pitches.length; ++p){
                if (pitches[p]) {
                    noteSequence.notes.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note.create({
                        pitch: this.pitchClasses[p][0],
                        quantizedStartStep: s,
                        quantizedEndStep: s + 1,
                        isDrum: true
                    }));
                }
            }
        }
        noteSequence.totalQuantizedSteps = roll.shape[0];
        return noteSequence;
    }
}
class DrumsOneHotConverter extends DrumsConverter {
    constructor(args){
        super(args);
        this.depth = Math.pow(2, this.pitchClasses.length);
    }
    toTensor(noteSequence) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assertIsRelativeQuantizedSequence"])(noteSequence);
        const numSteps = this.numSteps || noteSequence.totalQuantizedSteps;
        const labels = Array(numSteps).fill(0);
        for (const { pitch, quantizedStartStep } of noteSequence.notes){
            labels[quantizedStartStep] += Math.pow(2, this.pitchToClass.get(pitch));
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tidy"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$one_hot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["oneHot"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$tensor1d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tensor1d"])(labels, 'int32'), this.depth));
    }
}
class MelodyConverter extends DataConverter {
    constructor(args){
        super(args);
        this.NOTE_OFF = 1;
        this.FIRST_PITCH = 2;
        this.minPitch = args.minPitch;
        this.maxPitch = args.maxPitch;
        this.ignorePolyphony = args.ignorePolyphony;
        this.depth = args.maxPitch - args.minPitch + 1 + this.FIRST_PITCH;
    }
    toTensor(noteSequence) {
        const melody = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$melodies$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Melody"].fromNoteSequence(noteSequence, this.minPitch, this.maxPitch, this.ignorePolyphony, this.numSteps);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tidy"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$one_hot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["oneHot"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$tensor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tensor"])(melody.events, [
                melody.events.length
            ], 'int32'), this.depth));
    }
    async toNoteSequence(oh, stepsPerQuarter, qpm) {
        const labelsTensor = oh.argMax(1);
        const labels = await labelsTensor.data();
        labelsTensor.dispose();
        const melody = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$melodies$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Melody"](labels, this.minPitch, this.maxPitch);
        return melody.toNoteSequence(stepsPerQuarter, qpm);
    }
}
class MelodyControlConverter extends DataConverter {
    constructor(args, melodyControl){
        super(args);
        this.minPitch = args.minPitch;
        this.maxPitch = args.maxPitch;
        this.ignorePolyphony = args.ignorePolyphony;
        this.melodyControl = melodyControl;
        this.depth = melodyControl.depth;
    }
    toTensor(noteSequence) {
        const melody = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$melodies$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Melody"].fromNoteSequence(noteSequence, this.minPitch, this.maxPitch, this.ignorePolyphony, this.numSteps);
        return this.melodyControl.extract(melody);
    }
}
class MelodyRhythmConverter extends MelodyControlConverter {
    constructor(args){
        super(args, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$melodies$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MelodyRhythm"]());
    }
    async toNoteSequence(tensor, stepsPerQuarter, qpm) {
        const noteSequence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createQuantizedNoteSequence"])(stepsPerQuarter, qpm);
        const rhythm = await tensor.data();
        for(let s = 0; s < rhythm.length; ++s){
            if (rhythm[s]) {
                noteSequence.notes.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note.create({
                    pitch: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_DRUM_PITCH_CLASSES"][1][0],
                    quantizedStartStep: s,
                    quantizedEndStep: s + 1,
                    isDrum: true
                }));
            }
        }
        noteSequence.totalQuantizedSteps = rhythm.length;
        return noteSequence;
    }
}
class MelodyShapeConverter extends MelodyControlConverter {
    constructor(args){
        super(args, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$melodies$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MelodyShape"]());
    }
    async toNoteSequence(oh, stepsPerQuarter, qpm) {
        const noteSequence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createQuantizedNoteSequence"])(stepsPerQuarter, qpm);
        const shapeTensor = oh.argMax(1);
        const shape = await shapeTensor.data();
        shapeTensor.dispose();
        let pitch = Math.round((this.maxPitch + this.minPitch) / 2);
        for(let s = 0; s < shape.length; ++s){
            switch(shape[s]){
                case 0:
                    pitch -= 1;
                    if (pitch < this.minPitch) {
                        pitch = this.minPitch;
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])('Pitch range exceeded when creating NoteSequence from shape.', 'MelodyShapeConverter');
                    }
                    break;
                case 2:
                    pitch += 1;
                    if (pitch > this.maxPitch) {
                        pitch = this.maxPitch;
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])('Pitch range exceeded when creating NoteSequence from shape.', 'MelodyShapeConverter');
                    }
                    break;
                default:
                    break;
            }
            noteSequence.notes.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note.create({
                pitch,
                quantizedStartStep: s,
                quantizedEndStep: s + 1
            }));
        }
        noteSequence.totalQuantizedSteps = shape.length;
        return noteSequence;
    }
}
class TrioConverter extends DataConverter {
    constructor(args){
        super(args);
        this.NUM_SPLITS = 3;
        this.MEL_PROG_RANGE = [
            0,
            31
        ];
        this.BASS_PROG_RANGE = [
            32,
            39
        ];
        args.melArgs.numSteps = args.numSteps;
        args.bassArgs.numSteps = args.numSteps;
        args.drumsArgs.numSteps = args.numSteps;
        this.melConverter = new MelodyConverter(args.melArgs);
        this.bassConverter = new MelodyConverter(args.bassArgs);
        this.drumsConverter = new DrumsOneHotConverter(args.drumsArgs);
        this.depth = this.melConverter.depth + this.bassConverter.depth + this.drumsConverter.depth;
    }
    toTensor(noteSequence) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assertIsQuantizedSequence"])(noteSequence);
        const melSeq = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clone"])(noteSequence);
        const bassSeq = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clone"])(noteSequence);
        const drumsSeq = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clone"])(noteSequence);
        melSeq.notes = noteSequence.notes.filter((n)=>!n.isDrum && n.program >= this.MEL_PROG_RANGE[0] && n.program <= this.MEL_PROG_RANGE[1]);
        bassSeq.notes = noteSequence.notes.filter((n)=>!n.isDrum && n.program >= this.BASS_PROG_RANGE[0] && n.program <= this.BASS_PROG_RANGE[1]);
        drumsSeq.notes = noteSequence.notes.filter((n)=>n.isDrum);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tidy"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$concat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])([
                this.melConverter.toTensor(melSeq),
                this.bassConverter.toTensor(bassSeq),
                this.drumsConverter.toTensor(drumsSeq)
            ], -1));
    }
    async toNoteSequence(th, stepsPerQuarter, qpm) {
        const ohs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$split$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["split"])(th, [
            this.melConverter.depth,
            this.bassConverter.depth,
            this.drumsConverter.depth
        ], -1);
        const ns = await this.melConverter.toNoteSequence(ohs[0], stepsPerQuarter, qpm);
        ns.notes.forEach((n)=>{
            n.instrument = 0;
            n.program = 0;
        });
        const bassNs = await this.bassConverter.toNoteSequence(ohs[1], stepsPerQuarter, qpm);
        ns.notes.push(...bassNs.notes.map((n)=>{
            n.instrument = 1;
            n.program = this.BASS_PROG_RANGE[0];
            return n;
        }));
        const drumsNs = await this.drumsConverter.toNoteSequence(ohs[2], stepsPerQuarter, qpm);
        ns.notes.push(...drumsNs.notes.map((n)=>{
            n.instrument = 2;
            return n;
        }));
        ohs.forEach((oh)=>oh.dispose());
        return ns;
    }
}
class TrioRhythmConverter extends DataConverter {
    constructor(args){
        super(args);
        this.NUM_SPLITS = 3;
        this.trioConverter = new TrioConverter(args);
        this.depth = 3;
    }
    toTensor(noteSequence) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tidy"])(()=>{
            const trioTensor = this.trioConverter.toTensor(noteSequence);
            const instrumentTensors = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$split$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["split"])(trioTensor, [
                this.trioConverter.melConverter.depth,
                this.trioConverter.bassConverter.depth,
                this.trioConverter.drumsConverter.depth
            ], 1);
            const melodyEvents = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$arg_max$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["argMax"])(instrumentTensors[0], 1);
            const bassEvents = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$arg_max$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["argMax"])(instrumentTensors[1], 1);
            const drumsEvents = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$arg_max$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["argMax"])(instrumentTensors[2], 1);
            const melodyRhythm = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$greater$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["greater"])(melodyEvents, 1);
            const bassRhythm = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$greater$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["greater"])(bassEvents, 1);
            const drumsRhythm = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$greater$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["greater"])(drumsEvents, 0);
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$stack$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["stack"])([
                melodyRhythm,
                bassRhythm,
                drumsRhythm
            ], 1);
        });
    }
    async toNoteSequence(tensor, stepsPerQuarter, qpm) {
        const rhythmTensors = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$split$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["split"])(tensor, 3, 1);
        const rhythms = await Promise.all(rhythmTensors.map((t)=>t.data()));
        const noteSequence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createQuantizedNoteSequence"])(stepsPerQuarter, qpm);
        for(let s = 0; s < this.numSteps; ++s){
            if (rhythms[0][s]) {
                noteSequence.notes.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note.create({
                    pitch: 72,
                    quantizedStartStep: s,
                    quantizedEndStep: s + 1,
                    instrument: 0,
                    program: 0
                }));
            }
            if (rhythms[1][s]) {
                noteSequence.notes.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note.create({
                    pitch: 36,
                    quantizedStartStep: s,
                    quantizedEndStep: s + 1,
                    instrument: 1,
                    program: 32
                }));
            }
            if (rhythms[2][s]) {
                noteSequence.notes.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note.create({
                    pitch: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_DRUM_PITCH_CLASSES"][1][0],
                    quantizedStartStep: s,
                    quantizedEndStep: s + 1,
                    instrument: 2,
                    isDrum: true
                }));
            }
        }
        noteSequence.totalQuantizedSteps = this.numSteps;
        return noteSequence;
    }
}
class MultitrackConverter extends DataConverter {
    constructor(args){
        super(args);
        this.SEGMENTED_BY_TRACK = true;
        this.stepsPerQuarter = args.stepsPerQuarter;
        this.totalSteps = args.totalSteps;
        this.numVelocityBins = args.numVelocityBins;
        this.minPitch = args.minPitch ? args.minPitch : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MIN_MIDI_PITCH"];
        this.maxPitch = args.maxPitch ? args.maxPitch : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MAX_MIDI_PITCH"];
        this.numPitches = this.maxPitch - this.minPitch + 1;
        this.performanceEventDepth = 2 * this.numPitches + this.totalSteps + this.numVelocityBins;
        this.numPrograms = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MAX_MIDI_PROGRAM"] - __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MIN_MIDI_PROGRAM"] + 2;
        this.endToken = this.performanceEventDepth + this.numPrograms;
        this.depth = this.endToken + 1;
        this.endTensor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tidy"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$one_hot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["oneHot"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$tensor1d$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tensor1d"])([
                this.endToken
            ], 'int32'), this.depth).as1D());
    }
    trackToTensor(track) {
        const maxEventsPerTrack = this.numSteps / this.numSegments;
        let tokens = undefined;
        if (track) {
            while(track.events.length > maxEventsPerTrack - 2){
                track.events.pop();
            }
            tokens = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buffer"])([
                track.events.length + 2
            ], 'int32');
            tokens.set(this.performanceEventDepth + (track.isDrum ? this.numPrograms - 1 : track.program), 0);
            track.events.forEach((event, index)=>{
                switch(event.type){
                    case 'note-on':
                        tokens.set(event.pitch - this.minPitch, index + 1);
                        break;
                    case 'note-off':
                        tokens.set(this.numPitches + event.pitch - this.minPitch, index + 1);
                        break;
                    case 'time-shift':
                        tokens.set(2 * this.numPitches + event.steps - 1, index + 1);
                        break;
                    case 'velocity-change':
                        tokens.set(2 * this.numPitches + this.totalSteps + event.velocityBin - 1, index + 1);
                        break;
                    default:
                        throw new Error(`Unrecognized performance event: ${event}`);
                }
            });
            tokens.set(this.endToken, track.events.length + 1);
        } else {
            tokens = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buffer"])([
                1
            ], 'int32', new Int32Array([
                this.endToken
            ]));
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tidy"])(()=>{
            const oh = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$one_hot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["oneHot"])(tokens.toTensor(), this.depth);
            return oh.pad([
                [
                    0,
                    maxEventsPerTrack - oh.shape[0]
                ],
                [
                    0,
                    0
                ]
            ]);
        });
    }
    toTensor(noteSequence) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assertIsRelativeQuantizedSequence"])(noteSequence);
        if (noteSequence.quantizationInfo.stepsPerQuarter !== this.stepsPerQuarter) {
            throw new Error(`Steps per quarter note mismatch: ${noteSequence.quantizationInfo.stepsPerQuarter} != ${this.stepsPerQuarter}`);
        }
        const seq = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clone"])(noteSequence);
        seq.notes = noteSequence.notes.filter((note)=>note.pitch >= this.minPitch && note.pitch <= this.maxPitch);
        const instruments = new Set(seq.notes.map((note)=>note.instrument));
        const tracks = Array.from(instruments).map((instrument)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$performance$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Performance"].fromNoteSequence(seq, this.totalSteps, this.numVelocityBins, instrument));
        const sortedTracks = tracks.sort((a, b)=>b.isDrum ? -1 : a.isDrum ? 1 : a.program - b.program);
        while(sortedTracks.length > this.numSegments){
            sortedTracks.pop();
        }
        sortedTracks.forEach((track)=>track.setNumSteps(this.totalSteps));
        while(sortedTracks.length < this.numSegments){
            sortedTracks.push(undefined);
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tidy"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$concat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])(sortedTracks.map((track)=>this.trackToTensor(track)), 0));
    }
    tokensToTrack(tokens) {
        const idx = tokens.indexOf(this.endToken);
        const endIndex = idx >= 0 ? idx : tokens.length;
        const trackTokens = tokens.slice(0, endIndex);
        const eventTokens = trackTokens.filter((token)=>token < this.performanceEventDepth);
        const programTokens = trackTokens.filter((token)=>token >= this.performanceEventDepth);
        const [program, isDrum] = programTokens.length ? programTokens[0] - this.performanceEventDepth < this.numPrograms - 1 ? [
            programTokens[0] - this.performanceEventDepth,
            false
        ] : [
            0,
            true
        ] : [
            0,
            false
        ];
        const events = Array.from(eventTokens).map((token)=>{
            if (token < this.numPitches) {
                return {
                    type: 'note-on',
                    pitch: this.minPitch + token
                };
            } else if (token < 2 * this.numPitches) {
                return {
                    type: 'note-off',
                    pitch: this.minPitch + token - this.numPitches
                };
            } else if (token < 2 * this.numPitches + this.totalSteps) {
                return {
                    type: 'time-shift',
                    steps: token - 2 * this.numPitches + 1
                };
            } else if (token < 2 * this.numPitches + this.totalSteps + this.numVelocityBins) {
                return {
                    type: 'velocity-change',
                    velocityBin: token - 2 * this.numPitches - this.totalSteps + 1
                };
            } else {
                throw new Error(`Invalid performance event token: ${token}`);
            }
        });
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$performance$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Performance"](events, this.totalSteps, this.numVelocityBins, program, isDrum);
    }
    async toNoteSequence(oh, stepsPerQuarter = this.stepsPerQuarter, qpm) {
        const noteSequence = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createQuantizedNoteSequence"])(stepsPerQuarter, qpm);
        noteSequence.totalQuantizedSteps = this.totalSteps;
        const tensors = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tidy"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$split$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["split"])(oh.argMax(1), this.numSegments));
        const tracks = await Promise.all(tensors.map(async (tensor)=>{
            const tokens = await tensor.data();
            const track = this.tokensToTrack(tokens);
            tensor.dispose();
            return track;
        }));
        tracks.forEach((track, instrument)=>{
            track.setNumSteps(this.totalSteps);
            noteSequence.notes.push(...track.toNoteSequence(instrument).notes);
        });
        return noteSequence;
    }
}
class GrooveConverter extends DataConverter {
    constructor(args){
        super(args);
        this.TAPIFY_CHANNEL = 3;
        this.stepsPerQuarter = args.stepsPerQuarter || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_STEPS_PER_QUARTER"];
        this.pitchClasses = args.pitchClasses || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_DRUM_PITCH_CLASSES"];
        this.pitchToClass = new Map();
        for(let c = 0; c < this.pitchClasses.length; ++c){
            this.pitchClasses[c].forEach((p)=>{
                this.pitchToClass.set(p, c);
            });
        }
        this.humanize = args.humanize || false;
        this.tapify = args.tapify || false;
        this.splitInstruments = args.splitInstruments || false;
        this.depth = 3;
    }
    toTensor(ns) {
        const qns = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isRelativeQuantizedSequence"])(ns) ? ns : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["quantizeNoteSequence"])(ns, this.stepsPerQuarter);
        const numSteps = this.numSteps;
        const qpm = qns.tempos && qns.tempos.length ? qns.tempos[0].qpm : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_QUARTERS_PER_MINUTE"];
        const stepLength = 60. / qpm / this.stepsPerQuarter;
        const stepNotes = [];
        for(let i = 0; i < numSteps; ++i){
            stepNotes.push(new Map());
        }
        qns.notes.forEach((n)=>{
            if (!(this.tapify || this.pitchToClass.has(n.pitch))) {
                return;
            }
            const s = n.quantizedStartStep;
            if (s >= stepNotes.length) {
                throw Error(`Model does not support sequences with more than ${numSteps} steps (${numSteps * stepLength} seconds at qpm ${qpm}).`);
            }
            const d = this.tapify ? this.TAPIFY_CHANNEL : this.pitchToClass.get(n.pitch);
            if (!stepNotes[s].has(d) || stepNotes[s].get(d).velocity < n.velocity) {
                stepNotes[s].set(d, n);
            }
        });
        const numDrums = this.pitchClasses.length;
        const hitVectors = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buffer"])([
            numSteps,
            numDrums
        ]);
        const velocityVectors = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buffer"])([
            numSteps,
            numDrums
        ]);
        const offsetVectors = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buffer"])([
            numSteps,
            numDrums
        ]);
        function getOffset(n) {
            if (n.startTime === undefined) {
                return 0;
            }
            const tOnset = n.startTime;
            const qOnset = n.quantizedStartStep * stepLength;
            return 2 * (qOnset - tOnset) / stepLength;
        }
        for(let s = 0; s < numSteps; ++s){
            for(let d = 0; d < numDrums; ++d){
                const note = stepNotes[s].get(d);
                hitVectors.set(note ? 1 : 0, s, d);
                if (!this.humanize && !this.tapify) {
                    velocityVectors.set(note ? note.velocity / __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MAX_MIDI_VELOCITY"] : 0, s, d);
                }
                if (!this.humanize) {
                    offsetVectors.set(note ? getOffset(note) : 0, s, d);
                }
            }
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["tidy"])(()=>{
            const hits = hitVectors.toTensor();
            const velocities = velocityVectors.toTensor();
            const offsets = offsetVectors.toTensor();
            const outLength = this.splitInstruments ? numSteps * numDrums : numSteps;
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$concat$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["concat"])([
                hits.as2D(outLength, -1),
                velocities.as2D(outLength, -1),
                offsets.as2D(outLength, -1)
            ], 1);
        });
    }
    async toNoteSequence(t, stepsPerQuarter, qpm = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_QUARTERS_PER_MINUTE"]) {
        if (stepsPerQuarter && stepsPerQuarter !== this.stepsPerQuarter) {
            throw Error('`stepsPerQuarter` is set by the model.');
        }
        stepsPerQuarter = this.stepsPerQuarter;
        const numSteps = this.splitInstruments ? t.shape[0] / this.pitchClasses.length : t.shape[0];
        const stepLength = 60. / qpm / this.stepsPerQuarter;
        const ns = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].create({
            totalTime: numSteps * stepLength,
            tempos: [
                {
                    qpm
                }
            ]
        });
        const results = await t.data();
        function clip(v, min, max) {
            return Math.min(Math.max(v, min), max);
        }
        const numDrums = this.pitchClasses.length;
        for(let s = 0; s < numSteps; ++s){
            const stepResults = results.slice(s * numDrums * this.depth, (s + 1) * numDrums * this.depth);
            for(let d = 0; d < numDrums; ++d){
                const hitOutput = stepResults[this.splitInstruments ? d * this.depth : d];
                const velI = this.splitInstruments ? d * this.depth + 1 : numDrums + d;
                const velOutput = stepResults[velI];
                const offsetI = this.splitInstruments ? d * this.depth + 2 : 2 * numDrums + d;
                const offsetOutput = stepResults[offsetI];
                if (hitOutput > 0.5) {
                    const velocity = clip(Math.round(velOutput * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MAX_MIDI_VELOCITY"]), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MIN_MIDI_VELOCITY"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MAX_MIDI_VELOCITY"]);
                    const offset = clip(offsetOutput / 2, -0.5, 0.5);
                    ns.notes.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note.create({
                        pitch: this.pitchClasses[d][0],
                        startTime: (s - offset) * stepLength,
                        endTime: (s - offset + 1) * stepLength,
                        velocity,
                        isDrum: true
                    }));
                }
            }
        }
        return ns;
    }
} //# sourceMappingURL=data.js.map
}}),
"[project]/node_modules/@magenta/music/esm/core/data.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs/dist/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/protobuf/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/logging.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$melodies$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/melodies.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$performance$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/performance.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/sequences.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/data.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/@magenta/music/esm/core/metronome.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Metronome": (()=>Metronome),
    "MetronomeCallbackObject": (()=>MetronomeCallbackObject)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/tone/build/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$instrument$2f$MembraneSynth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tone/build/esm/instrument/MembraneSynth.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/tone/build/esm/index.js [app-client] (ecmascript) <locals>");
;
const QUARTERS_PER_BAR = 4;
class MetronomeCallbackObject {
}
class Metronome {
    constructor(callbackObject, clicksPerQuarter = 1){
        this.clicksPerQuarter = 1;
        this.muted = false;
        this.loClick = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$instrument$2f$MembraneSynth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MembraneSynth"]({
            pitchDecay: 0.008,
            envelope: {
                attack: 0.001,
                decay: 0.3,
                sustain: 0
            }
        }).toDestination();
        this.hiClick = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$instrument$2f$MembraneSynth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MembraneSynth"]({
            pitchDecay: 0.008,
            envelope: {
                attack: 0.001,
                decay: 0.3,
                sustain: 0
            }
        }).toDestination();
        this.loClickNote = 'c5';
        this.hiClickNote = 'g5';
        this.ticking = false;
        this.startedAt = null;
        this.step = -1;
        this.reset();
        this.callbackObject = callbackObject;
        this.clicksPerQuarter = clicksPerQuarter;
    }
    isTicking() {
        return this.ticking;
    }
    getStartedAt() {
        return this.startedAt;
    }
    getOffsetTime() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["immediate"])() - this.startedAt;
    }
    start(bpm = 120) {
        this.reset();
        this.ticking = true;
        if (!this.callbackObject.click) {
            this.callbackObject.click = ()=>{};
        }
        if (!this.callbackObject.quarter) {
            this.callbackObject.quarter = ()=>{};
        }
        if (!this.callbackObject.bar) {
            this.callbackObject.bar = ()=>{};
        }
        let bar = 0;
        const clicksInBar = QUARTERS_PER_BAR * this.clicksPerQuarter;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Transport"].scheduleRepeat((time)=>{
            if (!this.startedAt) {
                this.startedAt = time;
            }
            const offsetTime = time - this.startedAt;
            this.step++;
            const clickInBar = this.step % clicksInBar;
            const clickInQuarter = Math.floor(clickInBar / this.clicksPerQuarter);
            const quarter = clickInBar % this.clicksPerQuarter;
            this.callbackObject.click(offsetTime, clickInBar);
            if (quarter === 0) {
                this.callbackObject.quarter(offsetTime, clickInQuarter);
            }
            if (!this.muted) {
                if (clickInBar === 0) {
                    this.hiClick.triggerAttack(this.hiClickNote, time, 0.1);
                } else {
                    this.loClick.triggerAttack(this.loClickNote, time, 0.1);
                }
            }
            if (clickInBar === 0) {
                this.callbackObject.bar(offsetTime, bar);
                bar++;
            }
        }, `${clicksInBar}n`);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Transport"].bpm.value = bpm;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Transport"].start();
    }
    stop() {
        this.ticking = false;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Transport"].cancel();
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Transport"].stop();
    }
    reset() {
        this.muted = false;
        this.ticking = false;
        this.step = -1;
        this.startedAt = null;
    }
} //# sourceMappingURL=metronome.js.map
}}),
"[project]/node_modules/@magenta/music/esm/core/midi_io.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "MidiConversionError": (()=>MidiConversionError),
    "blobToNoteSequence": (()=>blobToNoteSequence),
    "midiToSequenceProto": (()=>midiToSequenceProto),
    "sequenceProtoToMidi": (()=>sequenceProtoToMidi),
    "urlToBlob": (()=>urlToBlob),
    "urlToNoteSequence": (()=>urlToNoteSequence)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tonejs$2f$midi$2f$dist$2f$Midi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tonejs/midi/dist/Midi.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/compat/global.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/compat/global.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/protobuf/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/sequences.js [app-client] (ecmascript)");
;
;
;
;
;
class MidiConversionError extends Error {
    constructor(message){
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
function midiToSequenceProto(midi) {
    const parsedMidi = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tonejs$2f$midi$2f$dist$2f$Midi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Midi"](midi);
    const ns = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].create();
    ns.ticksPerQuarter = parsedMidi.header.ppq;
    ns.sourceInfo = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].SourceInfo.create({
        parser: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].SourceInfo.Parser.TONEJS_MIDI_CONVERT,
        encodingType: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].SourceInfo.EncodingType.MIDI
    });
    for (const ts of parsedMidi.header.timeSignatures){
        ns.timeSignatures.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].TimeSignature.create({
            time: parsedMidi.header.ticksToSeconds(ts.ticks),
            numerator: ts.timeSignature[0],
            denominator: ts.timeSignature[1]
        }));
    }
    if (!ns.timeSignatures.length) {
        ns.timeSignatures.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].TimeSignature.create({
            time: 0,
            numerator: 4,
            denominator: 4
        }));
    }
    for (const tempo of parsedMidi.header.tempos){
        ns.tempos.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Tempo.create({
            time: tempo.time,
            qpm: tempo.bpm
        }));
    }
    let instrumentNumber = -1;
    for (const track of parsedMidi.tracks){
        if (track.notes.length > 0) {
            instrumentNumber += 1;
        }
        for (const note of track.notes){
            const startTime = note.time;
            const duration = note.duration;
            const endTime = startTime + duration;
            ns.notes.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note.create({
                instrument: instrumentNumber,
                program: track.instrument.number,
                startTime,
                endTime,
                pitch: note.midi,
                velocity: Math.floor(note.velocity * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MIDI_VELOCITIES"]),
                isDrum: track.instrument.percussion
            }));
            if (endTime > ns.totalTime) {
                ns.totalTime = endTime;
            }
        }
        const controlChangeValues = Object.values(track.controlChanges);
        const flattenedControlChangeValues = [].concat.apply([], controlChangeValues);
        for (const controlChange of flattenedControlChangeValues){
            ns.controlChanges.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].ControlChange.create({
                time: controlChange.time,
                controlNumber: controlChange.number,
                controlValue: Math.floor(controlChange.value * (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MIDI_VELOCITIES"] - 1)),
                instrument: instrumentNumber,
                program: track.instrument.number,
                isDrum: track.instrument.percussion
            }));
        }
    }
    return ns;
}
function sequenceProtoToMidi(ns) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isQuantizedSequence"])(ns)) {
        ns = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["unquantizeSequence"])(ns);
    }
    const midi = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tonejs$2f$midi$2f$dist$2f$Midi$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Midi"]();
    midi.fromJSON({
        header: {
            name: '',
            ppq: ns.ticksPerQuarter || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_TICKS_PER_QUARTER"],
            tempos: [],
            timeSignatures: [],
            keySignatures: [],
            meta: []
        },
        tracks: []
    });
    const tempos = Array.from(ns.tempos || []);
    if (tempos.length === 0) {
        tempos.push({
            time: 0,
            qpm: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_QUARTERS_PER_MINUTE"]
        });
    }
    tempos.sort((a, b)=>a.time - b.time);
    for (const tempo of tempos){
        midi.header.tempos.push({
            ticks: midi.header.secondsToTicks(tempo.time),
            bpm: tempo.qpm
        });
        midi.header.update();
    }
    if (!ns.timeSignatures || ns.timeSignatures.length === 0) {
        midi.header.timeSignatures.push({
            ticks: 0,
            timeSignature: [
                4,
                4
            ]
        });
    } else {
        for (const ts of ns.timeSignatures){
            midi.header.timeSignatures.push({
                ticks: midi.header.secondsToTicks(ts.time),
                timeSignature: [
                    ts.numerator,
                    ts.denominator
                ]
            });
        }
    }
    midi.header.update();
    const tracks = new Map();
    for (const note of ns.notes){
        const instrument = note.instrument ? note.instrument : 0;
        const program = note.program === undefined ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_PROGRAM"] : note.program;
        const isDrum = !!note.isDrum;
        const key = JSON.stringify([
            instrument,
            program,
            isDrum
        ]);
        if (!tracks.has(key)) {
            tracks.set(key, {
                notes: [],
                controlChanges: []
            });
        }
        tracks.get(key).notes.push(note);
    }
    for (const controlChange of ns.controlChanges){
        const instrument = controlChange.instrument ? controlChange.instrument : 0;
        const program = controlChange.program === undefined ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_PROGRAM"] : controlChange.program;
        const isDrum = !!controlChange.isDrum;
        const key = JSON.stringify([
            instrument,
            program,
            isDrum
        ]);
        if (!tracks.has(key)) {
            tracks.set(key, {
                notes: [],
                controlChanges: []
            });
        }
        tracks.get(key).controlChanges.push(controlChange);
    }
    tracks.forEach((trackData, key)=>{
        const [program, isDrum] = JSON.parse(key).slice(1);
        const track = midi.addTrack();
        if (isDrum) {
            track.channel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DRUM_CHANNEL"];
        } else {
            track.channel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NON_DRUM_CHANNELS"][(midi.tracks.length - 1) % __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NON_DRUM_CHANNELS"].length];
        }
        track.instrument.number = program;
        for (const note of trackData.notes){
            const velocity = note.velocity === undefined ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_VELOCITY"] : note.velocity;
            track.addNote({
                midi: note.pitch,
                time: note.startTime,
                duration: note.endTime - note.startTime,
                velocity: (velocity + 1) / __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MIDI_VELOCITIES"]
            });
        }
        for (const controlChange of trackData.controlChanges){
            track.addCC({
                number: controlChange.controlNumber,
                value: controlChange.controlValue,
                time: controlChange.time
            });
        }
    });
    return midi.toArray();
}
function urlToBlob(url) {
    return new Promise((resolve, reject)=>{
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fetch"])(url).then((response)=>{
            return response.blob();
        }).then((blob)=>{
            resolve(blob);
        }).catch((error)=>reject(error));
    });
}
function blobToNoteSequence(blob) {
    return new Promise((resolve, reject)=>{
        const reader = new FileReader();
        reader.onload = (e)=>{
            try {
                const ns = midiToSequenceProto(reader.result);
                resolve(ns);
            } catch (error) {
                reject(error);
            }
        };
        reader.onerror = (e)=>reject(e);
        reader.readAsArrayBuffer(blob);
    });
}
function urlToNoteSequence(url) {
    return urlToBlob(url).then(blobToNoteSequence);
} //# sourceMappingURL=midi_io.js.map
}}),
"[project]/node_modules/@magenta/music/esm/core/soundfont.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Instrument": (()=>Instrument),
    "SoundFont": (()=>SoundFont)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/tone/build/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$core$2f$context$2f$ToneAudioBuffers$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tone/build/esm/core/context/ToneAudioBuffers.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/tone/build/esm/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$source$2f$buffer$2f$ToneBufferSource$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tone/build/esm/source/buffer/ToneBufferSource.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/compat/global.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/compat/global.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/logging.js [app-client] (ecmascript)");
;
;
;
;
class Instrument {
    constructor(baseURL){
        this.FADE_SECONDS = 0.1;
        this.baseURL = baseURL;
        this.buffers = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$core$2f$context$2f$ToneAudioBuffers$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ToneAudioBuffers"]();
        this.sourceMap = new Map();
        this.initialized = false;
    }
    async initialize() {
        await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fetch"])(`${this.baseURL}/instrument.json`).then((response)=>response.json()).then((spec)=>{
            this.name = spec.name;
            this.minPitch = spec.minPitch;
            this.maxPitch = spec.maxPitch;
            this.durationSeconds = spec.durationSeconds;
            this.releaseSeconds = spec.releaseSeconds;
            this.percussive = spec.percussive;
            this.velocities = spec.velocities;
            this.initialized = true;
        });
    }
    sampleInfoToName(sampleInfo) {
        if (this.velocities) {
            return `p${sampleInfo.pitch}_v${sampleInfo.velocity}`;
        } else {
            return `p${sampleInfo.pitch}`;
        }
    }
    sampleNameToURL(name) {
        return `${this.baseURL}/${name}.mp3`;
    }
    nearestVelocity(velocity) {
        if (!this.velocities) {
            return velocity;
        }
        if (!velocity) {
            velocity = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_VELOCITY"];
        }
        let bestVelocity = undefined;
        let bestDistance = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MIDI_VELOCITIES"];
        this.velocities.forEach((v)=>{
            const d = Math.abs(v - velocity);
            if (d < bestDistance) {
                bestVelocity = v;
                bestDistance = d;
            }
        });
        return bestVelocity;
    }
    async loadSamples(samples) {
        if (!this.initialized) {
            await this.initialize();
        }
        const nearestSampleNames = samples.filter((info)=>{
            if (info.pitch < this.minPitch || info.pitch > this.maxPitch) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])(`Pitch ${info.pitch} is outside the valid range for ${this.name}, ignoring.`, 'SoundFont');
                return false;
            } else {
                return true;
            }
        }).map((info)=>this.sampleInfoToName({
                pitch: info.pitch,
                velocity: this.nearestVelocity(info.velocity)
            }));
        const uniqueSampleNames = Array.from(new Set(nearestSampleNames)).filter((name)=>!this.buffers.has(name));
        const sampleNamesAndURLs = uniqueSampleNames.map((name)=>({
                name,
                url: this.sampleNameToURL(name)
            }));
        if (sampleNamesAndURLs.length > 0) {
            sampleNamesAndURLs.forEach((nameAndURL)=>this.buffers.add(nameAndURL.name, nameAndURL.url));
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["loaded"])();
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])(`Loaded samples for ${this.name}.`, 'SoundFont');
        }
    }
    playNote(pitch, velocity, startTime, duration, output) {
        const buffer = this.getBuffer(pitch, velocity);
        if (!buffer) {
            return;
        }
        if (duration > this.durationSeconds) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])(`Requested note duration longer than sample duration: ${duration} > ${this.durationSeconds}`, 'SoundFont');
        }
        const source = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$source$2f$buffer$2f$ToneBufferSource$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ToneBufferSource"]({
            url: buffer,
            fadeOut: this.FADE_SECONDS
        }).connect(output);
        source.start(startTime, 0, undefined, 1);
        if (!this.percussive && duration < this.durationSeconds) {
            const releaseSource = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$source$2f$buffer$2f$ToneBufferSource$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ToneBufferSource"]({
                url: buffer,
                fadeOut: this.FADE_SECONDS
            }).connect(output);
            source.stop(startTime + duration + this.FADE_SECONDS);
            releaseSource.start(startTime + duration, this.durationSeconds, undefined, 1);
        }
    }
    playNoteDown(pitch, velocity, output) {
        const buffer = this.getBuffer(pitch, velocity);
        if (!buffer) {
            return;
        }
        const source = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$source$2f$buffer$2f$ToneBufferSource$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ToneBufferSource"](buffer).connect(output);
        source.start(0, 0, undefined, 1);
        if (this.sourceMap.has(pitch)) {
            this.sourceMap.get(pitch).stop((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["now"])() + this.FADE_SECONDS, this.FADE_SECONDS);
        }
        this.sourceMap.set(pitch, source);
    }
    playNoteUp(pitch, velocity, output) {
        if (!this.sourceMap.has(pitch)) {
            return;
        }
        const buffer = this.getBuffer(pitch, velocity);
        if (!buffer) {
            return;
        }
        const releaseSource = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$source$2f$buffer$2f$ToneBufferSource$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ToneBufferSource"]({
            url: buffer,
            fadeOut: this.FADE_SECONDS
        }).connect(output);
        releaseSource.start(0, this.durationSeconds, undefined, 1);
        this.sourceMap.get(pitch).stop((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["now"])() + this.FADE_SECONDS, this.FADE_SECONDS);
        this.sourceMap.delete(pitch);
    }
    getBuffer(pitch, velocity) {
        if (!this.initialized) {
            throw new Error('Instrument is not initialized.');
        }
        if (pitch < this.minPitch || pitch > this.maxPitch) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])(`Pitch ${pitch} is outside the valid range for ${this.name} (${this.minPitch}-${this.maxPitch})`, 'SoundFont');
            return;
        }
        const name = this.sampleInfoToName({
            pitch,
            velocity: this.nearestVelocity(velocity)
        });
        if (!this.buffers.has(name)) {
            throw new Error(`Buffer not found for ${this.name}: ${name}`);
        }
        const buffer = this.buffers.get(name);
        if (!buffer.loaded) {
            throw new Error(`Buffer not loaded for ${this.name}: ${name}`);
        }
        return buffer;
    }
}
class SoundFont {
    constructor(baseURL){
        this.baseURL = baseURL;
        this.instruments = new Map();
        this.initialized = false;
    }
    async initialize() {
        await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fetch"])(`${this.baseURL}/soundfont.json`).then((response)=>response.json()).then((spec)=>{
            this.name = spec.name;
            for(const program in spec.instruments){
                const url = `${this.baseURL}/${spec.instruments[program]}`;
                this.instruments.set(program === 'drums' ? 'drums' : +program, new Instrument(url));
            }
            this.initialized = true;
        });
    }
    async loadSamples(samples) {
        if (!this.initialized) {
            await this.initialize();
        }
        const instrumentSamples = new Map();
        samples.forEach((info)=>{
            info.isDrum = info.isDrum || false;
            info.program = info.program || 0;
            const instrument = info.isDrum ? 'drums' : info.program;
            const sampleInfo = {
                pitch: info.pitch,
                velocity: info.velocity
            };
            if (!instrumentSamples.has(instrument)) {
                if (!this.instruments.has(instrument)) {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])(`No instrument in ${this.name} for: program=${info.program}, isDrum=${info.isDrum}`, 'SoundFont');
                } else {
                    instrumentSamples.set(instrument, [
                        sampleInfo
                    ]);
                }
            } else {
                instrumentSamples.get(instrument).push(sampleInfo);
            }
        });
        await Promise.all(Array.from(instrumentSamples.keys()).map((info)=>this.instruments.get(info).loadSamples(instrumentSamples.get(info))));
    }
    playNote(pitch, velocity, startTime, duration, program = 0, isDrum = false, output) {
        const instrument = isDrum ? 'drums' : program;
        if (!this.initialized) {
            throw new Error('SoundFont is not initialized.');
        }
        if (!this.instruments.has(instrument)) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])(`No instrument in ${this.name} for: program=${program}, isDrum=${isDrum}`, 'SoundFont');
            return;
        }
        this.instruments.get(instrument).playNote(pitch, velocity, startTime, duration, output);
    }
    playNoteDown(pitch, velocity, program = 0, isDrum = false, output) {
        const instrument = isDrum ? 'drums' : program;
        if (!this.initialized) {
            throw new Error('SoundFont is not initialized.');
        }
        if (!this.instruments.has(instrument)) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])(`No instrument in ${this.name} for: program=${program}, isDrum=${isDrum}`, 'SoundFont');
            return;
        }
        this.instruments.get(instrument).playNoteDown(pitch, velocity, output);
    }
    playNoteUp(pitch, velocity, program = 0, isDrum = false, output) {
        const instrument = isDrum ? 'drums' : program;
        if (!this.initialized) {
            throw new Error('SoundFont is not initialized.');
        }
        if (!this.instruments.has(instrument)) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])(`No instrument in ${this.name} for: program=${program}, isDrum=${isDrum}`, 'SoundFont');
            return;
        }
        this.instruments.get(instrument).playNoteUp(pitch, velocity, output);
    }
} //# sourceMappingURL=soundfont.js.map
}}),
"[project]/node_modules/@magenta/music/esm/core/player.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BasePlayer": (()=>BasePlayer),
    "BasePlayerCallback": (()=>BasePlayerCallback),
    "MIDIPlayer": (()=>MIDIPlayer),
    "Player": (()=>Player),
    "PlayerWithClick": (()=>PlayerWithClick),
    "SoundFontPlayer": (()=>SoundFontPlayer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/tone/build/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tone/build/esm/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/compat/global.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/compat/global.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/protobuf/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$soundfont$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/soundfont.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/sequences.js [app-client] (ecmascript)");
;
;
;
;
;
;
function compareQuantizedNotes(a, b) {
    if (a.quantizedStartStep < b.quantizedStartStep) {
        return -1;
    }
    if (a.quantizedStartStep > b.quantizedStartStep) {
        return 1;
    }
    if (a.pitch < b.pitch) {
        return -1;
    }
    return 1;
}
class BasePlayerCallback {
}
class BasePlayer {
    constructor(playClick = false, callbackObject){
        this.playClick = playClick;
        this.callbackObject = callbackObject;
        this.desiredQPM = undefined;
    }
    setTempo(qpm) {
        this.desiredQPM = qpm;
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Transport.state === 'started') {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Transport.bpm.value = qpm;
        }
    }
    makeClickSequence(seq) {
        const clickSeq = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clone"])(seq);
        const sixteenthEnds = clickSeq.notes.map((n)=>n.quantizedEndStep);
        const lastSixteenth = Math.max(...sixteenthEnds);
        for(let i = 0; i < lastSixteenth; i += 4){
            const click = {
                pitch: i % 16 === 0 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LO_CLICK_PITCH"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["HI_CLICK_PITCH"],
                quantizedStartStep: i,
                isDrum: true,
                quantizedEndStep: i + 1
            };
            clickSeq.notes.push(click);
        }
        clickSeq.notes.sort(compareQuantizedNotes);
        return clickSeq;
    }
    resumeContext() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.context.resume();
    }
    start(seq, qpm, offset = 0) {
        if (this.getPlayState() === 'started') {
            throw new Error('Cannot start playback; player is already playing.');
        } else if (this.getPlayState() === 'paused') {
            throw new Error('Cannot `start()` a paused player; use `resume()`.');
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Transport.state !== 'stopped') {
            throw new Error('Cannot start playback while `Tone.Transport` is in use.');
        }
        this.resumeContext();
        const isQuantized = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isQuantizedSequence"])(seq);
        if (this.playClick && isQuantized) {
            seq = this.makeClickSequence(seq);
        }
        if (qpm) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Transport.bpm.value = qpm;
        } else if (seq.tempos && seq.tempos.length > 0 && seq.tempos[0].qpm > 0) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Transport.bpm.value = seq.tempos[0].qpm;
        } else {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Transport.bpm.value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_QUARTERS_PER_MINUTE"];
        }
        if (isQuantized) {
            seq = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["unquantizeSequence"])(seq, qpm);
        } else if (qpm) {
            throw new Error('Cannot specify a `qpm` for a non-quantized sequence.');
        }
        const thisPart = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Part((t, n)=>{
            if (this.currentPart !== thisPart) {
                return;
            }
            this.playNote(t, n);
            if (this.callbackObject) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Draw.schedule(()=>{
                    this.callbackObject.run(n, t);
                }, t);
            }
        }, seq.notes.map((n)=>[
                n.startTime,
                n
            ]));
        this.currentPart = thisPart;
        if (this.desiredQPM) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Transport.bpm.value = this.desiredQPM;
        }
        this.currentPart.start(undefined, offset);
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Transport.state !== 'started') {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Transport.start();
        }
        return new Promise((resolve)=>{
            this.scheduledStop = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Transport.schedule(()=>{
                this.stop();
                resolve();
                if (this.callbackObject) {
                    this.callbackObject.stop();
                }
            }, `+${seq.totalTime}`);
        });
    }
    stop() {
        if (this.isPlaying()) {
            this.currentPart.stop();
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Transport.stop();
            this.currentPart = null;
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Transport.clear(this.scheduledStop);
        this.scheduledStop = undefined;
        this.desiredQPM = undefined;
    }
    pause() {
        if (!this.isPlaying()) {
            throw new Error('Cannot pause playback while the player is stopped.');
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Transport.pause();
    }
    resume() {
        if (this.getPlayState() !== 'paused') {
            throw new Error(`Cannot resume playback while "${this.getPlayState()}".`);
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Transport.start();
    }
    seekTo(seconds) {
        if (!this.isPlaying()) {
            throw new Error('Cannot seek while the player is stopped.');
        }
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Transport.seconds = seconds;
    }
    isPlaying() {
        return !!this.currentPart;
    }
    getPlayState() {
        return this.isPlaying() ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Transport.state : 'stopped';
    }
}
class DrumKit {
    constructor(){
        this.DRUM_PITCH_TO_CLASS = new Map();
        this.kick = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.MembraneSynth().toDestination();
        this.tomLow = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.MembraneSynth({
            pitchDecay: 0.008,
            envelope: {
                attack: 0.01,
                decay: 0.5,
                sustain: 0
            }
        }).toDestination();
        this.tomMid = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.MembraneSynth({
            pitchDecay: 0.008,
            envelope: {
                attack: 0.01,
                decay: 0.5,
                sustain: 0
            }
        }).toDestination();
        this.tomHigh = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.MembraneSynth({
            pitchDecay: 0.008,
            envelope: {
                attack: 0.01,
                decay: 0.5,
                sustain: 0
            }
        }).toDestination();
        this.closedHihat = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.MetalSynth({
            frequency: 400,
            envelope: {
                attack: 0.001,
                decay: 0.1,
                release: 0.8
            },
            harmonicity: 5.1,
            modulationIndex: 32,
            resonance: 4000,
            octaves: 1
        }).toDestination();
        this.openHihat = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.MetalSynth({
            frequency: 400,
            envelope: {
                attack: 0.001,
                decay: 0.5,
                release: 0.8,
                sustain: 1
            },
            harmonicity: 5.1,
            modulationIndex: 32,
            resonance: 4000,
            octaves: 1
        }).toDestination();
        this.ride = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.MetalSynth().toDestination();
        this.crash = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.MetalSynth({
            frequency: 300,
            envelope: {
                attack: 0.001,
                decay: 1,
                release: 3
            },
            harmonicity: 5.1,
            modulationIndex: 64,
            resonance: 4000,
            octaves: 1.5
        }).toDestination();
        this.snare = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.NoiseSynth({
            noise: {
                type: 'white'
            },
            envelope: {
                attack: 0.005,
                decay: 0.05,
                sustain: 0.1,
                release: 0.4
            }
        }).toDestination();
        this.loClick = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.MembraneSynth({
            pitchDecay: 0.008,
            envelope: {
                attack: 0.001,
                decay: 0.3,
                sustain: 0
            }
        }).toDestination();
        this.hiClick = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.MembraneSynth({
            pitchDecay: 0.008,
            envelope: {
                attack: 0.001,
                decay: 0.3,
                sustain: 0
            }
        }).toDestination();
        this.pitchPlayers = [
            (time, velocity = 1)=>this.kick.triggerAttackRelease('C2', '8n', time, velocity),
            (time, velocity = 1)=>this.snare.triggerAttackRelease('16n', time, velocity),
            (time, velocity = 1)=>this.closedHihat.triggerAttack(time, 0.3, velocity),
            (time, velocity = 1)=>this.openHihat.triggerAttack(time, 0.3, velocity),
            (time, velocity = 0.5)=>this.tomLow.triggerAttack('G3', time, velocity),
            (time, velocity = 0.5)=>this.tomMid.triggerAttack('C4', time, velocity),
            (time, velocity = 0.5)=>this.tomHigh.triggerAttack('F4', time, velocity),
            (time, velocity = 1)=>this.crash.triggerAttack(time, 1.0, velocity),
            (time, velocity = 1)=>this.ride.triggerAttack(time, 0.5, velocity),
            (time, velocity = 0.5)=>this.loClick.triggerAttack('G5', time, velocity),
            (time, velocity = 0.5)=>this.hiClick.triggerAttack('C6', time, velocity)
        ];
        for(let c = 0; c < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_DRUM_PITCH_CLASSES"].length; ++c){
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_DRUM_PITCH_CLASSES"][c].forEach((p)=>{
                this.DRUM_PITCH_TO_CLASS.set(p, c);
            });
        }
        this.DRUM_PITCH_TO_CLASS.set(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LO_CLICK_PITCH"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LO_CLICK_CLASS"]);
        this.DRUM_PITCH_TO_CLASS.set(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["HI_CLICK_PITCH"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["HI_CLICK_CLASS"]);
    }
    static getInstance() {
        if (!DrumKit.instance) {
            DrumKit.instance = new DrumKit();
        }
        return DrumKit.instance;
    }
    playNote(pitch, time, velocity) {
        this.pitchPlayers[this.DRUM_PITCH_TO_CLASS.get(pitch)](time, velocity);
    }
}
class Player extends BasePlayer {
    constructor(){
        super(...arguments);
        this.drumKit = DrumKit.getInstance();
        this.bassSynth = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Synth({
            volume: 5,
            oscillator: {
                type: 'triangle'
            }
        }).toDestination();
        this.polySynth = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.PolySynth().toDestination();
    }
    playNote(time, note) {
        const velocity = note.hasOwnProperty('velocity') ? note.velocity / __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MAX_MIDI_VELOCITY"] : undefined;
        if (note.isDrum) {
            this.drumKit.playNote(note.pitch, time, velocity);
        } else {
            const freq = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Frequency(note.pitch, 'midi').toFrequency();
            const dur = note.endTime - note.startTime;
            this.getSynth(note.instrument, note.program).triggerAttackRelease(freq, dur, time, velocity);
        }
    }
    getSynth(instrument, program) {
        if (program !== undefined && program >= 32 && program <= 39) {
            return this.bassSynth;
        } else {
            return this.polySynth;
        }
    }
}
Player.tone = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__;
class SoundFontPlayer extends BasePlayer {
    constructor(soundFontURL, output = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.Master, programOutputs, drumOutputs, callbackObject){
        super(false, callbackObject);
        this.soundFont = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$soundfont$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SoundFont"](soundFontURL);
        this.output = output;
        this.programOutputs = programOutputs;
        this.drumOutputs = drumOutputs;
    }
    async loadSamples(seq) {
        await this.soundFont.loadSamples(seq.notes.map((note)=>({
                pitch: note.pitch,
                velocity: note.velocity,
                program: note.program || 0,
                isDrum: note.isDrum || false
            })));
    }
    async loadAllSamples(program = 0, isDrum = false) {
        const ns = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].create();
        const min = isDrum ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MIN_DRUM_PITCH"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MIN_PIANO_PITCH"];
        const max = isDrum ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MAX_DRUM_PITCH"] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MAX_PIANO_PITCH"];
        for(let i = min; i <= max; i++){
            for(let j = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MIN_MIDI_VELOCITY"]; j < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MAX_MIDI_VELOCITY"]; j++){
                ns.notes.push({
                    pitch: i,
                    velocity: j,
                    program,
                    isDrum
                });
            }
        }
        return this.loadSamples(ns);
    }
    resumeContext() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.context.resume();
    }
    start(seq, qpm, offset = 0) {
        this.resumeContext();
        return this.loadSamples(seq).then(()=>super.start(seq, qpm, offset));
    }
    playNote(time, note) {
        this.soundFont.playNote(note.pitch, note.velocity, time, note.endTime - note.startTime, note.program, note.isDrum, this.getAudioNodeOutput(note));
    }
    playNoteDown(note) {
        this.soundFont.playNoteDown(note.pitch, note.velocity, note.program, note.isDrum, this.getAudioNodeOutput(note));
    }
    playNoteUp(note) {
        this.soundFont.playNoteUp(note.pitch, note.velocity, note.program, note.isDrum, this.getAudioNodeOutput(note));
    }
    getAudioNodeOutput(note) {
        let output = this.output;
        if (this.programOutputs && !note.isDrum) {
            if (this.programOutputs.has(note.program)) {
                output = this.programOutputs.get(note.program);
            }
        } else if (this.drumOutputs && note.isDrum) {
            if (this.drumOutputs.has(note.pitch)) {
                output = this.drumOutputs.get(note.pitch);
            }
        }
        return output;
    }
}
class PlayerWithClick extends Player {
    constructor(callbackObject){
        super(true, callbackObject);
    }
}
class MIDIPlayer extends BasePlayer {
    constructor(callbackObject){
        super(false, callbackObject);
        this.outputs = [];
        this.outputChannel = 0;
        this.availableOutputs = [];
        this.NOTE_ON = 0x90;
        this.NOTE_OFF = 0x80;
    }
    async requestMIDIAccess() {
        if (navigator.requestMIDIAccess) {
            return new Promise((resolve, reject)=>{
                navigator.requestMIDIAccess().then((midi)=>{
                    midi.addEventListener('statechange', (event)=>this.initOutputs(midi));
                    resolve(this.initOutputs(midi));
                }, (err)=>console.log('Something went wrong', reject(err)));
            });
        } else {
            return null;
        }
    }
    initOutputs(midi) {
        const outputs = midi.outputs.values();
        for(let output = outputs.next(); output && !output.done; output = outputs.next()){
            this.availableOutputs.push(output.value);
        }
        return this.availableOutputs;
    }
    playNote(time, note) {
        const velocity = note.velocity || 100;
        const length = (note.endTime - note.startTime) * 1000;
        const msgOn = [
            this.NOTE_ON + this.outputChannel,
            note.pitch,
            velocity
        ];
        const msgOff = [
            this.NOTE_OFF + this.outputChannel,
            note.pitch,
            velocity
        ];
        const outputs = this.outputs ? this.outputs : this.availableOutputs;
        for(let i = 0; i < outputs.length; i++){
            this.sendMessageToOutput(outputs[i], msgOn);
            this.sendMessageToOutput(outputs[i], msgOff, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["performance"].now() + length);
        }
    }
    sendMessageToOutput(output, message, time) {
        if (output) {
            output.send(message, time);
        }
    }
    playNoteDown(note) {
        const msgOn = [
            this.NOTE_ON,
            note.pitch,
            note.velocity
        ];
        const outputs = this.outputs ? this.outputs : this.availableOutputs;
        for(let i = 0; i < outputs.length; i++){
            this.sendMessageToOutput(outputs[i], msgOn);
        }
    }
    playNoteUp(note) {
        const msgOff = [
            this.NOTE_OFF,
            note.pitch,
            note.velocity
        ];
        const outputs = this.outputs ? this.outputs : this.availableOutputs;
        for(let i = 0; i < outputs.length; i++){
            this.sendMessageToOutput(outputs[i], msgOff, note.endTime - note.startTime);
        }
    }
} //# sourceMappingURL=player.js.map
}}),
"[project]/node_modules/@magenta/music/esm/core/recorder.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BaseRecorderCallback": (()=>BaseRecorderCallback),
    "Recorder": (()=>Recorder)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/tone/build/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$instrument$2f$MembraneSynth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tone/build/esm/instrument/MembraneSynth.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/tone/build/esm/index.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$event$2f$Loop$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tone/build/esm/event/Loop.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/compat/global.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/compat/global.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/protobuf/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/logging.js [app-client] (ecmascript)");
;
;
;
;
;
class BaseRecorderCallback {
}
class Recorder {
    constructor(config = {}, callbackObject){
        this.notes = [];
        this.midiInputs = [];
        this.loClick = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$instrument$2f$MembraneSynth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MembraneSynth"]({
            pitchDecay: 0.008,
            envelope: {
                attack: 0.001,
                decay: 0.3,
                sustain: 0
            }
        }).toDestination();
        this.hiClick = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$instrument$2f$MembraneSynth$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MembraneSynth"]({
            pitchDecay: 0.008,
            envelope: {
                attack: 0.001,
                decay: 0.3,
                sustain: 0
            }
        }).toDestination();
        this.config = {
            playClick: config.playClick,
            qpm: config.qpm || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_QUARTERS_PER_MINUTE"],
            playCountIn: config.playCountIn,
            startRecordingAtFirstNote: config.startRecordingAtFirstNote || false
        };
        this.callbackObject = callbackObject;
        this.recording = false;
        this.onNotes = new Map();
    }
    async initialize() {
        await navigator.requestMIDIAccess().then((midi)=>this.midiReady(midi), (err)=>console.log('Something went wrong', err));
    }
    midiReady(midi) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])('Initialized Recorder', 'Recorder');
        const inputs = midi.inputs.values();
        for(let input = inputs.next(); input && !input.done; input = inputs.next()){
            this.midiInputs.push(input.value);
        }
    }
    isRecording() {
        return this.recording;
    }
    setTempo(qpm) {
        this.config.qpm = qpm;
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Transport"].state === 'started') {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Transport"].bpm.value = qpm;
        }
    }
    enablePlayClick(playClick) {
        this.config.playClick = playClick;
    }
    enablePlayCountIn(countIn) {
        this.config.playCountIn = countIn;
    }
    initClickLoop() {
        let clickStep = 0;
        this.clickLoop = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$event$2f$Loop$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Loop"]((time)=>{
            if (clickStep % 4 === 0) {
                this.loClick.triggerAttack('G5', time);
            } else {
                this.hiClick.triggerAttack('C6', time);
            }
            clickStep++;
            if (this.config.playCountIn && clickStep === 4) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Transport"].stop();
                this.clickLoop.stop();
            }
        }, '4n');
    }
    getMIDIInputs() {
        return this.midiInputs;
    }
    start(midiInputs) {
        const list = midiInputs ? midiInputs : this.midiInputs;
        for (const input of list){
            input.onmidimessage = (event)=>{
                this.midiMessageReceived(event);
            };
        }
        if (this.config.playClick || this.config.playCountIn) {
            this.initClickLoop();
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Transport"].bpm.value = this.config.qpm;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Transport"].start();
            this.clickLoop.start();
        } else {
            this.clickLoop = null;
        }
        this.recording = true;
        this.firstNoteTimestamp = undefined;
        this.notes = [];
        this.onNotes = new Map();
        if (!this.startRecordingAtFirstNote) {
            const timeStamp = Date.now();
            this.firstNoteTimestamp = timeStamp;
        }
    }
    stop() {
        this.recording = false;
        const timeStamp = Date.now();
        this.onNotes.forEach((pitch, note)=>{
            this.noteOff(note, timeStamp);
        });
        for (const input of this.midiInputs){
            input.onmidimessage = null;
        }
        if (this.clickLoop) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tone$2f$build$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Transport"].stop();
            this.clickLoop.stop();
        }
        if (this.notes.length === 0) {
            return null;
        }
        return this.getNoteSequence();
    }
    getNoteSequence() {
        if (this.notes.length === 0) {
            return null;
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].create({
            notes: this.notes,
            totalTime: this.notes[this.notes.length - 1].endTime
        });
    }
    reset() {
        const noteSequence = this.stop();
        this.firstNoteTimestamp = undefined;
        this.notes = [];
        this.onNotes = new Map();
        return noteSequence;
    }
    midiMessageReceived(event) {
        if (!this.recording) {
            return;
        }
        let timeStampOffset;
        if (event.timeStamp !== undefined && event.timeStamp !== 0) {
            timeStampOffset = event.timeStamp;
        } else {
            timeStampOffset = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["performance"].now();
        }
        const timeStamp = timeStampOffset + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["performance"].timing.navigationStart;
        if (this.firstNoteTimestamp === undefined) {
            this.firstNoteTimestamp = timeStamp;
        }
        const NOTE_ON = 9;
        const NOTE_OFF = 8;
        const cmd = event.data[0] >> 4;
        const pitch = event.data[1];
        const velocity = event.data.length > 2 ? event.data[2] : 1;
        const device = event.srcElement;
        if (cmd === NOTE_OFF || cmd === NOTE_ON && velocity === 0) {
            if (this.callbackObject && this.callbackObject.noteOff) {
                this.callbackObject.noteOff(pitch, velocity, device);
            }
            this.noteOff(pitch, timeStamp);
            if (this.callbackObject && this.callbackObject.run) {
                this.callbackObject.run(this.getNoteSequence());
            }
        } else if (cmd === NOTE_ON) {
            if (this.callbackObject && this.callbackObject.noteOn) {
                this.callbackObject.noteOn(pitch, velocity, device);
            }
            this.noteOn(pitch, velocity, timeStamp);
        }
    }
    noteOn(pitch, velocity, timeStamp) {
        const MILLIS_PER_SECOND = 1000;
        const note = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$protobuf$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoteSequence"].Note();
        note.pitch = pitch;
        note.startTime = (timeStamp - this.firstNoteTimestamp) / MILLIS_PER_SECOND;
        note.velocity = velocity;
        this.onNotes.set(pitch, note);
    }
    noteOff(pitch, timeStamp) {
        const MILLIS_PER_SECOND = 1000;
        const note = this.onNotes.get(pitch);
        if (note) {
            note.endTime = (timeStamp - this.firstNoteTimestamp) / MILLIS_PER_SECOND;
            this.notes.push(note);
        }
        this.onNotes.delete(pitch);
    }
} //# sourceMappingURL=recorder.js.map
}}),
"[project]/node_modules/@magenta/music/esm/core/visualizer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BaseSVGVisualizer": (()=>BaseSVGVisualizer),
    "BaseVisualizer": (()=>BaseVisualizer),
    "PianoRollCanvasVisualizer": (()=>PianoRollCanvasVisualizer),
    "PianoRollSVGVisualizer": (()=>PianoRollSVGVisualizer),
    "ScrollType": (()=>ScrollType),
    "StaffSVGVisualizer": (()=>StaffSVGVisualizer),
    "Visualizer": (()=>Visualizer),
    "WaterfallSVGVisualizer": (()=>WaterfallSVGVisualizer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$staffrender$2f$es6$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/staffrender/es6/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/logging.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/sequences.js [app-client] (ecmascript)");
;
;
;
;
const MIN_NOTE_LENGTH = 1;
class BaseVisualizer {
    constructor(sequence, config = {}){
        const isQuantized = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isQuantizedSequence"])(sequence);
        const qpm = sequence.tempos && sequence.tempos.length > 0 ? sequence.tempos[0].qpm : undefined;
        this.noteSequence = isQuantized ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["unquantizeSequence"])(sequence, qpm) : sequence;
        const defaultPixelsPerTimeStep = 30;
        this.config = {
            noteHeight: config.noteHeight || 6,
            noteSpacing: config.noteSpacing || 1,
            pixelsPerTimeStep: config.pixelsPerTimeStep || defaultPixelsPerTimeStep,
            noteRGB: config.noteRGB || '8, 41, 64',
            activeNoteRGB: config.activeNoteRGB || '240, 84, 119',
            minPitch: config.minPitch,
            maxPitch: config.maxPitch
        };
        const size = this.getSize();
        this.width = size.width;
        this.height = size.height;
    }
    updateMinMaxPitches(noExtraPadding = false) {
        if (this.config.minPitch && this.config.maxPitch) {
            return;
        }
        if (this.config.minPitch === undefined) {
            this.config.minPitch = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MAX_MIDI_PITCH"];
        }
        if (this.config.maxPitch === undefined) {
            this.config.maxPitch = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MIN_MIDI_PITCH"];
        }
        for (const note of this.noteSequence.notes){
            this.config.minPitch = Math.min(note.pitch, this.config.minPitch);
            this.config.maxPitch = Math.max(note.pitch, this.config.maxPitch);
        }
        if (!noExtraPadding) {
            this.config.minPitch -= 2;
            this.config.maxPitch += 2;
        }
    }
    getSize() {
        this.updateMinMaxPitches();
        const height = (this.config.maxPitch - this.config.minPitch) * this.config.noteHeight;
        const endTime = this.noteSequence.totalTime;
        if (!endTime) {
            throw new Error('The sequence you are using with the visualizer does not have a ' + 'totalQuantizedSteps or totalTime ' + 'field set, so the visualizer can\'t be horizontally ' + 'sized correctly.');
        }
        const width = endTime * this.config.pixelsPerTimeStep;
        return {
            width,
            height
        };
    }
    getNotePosition(note, noteIndex) {
        const duration = this.getNoteEndTime(note) - this.getNoteStartTime(note);
        const x = this.getNoteStartTime(note) * this.config.pixelsPerTimeStep;
        const w = Math.max(this.config.pixelsPerTimeStep * duration - this.config.noteSpacing, MIN_NOTE_LENGTH);
        const y = this.height - (note.pitch - this.config.minPitch) * this.config.noteHeight;
        return {
            x,
            y,
            w,
            h: this.config.noteHeight
        };
    }
    scrollIntoViewIfNeeded(scrollIntoView, activeNotePosition) {
        if (scrollIntoView && this.parentElement) {
            const containerWidth = this.parentElement.getBoundingClientRect().width;
            if (activeNotePosition > this.parentElement.scrollLeft + containerWidth) {
                this.parentElement.scrollLeft = activeNotePosition - 20;
            }
        }
    }
    getNoteStartTime(note) {
        return Math.round(note.startTime * 100000000) / 100000000;
    }
    getNoteEndTime(note) {
        return Math.round(note.endTime * 100000000) / 100000000;
    }
    isPaintingActiveNote(note, playedNote) {
        const isPlayedNote = this.getNoteStartTime(note) === this.getNoteStartTime(playedNote);
        const heldDownDuringPlayedNote = this.getNoteStartTime(note) <= this.getNoteStartTime(playedNote) && this.getNoteEndTime(note) >= this.getNoteEndTime(playedNote);
        return isPlayedNote || heldDownDuringPlayedNote;
    }
}
class PianoRollCanvasVisualizer extends BaseVisualizer {
    constructor(sequence, canvas, config = {}){
        super(sequence, config);
        this.ctx = canvas.getContext('2d');
        this.parentElement = canvas.parentElement;
        const dpr = window.devicePixelRatio || 1;
        if (this.ctx) {
            this.ctx.canvas.width = dpr * this.width;
            this.ctx.canvas.height = dpr * this.height;
            canvas.style.width = `${this.width}px`;
            canvas.style.height = `${this.height}px`;
            this.ctx.scale(dpr, dpr);
        }
        this.redraw();
    }
    redraw(activeNote, scrollIntoView) {
        this.clear();
        let activeNotePosition;
        for(let i = 0; i < this.noteSequence.notes.length; i++){
            const note = this.noteSequence.notes[i];
            const size = this.getNotePosition(note, i);
            const opacityBaseline = 0.2;
            const opacity = note.velocity ? note.velocity / 100 + opacityBaseline : 1;
            const isActive = activeNote && this.isPaintingActiveNote(note, activeNote);
            const fill = `rgba(${isActive ? this.config.activeNoteRGB : this.config.noteRGB},
  ${opacity})`;
            this.redrawNote(size.x, size.y, size.w, size.h, fill);
            if (isActive && note === activeNote) {
                activeNotePosition = size.x;
            }
        }
        this.scrollIntoViewIfNeeded(scrollIntoView, activeNotePosition);
        return activeNotePosition;
    }
    clear() {
        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
    }
    clearActiveNotes() {
        this.redraw();
    }
    redrawNote(x, y, w, h, fill) {
        this.ctx.fillStyle = fill;
        this.ctx.fillRect(Math.round(x), Math.round(y), Math.round(w), Math.round(h));
    }
}
class Visualizer extends PianoRollCanvasVisualizer {
    constructor(sequence, canvas, config = {}){
        super(sequence, canvas, config);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])('mm.Visualizer is deprecated, and will be removed in a future \
         version. Please use mm.PianoRollCanvasVisualizer instead', 'mm.Visualizer', 5);
    }
}
class BaseSVGVisualizer extends BaseVisualizer {
    constructor(sequence, config = {}){
        super(sequence, config);
        this.drawn = false;
    }
    redraw(activeNote, scrollIntoView) {
        if (!this.drawn) {
            this.draw();
        }
        if (!activeNote) {
            return null;
        }
        this.unfillActiveRect(this.svg);
        let activeNotePosition;
        for(let i = 0; i < this.noteSequence.notes.length; i++){
            const note = this.noteSequence.notes[i];
            const isActive = activeNote && this.isPaintingActiveNote(note, activeNote);
            if (!isActive) {
                continue;
            }
            const el = this.svg.querySelector(`rect[data-index="${i}"]`);
            this.fillActiveRect(el, note);
            if (note === activeNote) {
                activeNotePosition = parseFloat(el.getAttribute('x'));
            }
        }
        this.scrollIntoViewIfNeeded(scrollIntoView, activeNotePosition);
        return activeNotePosition;
    }
    fillActiveRect(el, note) {
        el.setAttribute('fill', this.getNoteFillColor(note, true));
        el.classList.add('active');
    }
    unfillActiveRect(svg) {
        const els = svg.querySelectorAll('rect.active');
        for(let i = 0; i < els.length; ++i){
            const el = els[i];
            const fill = this.getNoteFillColor(this.noteSequence.notes[parseInt(el.getAttribute('data-index'), 10)], false);
            el.setAttribute('fill', fill);
            el.classList.remove('active');
        }
    }
    draw() {
        for(let i = 0; i < this.noteSequence.notes.length; i++){
            const note = this.noteSequence.notes[i];
            const size = this.getNotePosition(note, i);
            const fill = this.getNoteFillColor(note, false);
            const dataAttributes = [
                [
                    'index',
                    i
                ],
                [
                    'instrument',
                    note.instrument
                ],
                [
                    'program',
                    note.program
                ],
                [
                    'isDrum',
                    note.isDrum === true
                ],
                [
                    'pitch',
                    note.pitch
                ]
            ];
            const cssProperties = [
                [
                    '--midi-velocity',
                    String(note.velocity !== undefined ? note.velocity : 127)
                ]
            ];
            this.drawNote(size.x, size.y, size.w, size.h, fill, dataAttributes, cssProperties);
        }
        this.drawn = true;
    }
    getNoteFillColor(note, isActive) {
        const opacityBaseline = 0.2;
        const opacity = note.velocity ? note.velocity / 100 + opacityBaseline : 1;
        const fill = `rgba(${isActive ? this.config.activeNoteRGB : this.config.noteRGB},
  ${opacity})`;
        return fill;
    }
    drawNote(x, y, w, h, fill, dataAttributes, cssProperties) {
        if (!this.svg) {
            return;
        }
        const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        rect.classList.add('note');
        rect.setAttribute('fill', fill);
        rect.setAttribute('x', `${Math.round(x)}`);
        rect.setAttribute('y', `${Math.round(y)}`);
        rect.setAttribute('width', `${Math.round(w)}`);
        rect.setAttribute('height', `${Math.round(h)}`);
        dataAttributes.forEach(([key, value])=>{
            if (value !== undefined) {
                rect.dataset[key] = `${value}`;
            }
        });
        cssProperties.forEach(([key, value])=>{
            rect.style.setProperty(key, value);
        });
        this.svg.appendChild(rect);
    }
    clear() {
        this.svg.innerHTML = '';
        this.drawn = false;
    }
    clearActiveNotes() {
        this.unfillActiveRect(this.svg);
    }
}
class PianoRollSVGVisualizer extends BaseSVGVisualizer {
    constructor(sequence, svg, config = {}){
        super(sequence, config);
        if (!(svg instanceof SVGSVGElement)) {
            throw new Error('This visualizer requires an <svg> element to display the visualization');
        }
        this.svg = svg;
        this.parentElement = svg.parentElement;
        const size = this.getSize();
        this.width = size.width;
        this.height = size.height;
        this.svg.style.width = `${this.width}px`;
        this.svg.style.height = `${this.height}px`;
        this.clear();
        this.draw();
    }
}
class WaterfallSVGVisualizer extends BaseSVGVisualizer {
    constructor(sequence, parentElement, config = {}){
        super(sequence, config);
        this.NOTES_PER_OCTAVE = 12;
        this.WHITE_NOTES_PER_OCTAVE = 7;
        this.LOW_C = 24;
        this.firstDrawnOctave = 0;
        this.lastDrawnOctave = 6;
        if (!(parentElement instanceof HTMLDivElement)) {
            throw new Error('This visualizer requires a <div> element to display the visualization');
        }
        this.config.whiteNoteWidth = config.whiteNoteWidth || 20;
        this.config.blackNoteWidth = config.blackNoteWidth || this.config.whiteNoteWidth * 2 / 3;
        this.config.whiteNoteHeight = config.whiteNoteHeight || 70;
        this.config.blackNoteHeight = config.blackNoteHeight || 2 * 70 / 3;
        this.config.showOnlyOctavesUsed = config.showOnlyOctavesUsed;
        this.setupDOM(parentElement);
        const size = this.getSize();
        this.width = size.width;
        this.height = size.height;
        this.svg.style.width = `${this.width}px`;
        this.svg.style.height = `${this.height}px`;
        this.svgPiano.style.width = `${this.width}px`;
        this.svgPiano.style.height = `${this.config.whiteNoteHeight}px`;
        this.parentElement.style.width = `${this.width + this.config.whiteNoteWidth}px`;
        this.parentElement.scrollTop = this.parentElement.scrollHeight;
        this.clear();
        this.drawPiano();
        this.draw();
    }
    setupDOM(container) {
        this.parentElement = document.createElement('div');
        this.parentElement.classList.add('waterfall-notes-container');
        const height = Math.max(container.getBoundingClientRect().height, 200);
        this.parentElement.style.paddingTop = `${height - this.config.whiteNoteHeight}px`;
        this.parentElement.style.height = `${height - this.config.whiteNoteHeight}px`;
        this.parentElement.style.boxSizing = 'border-box';
        this.parentElement.style.overflowX = 'hidden';
        this.parentElement.style.overflowY = 'auto';
        this.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        this.svgPiano = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        this.svg.classList.add('waterfall-notes');
        this.svgPiano.classList.add('waterfall-piano');
        this.parentElement.appendChild(this.svg);
        container.innerHTML = '';
        container.appendChild(this.parentElement);
        container.appendChild(this.svgPiano);
    }
    redraw(activeNote, scrollIntoView) {
        if (!this.drawn) {
            this.draw();
        }
        if (!activeNote) {
            return null;
        }
        this.clearActiveNotes();
        this.parentElement.style.paddingTop = this.parentElement.style.height;
        for(let i = 0; i < this.noteSequence.notes.length; i++){
            const note = this.noteSequence.notes[i];
            const isActive = activeNote && this.isPaintingActiveNote(note, activeNote);
            if (!isActive) {
                continue;
            }
            const el = this.svg.querySelector(`rect[data-index="${i}"]`);
            this.fillActiveRect(el, note);
            const key = this.svgPiano.querySelector(`rect[data-pitch="${note.pitch}"]`);
            this.fillActiveRect(key, note);
            if (note === activeNote) {
                const y = parseFloat(el.getAttribute('y'));
                const height = parseFloat(el.getAttribute('height'));
                if (y < this.parentElement.scrollTop - height) {
                    this.parentElement.scrollTop = y + height;
                }
                return y;
            }
        }
        return null;
    }
    getSize() {
        this.updateMinMaxPitches(true);
        let whiteNotesDrawn = 52;
        if (this.config.showOnlyOctavesUsed) {
            let foundFirst = false, foundLast = false;
            for(let i = 1; i < 7; i++){
                const c = this.LOW_C + this.NOTES_PER_OCTAVE * i;
                if (!foundFirst && c > this.config.minPitch) {
                    this.firstDrawnOctave = i - 1;
                    foundFirst = true;
                }
                if (!foundLast && c > this.config.maxPitch) {
                    this.lastDrawnOctave = i - 1;
                    foundLast = true;
                }
            }
            whiteNotesDrawn = (this.lastDrawnOctave - this.firstDrawnOctave + 1) * this.WHITE_NOTES_PER_OCTAVE;
        }
        const width = whiteNotesDrawn * this.config.whiteNoteWidth;
        const endTime = this.noteSequence.totalTime;
        if (!endTime) {
            throw new Error('The sequence you are using with the visualizer does not have a ' + 'totalQuantizedSteps or totalTime ' + 'field set, so the visualizer can\'t be horizontally ' + 'sized correctly.');
        }
        const height = Math.max(endTime * this.config.pixelsPerTimeStep, MIN_NOTE_LENGTH);
        return {
            width,
            height
        };
    }
    getNotePosition(note, noteIndex) {
        const rect = this.svgPiano.querySelector(`rect[data-pitch="${note.pitch}"]`);
        if (!rect) {
            return null;
        }
        const len = this.getNoteEndTime(note) - this.getNoteStartTime(note);
        const x = Number(rect.getAttribute('x'));
        const w = Number(rect.getAttribute('width'));
        const h = Math.max(this.config.pixelsPerTimeStep * len - this.config.noteSpacing, MIN_NOTE_LENGTH);
        const y = this.height - this.getNoteStartTime(note) * this.config.pixelsPerTimeStep - h;
        return {
            x,
            y,
            w,
            h
        };
    }
    drawPiano() {
        this.svgPiano.innerHTML = '';
        const blackNoteOffset = this.config.whiteNoteWidth - this.config.blackNoteWidth / 2;
        const blackNoteIndexes = [
            1,
            3,
            6,
            8,
            10
        ];
        let x = 0;
        let currentPitch = 0;
        if (this.config.showOnlyOctavesUsed) {
            currentPitch = this.firstDrawnOctave * this.NOTES_PER_OCTAVE + this.LOW_C;
        } else {
            currentPitch = this.LOW_C - 3;
            this.drawWhiteKey(currentPitch, x);
            this.drawWhiteKey(currentPitch + 2, this.config.whiteNoteWidth);
            currentPitch += 3;
            x = 2 * this.config.whiteNoteWidth;
        }
        for(let o = this.firstDrawnOctave; o <= this.lastDrawnOctave; o++){
            for(let i = 0; i < this.NOTES_PER_OCTAVE; i++){
                if (blackNoteIndexes.indexOf(i) === -1) {
                    this.drawWhiteKey(currentPitch, x);
                    x += this.config.whiteNoteWidth;
                }
                currentPitch++;
            }
        }
        if (this.config.showOnlyOctavesUsed) {
            currentPitch = this.firstDrawnOctave * this.NOTES_PER_OCTAVE + this.LOW_C;
            x = -this.config.whiteNoteWidth;
        } else {
            this.drawWhiteKey(currentPitch, x);
            currentPitch = this.LOW_C - 3;
            this.drawBlackKey(currentPitch + 1, blackNoteOffset);
            currentPitch += 3;
            x = this.config.whiteNoteWidth;
        }
        for(let o = this.firstDrawnOctave; o <= this.lastDrawnOctave; o++){
            for(let i = 0; i < this.NOTES_PER_OCTAVE; i++){
                if (blackNoteIndexes.indexOf(i) !== -1) {
                    this.drawBlackKey(currentPitch, x + blackNoteOffset);
                } else {
                    x += this.config.whiteNoteWidth;
                }
                currentPitch++;
            }
        }
    }
    drawWhiteKey(index, x) {
        const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        rect.dataset.pitch = String(index);
        rect.setAttribute('x', String(x));
        rect.setAttribute('y', '0');
        rect.setAttribute('width', String(this.config.whiteNoteWidth));
        rect.setAttribute('height', String(this.config.whiteNoteHeight));
        rect.setAttribute('fill', 'white');
        rect.setAttribute('original-fill', 'white');
        rect.setAttribute('stroke', 'black');
        rect.setAttribute('stroke-width', '3px');
        rect.classList.add('white');
        this.svgPiano.appendChild(rect);
        return rect;
    }
    drawBlackKey(index, x) {
        const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        rect.dataset.pitch = String(index);
        rect.setAttribute('x', String(x));
        rect.setAttribute('y', '0');
        rect.setAttribute('width', String(this.config.blackNoteWidth));
        rect.setAttribute('height', String(this.config.blackNoteHeight));
        rect.setAttribute('fill', 'black');
        rect.setAttribute('original-fill', 'black');
        rect.setAttribute('stroke', 'black');
        rect.setAttribute('stroke-width', '3px');
        rect.classList.add('black');
        this.svgPiano.appendChild(rect);
        return rect;
    }
    clearActiveNotes() {
        super.unfillActiveRect(this.svg);
        const els = this.svgPiano.querySelectorAll('rect.active');
        for(let i = 0; i < els.length; ++i){
            const el = els[i];
            el.setAttribute('fill', el.getAttribute('original-fill'));
            el.classList.remove('active');
        }
    }
}
var ScrollType;
(function(ScrollType) {
    ScrollType[ScrollType["PAGE"] = 0] = "PAGE";
    ScrollType[ScrollType["NOTE"] = 1] = "NOTE";
    ScrollType[ScrollType["BAR"] = 2] = "BAR";
})(ScrollType || (ScrollType = {}));
class StaffSVGVisualizer extends BaseVisualizer {
    constructor(sequence, div, config = {}){
        super(sequence, config);
        if (config.pixelsPerTimeStep === undefined || config.pixelsPerTimeStep <= 0) {
            this.config.pixelsPerTimeStep = 0;
        }
        this.instruments = config.instruments || [];
        this.render = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$staffrender$2f$es6$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["StaffSVGRender"](this.getScoreInfo(sequence), {
            noteHeight: this.config.noteHeight,
            noteSpacing: this.config.noteSpacing,
            pixelsPerTimeStep: this.config.pixelsPerTimeStep,
            noteRGB: this.config.noteRGB,
            activeNoteRGB: this.config.activeNoteRGB,
            defaultKey: config.defaultKey || 0,
            scrollType: config.scrollType || ScrollType.PAGE
        }, div);
        this.drawnNotes = sequence.notes.length;
        this.clear();
        this.redraw();
    }
    clear() {
        this.render.clear();
    }
    redraw(activeNote, scrollIntoView) {
        if (this.drawnNotes !== this.noteSequence.notes.length) {
            this.render.scoreInfo = this.getScoreInfo(this.noteSequence);
        }
        const activeNoteInfo = activeNote ? this.getNoteInfo(activeNote) : undefined;
        return this.render.redraw(activeNoteInfo, scrollIntoView);
    }
    isNoteInInstruments(note) {
        if (note.instrument === undefined || this.instruments.length === 0) {
            return true;
        } else {
            return this.instruments.indexOf(note.instrument) >= 0;
        }
    }
    timeToQuarters(time) {
        const q = time * this.noteSequence.tempos[0].qpm / 60;
        return Math.round(q * 16) / 16;
    }
    getNoteInfo(note) {
        const startQ = this.timeToQuarters(note.startTime);
        const endQ = this.timeToQuarters(note.endTime);
        return {
            start: startQ,
            length: endQ - startQ,
            pitch: note.pitch,
            intensity: note.velocity
        };
    }
    getScoreInfo(sequence) {
        const notesInfo = [];
        sequence.notes.forEach((note)=>{
            if (this.isNoteInInstruments(note)) {
                notesInfo.push(this.getNoteInfo(note));
            }
        });
        return {
            notes: notesInfo,
            tempos: sequence.tempos ? sequence.tempos.map((t)=>{
                return {
                    start: this.timeToQuarters(t.time),
                    qpm: t.qpm
                };
            }) : [],
            keySignatures: sequence.keySignatures ? sequence.keySignatures.map((ks)=>{
                return {
                    start: this.timeToQuarters(ks.time),
                    key: ks.key
                };
            }) : [],
            timeSignatures: sequence.timeSignatures ? sequence.timeSignatures.map((ts)=>{
                return {
                    start: this.timeToQuarters(ts.time),
                    numerator: ts.numerator,
                    denominator: ts.denominator
                };
            }) : []
        };
    }
    clearActiveNotes() {
        this.redraw();
    }
} //# sourceMappingURL=visualizer.js.map
}}),
"[project]/node_modules/@magenta/music/esm/core/index.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$aux_inputs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/aux_inputs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$chords$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/chords.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/data.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/logging.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$melodies$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/melodies.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$performance$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/performance.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/sequences.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$metronome$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/metronome.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$midi_io$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/midi_io.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$player$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/player.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$recorder$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/recorder.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$visualizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/visualizer.js [app-client] (ecmascript)"); //# sourceMappingURL=index.js.map
;
;
;
;
;
;
;
;
;
;
;
;
;
;
}}),
"[project]/node_modules/@magenta/music/esm/core/index.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$aux_inputs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/aux_inputs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$chords$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/chords.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/data.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/logging.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$melodies$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/melodies.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$performance$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/performance.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/sequences.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$metronome$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/metronome.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$midi_io$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/midi_io.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$player$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/player.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$recorder$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/recorder.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$visualizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/visualizer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/index.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/@magenta/music/esm/core/logging.js [app-client] (ecmascript) <export * as logging>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "logging": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/logging.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/@magenta/music/esm/core/audio_utils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "applyWindow": (()=>applyWindow),
    "frame": (()=>frame),
    "hannWindow": (()=>hannWindow),
    "hzToMidi": (()=>hzToMidi),
    "loadAudioFromFile": (()=>loadAudioFromFile),
    "loadAudioFromUrl": (()=>loadAudioFromUrl),
    "melSpectrogram": (()=>melSpectrogram),
    "midiToHz": (()=>midiToHz),
    "padCenterToLength": (()=>padCenterToLength),
    "padConstant": (()=>padConstant),
    "powerToDb": (()=>powerToDb),
    "resampleAndMakeMono": (()=>resampleAndMakeMono)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2f$dist$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs/dist/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$sub$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/sub.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$div$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/div.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$pow$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/pow.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$mul$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/mul.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$log$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/log.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$add$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@tensorflow/tfjs-core/dist/ops/add.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$fft$2e$js$2f$lib$2f$fft$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/fft.js/lib/fft.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ndarray$2f$ndarray$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ndarray/ndarray.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ndarray$2d$resample$2f$resample$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ndarray-resample/resample.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/compat/global.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/compat/global.js [app-client] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global_browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/compat/global_browser.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/logging.js [app-client] (ecmascript)");
;
;
;
;
;
;
const SAMPLE_RATE = 16000;
const offlineCtx = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global_browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getOfflineAudioContext"])(SAMPLE_RATE);
async function loadAudioFromUrl(url) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fetch"])(url).then((body)=>body.arrayBuffer()).then((buffer)=>offlineCtx.decodeAudioData(buffer));
}
async function loadAudioFromFile(blob) {
    const fileReader = new FileReader();
    const loadFile = new Promise((resolve, reject)=>{
        fileReader.onerror = ()=>{
            fileReader.abort();
            reject(new DOMException('Something went wrong reading that file.'));
        };
        fileReader.onload = ()=>{
            resolve(fileReader.result);
        };
        fileReader.readAsArrayBuffer(blob);
    });
    return loadFile.then((arrayBuffer)=>offlineCtx.decodeAudioData(arrayBuffer));
}
function melSpectrogram(y, params) {
    if (!params.power) {
        params.power = 2.0;
    }
    const stftMatrix = stft(y, params);
    const [spec, nFft] = magSpectrogram(stftMatrix, params.power);
    params.nFft = nFft;
    const melBasis = createMelFilterbank(params);
    return applyWholeFilterbank(spec, melBasis);
}
function powerToDb(spec, amin = 1e-10, topDb = 80.0) {
    const width = spec.length;
    const height = spec[0].length;
    const logSpec = [];
    for(let i = 0; i < width; i++){
        logSpec[i] = new Float32Array(height);
    }
    for(let i = 0; i < width; i++){
        for(let j = 0; j < height; j++){
            const val = spec[i][j];
            logSpec[i][j] = 10.0 * Math.log10(Math.max(amin, val));
        }
    }
    if (topDb) {
        if (topDb < 0) {
            throw new Error(`topDb must be non-negative.`);
        }
        for(let i = 0; i < width; i++){
            const maxVal = max(logSpec[i]);
            for(let j = 0; j < height; j++){
                logSpec[i][j] = Math.max(logSpec[i][j], maxVal - topDb);
            }
        }
    }
    return logSpec;
}
function getMonoAudio(audioBuffer) {
    if (audioBuffer.numberOfChannels === 1) {
        return audioBuffer.getChannelData(0);
    }
    if (audioBuffer.numberOfChannels !== 2) {
        throw Error(`${audioBuffer.numberOfChannels} channel audio is not supported.`);
    }
    const ch0 = audioBuffer.getChannelData(0);
    const ch1 = audioBuffer.getChannelData(1);
    const mono = new Float32Array(audioBuffer.length);
    for(let i = 0; i < audioBuffer.length; ++i){
        mono[i] = (ch0[i] + ch1[i]) / 2;
    }
    return mono;
}
async function resampleAndMakeMono(audioBuffer, targetSr = SAMPLE_RATE) {
    if (audioBuffer.sampleRate === targetSr) {
        return getMonoAudio(audioBuffer);
    }
    const sourceSr = audioBuffer.sampleRate;
    const lengthRes = audioBuffer.length * targetSr / sourceSr;
    if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$compat$2f$global_browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSafari"]) {
        const _offlineCtx = new OfflineAudioContext(audioBuffer.numberOfChannels, audioBuffer.duration * targetSr, targetSr);
        const bufferSource = _offlineCtx.createBufferSource();
        bufferSource.buffer = audioBuffer;
        bufferSource.connect(_offlineCtx.destination);
        bufferSource.start();
        return _offlineCtx.startRendering().then((buffer)=>buffer.getChannelData(0));
    } else {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])('Safari does not support WebAudio resampling, so this may be slow.', 'O&F', 5);
        const originalAudio = getMonoAudio(audioBuffer);
        const resampledAudio = new Float32Array(lengthRes);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ndarray$2d$resample$2f$resample$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ndarray$2f$ndarray$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__(resampledAudio, [
            lengthRes
        ]), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ndarray$2f$ndarray$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__(originalAudio, [
            originalAudio.length
        ]));
        return resampledAudio;
    }
}
function magSpectrogram(stft, power) {
    const spec = stft.map((fft)=>pow(mag(fft), power));
    const nFft = stft[0].length - 1;
    return [
        spec,
        nFft
    ];
}
function stft(y, params) {
    const nFft = params.nFft || 2048;
    const winLength = params.winLength || nFft;
    const hopLength = params.hopLength || Math.floor(winLength / 4);
    let fftWindow = hannWindow(winLength);
    fftWindow = padCenterToLength(fftWindow, nFft);
    y = padReflect(y, Math.floor(nFft / 2));
    const yFrames = frame(y, nFft, hopLength);
    const stftMatrix = [];
    const width = yFrames.length;
    const height = nFft + 2;
    for(let i = 0; i < width; i++){
        const col = new Float32Array(height);
        stftMatrix[i] = col;
    }
    for(let i = 0; i < width; i++){
        const winBuffer = applyWindow(yFrames[i], fftWindow);
        const col = fft(winBuffer);
        stftMatrix[i].set(col.slice(0, height));
    }
    return stftMatrix;
}
function applyWholeFilterbank(spec, filterbank) {
    const out = [];
    for(let i = 0; i < spec.length; i++){
        out[i] = applyFilterbank(spec[i], filterbank);
    }
    return out;
}
function applyFilterbank(mags, filterbank) {
    if (mags.length !== filterbank[0].length) {
        throw new Error(`Each entry in filterbank should have dimensions ` + `matching FFT. |mags| = ${mags.length}, ` + `|filterbank[0]| = ${filterbank[0].length}.`);
    }
    const out = new Float32Array(filterbank.length);
    for(let i = 0; i < filterbank.length; i++){
        const win = applyWindow(mags, filterbank[i]);
        out[i] = win.reduce((a, b)=>a + b);
    }
    return out;
}
function applyWindow(buffer, win) {
    if (buffer.length !== win.length) {
        console.error(`Buffer length ${buffer.length} != window length ${win.length}.`);
        return null;
    }
    const out = new Float32Array(buffer.length);
    for(let i = 0; i < buffer.length; i++){
        out[i] = win[i] * buffer[i];
    }
    return out;
}
function padCenterToLength(data, length) {
    if (data.length > length) {
        throw new Error('Data is longer than length.');
    }
    const paddingLeft = Math.floor((length - data.length) / 2);
    const paddingRight = length - data.length - paddingLeft;
    return padConstant(data, [
        paddingLeft,
        paddingRight
    ]);
}
function padConstant(data, padding) {
    let padLeft, padRight;
    if (typeof padding === 'object') {
        [padLeft, padRight] = padding;
    } else {
        padLeft = padRight = padding;
    }
    const out = new Float32Array(data.length + padLeft + padRight);
    out.set(data, padLeft);
    return out;
}
function padReflect(data, padding) {
    const out = padConstant(data, padding);
    for(let i = 0; i < padding; i++){
        out[i] = out[2 * padding - i];
        out[out.length - i - 1] = out[out.length - 2 * padding + i - 1];
    }
    return out;
}
function frame(data, frameLength, hopLength) {
    const bufferCount = Math.floor((data.length - frameLength) / hopLength) + 1;
    const buffers = Array.from({
        length: bufferCount
    }, (x, i)=>new Float32Array(frameLength));
    for(let i = 0; i < bufferCount; i++){
        const ind = i * hopLength;
        const buffer = data.slice(ind, ind + frameLength);
        buffers[i].set(buffer);
        if (buffer.length !== frameLength) {
            continue;
        }
    }
    return buffers;
}
function createMelFilterbank(params) {
    const fMin = params.fMin || 0;
    const fMax = params.fMax || params.sampleRate / 2;
    const nMels = params.nMels || 128;
    const nFft = params.nFft || 2048;
    const fftFreqs = calculateFftFreqs(params.sampleRate, nFft);
    const melFreqs = calculateMelFreqs(nMels + 2, fMin, fMax);
    const melDiff = internalDiff(melFreqs);
    const ramps = outerSubtract(melFreqs, fftFreqs);
    const filterSize = ramps[0].length;
    const weights = [];
    for(let i = 0; i < nMels; i++){
        weights[i] = new Float32Array(filterSize);
        for(let j = 0; j < ramps[i].length; j++){
            const lower = -ramps[i][j] / melDiff[i];
            const upper = ramps[i + 2][j] / melDiff[i + 1];
            const weight = Math.max(0, Math.min(lower, upper));
            weights[i][j] = weight;
        }
    }
    for(let i = 0; i < weights.length; i++){
        const enorm = 2.0 / (melFreqs[2 + i] - melFreqs[i]);
        weights[i] = weights[i].map((val)=>val * enorm);
    }
    return weights;
}
function fft(y) {
    const fft = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$fft$2e$js$2f$lib$2f$fft$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__(y.length);
    const out = fft.createComplexArray();
    const data = fft.toComplexArray(y);
    fft.transform(out, data);
    return out;
}
function hannWindow(length) {
    const win = new Float32Array(length);
    for(let i = 0; i < length; i++){
        win[i] = 0.5 * (1 - Math.cos(2 * Math.PI * i / (length - 1)));
    }
    return win;
}
function linearSpace(start, end, count) {
    const delta = (end - start) / (count - 1);
    const out = new Float32Array(count);
    for(let i = 0; i < count; i++){
        out[i] = start + delta * i;
    }
    return out;
}
function mag(y) {
    const out = new Float32Array(y.length / 2);
    for(let i = 0; i < y.length / 2; i++){
        out[i] = Math.sqrt(y[i * 2] * y[i * 2] + y[i * 2 + 1] * y[i * 2 + 1]);
    }
    return out;
}
function midiToHz(notes) {
    let notesTensor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$sub$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sub"])(notes, 69.0);
    notesTensor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$div$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["div"])(notesTensor, 12.0);
    notesTensor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$pow$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["pow"])(2.0, notesTensor);
    notesTensor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$mul$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mul"])(440.0, notesTensor);
    return notesTensor;
}
async function hzToMidi(frequencies) {
    let frequenciesTensor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$sub$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sub"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$div$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["div"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$log$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])(frequencies), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$log$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])(2)), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$div$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["div"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$log$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])(440.0), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$log$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["log"])(2)));
    frequenciesTensor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$mul$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["mul"])(12, frequenciesTensor);
    frequenciesTensor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$tensorflow$2f$tfjs$2d$core$2f$dist$2f$ops$2f$add$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["add"])(frequenciesTensor, 69);
    const frequenciesVal = await frequenciesTensor.array();
    return frequenciesVal;
}
function hzToMel(hz) {
    return 1125.0 * Math.log(1 + hz / 700.0);
}
function melToHz(mel) {
    return 700.0 * (Math.exp(mel / 1125.0) - 1);
}
function calculateFftFreqs(sampleRate, nFft) {
    return linearSpace(0, sampleRate / 2, Math.floor(1 + nFft / 2));
}
function calculateMelFreqs(nMels, fMin, fMax) {
    const melMin = hzToMel(fMin);
    const melMax = hzToMel(fMax);
    const mels = linearSpace(melMin, melMax, nMels);
    const hzs = mels.map((mel)=>melToHz(mel));
    return hzs;
}
function internalDiff(arr) {
    const out = new Float32Array(arr.length - 1);
    for(let i = 0; i < arr.length; i++){
        out[i] = arr[i + 1] - arr[i];
    }
    return out;
}
function outerSubtract(arr, arr2) {
    const out = [];
    for(let i = 0; i < arr.length; i++){
        out[i] = new Float32Array(arr2.length);
    }
    for(let i = 0; i < arr.length; i++){
        for(let j = 0; j < arr2.length; j++){
            out[i][j] = arr[i] - arr2[j];
        }
    }
    return out;
}
function pow(arr, power) {
    return arr.map((v)=>Math.pow(v, power));
}
function max(arr) {
    return arr.reduce((a, b)=>Math.max(a, b));
} //# sourceMappingURL=audio_utils.js.map
}}),
"[project]/node_modules/@magenta/music/esm/core/data.js [app-client] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "DEFAULT_DRUM_PITCH_CLASSES": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_DRUM_PITCH_CLASSES"]),
    "DataConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["DataConverter"]),
    "DrumRollConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["DrumRollConverter"]),
    "DrumsConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["DrumsConverter"]),
    "DrumsOneHotConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["DrumsOneHotConverter"]),
    "GrooveConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["GrooveConverter"]),
    "MelodyConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["MelodyConverter"]),
    "MelodyRhythmConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["MelodyRhythmConverter"]),
    "MelodyShapeConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["MelodyShapeConverter"]),
    "MultitrackConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["MultitrackConverter"]),
    "TrioConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["TrioConverter"]),
    "TrioRhythmConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["TrioRhythmConverter"]),
    "converterFromSpec": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["converterFromSpec"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/data.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/@magenta/music/esm/core/data.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "DEFAULT_DRUM_PITCH_CLASSES": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["DEFAULT_DRUM_PITCH_CLASSES"]),
    "DataConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["DataConverter"]),
    "DrumRollConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["DrumRollConverter"]),
    "DrumsConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["DrumsConverter"]),
    "DrumsOneHotConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["DrumsOneHotConverter"]),
    "GrooveConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["GrooveConverter"]),
    "MelodyConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["MelodyConverter"]),
    "MelodyRhythmConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["MelodyRhythmConverter"]),
    "MelodyShapeConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["MelodyShapeConverter"]),
    "MultitrackConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["MultitrackConverter"]),
    "TrioConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["TrioConverter"]),
    "TrioRhythmConverter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["TrioRhythmConverter"]),
    "converterFromSpec": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["converterFromSpec"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/data.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/data.js [app-client] (ecmascript) <exports>");
}}),
"[project]/node_modules/@magenta/music/esm/core/index.js [app-client] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BasePlayer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$player$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BasePlayer"]),
    "BasePlayerCallback": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$player$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BasePlayerCallback"]),
    "BaseRecorderCallback": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$recorder$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BaseRecorderCallback"]),
    "BaseSVGVisualizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$visualizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BaseSVGVisualizer"]),
    "BaseVisualizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$visualizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BaseVisualizer"]),
    "MIDIPlayer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$player$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MIDIPlayer"]),
    "Metronome": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$metronome$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Metronome"]),
    "MetronomeCallbackObject": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$metronome$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MetronomeCallbackObject"]),
    "MidiConversionError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$midi_io$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MidiConversionError"]),
    "PianoRollCanvasVisualizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$visualizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PianoRollCanvasVisualizer"]),
    "PianoRollSVGVisualizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$visualizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PianoRollSVGVisualizer"]),
    "Player": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$player$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Player"]),
    "PlayerWithClick": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$player$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PlayerWithClick"]),
    "Recorder": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$recorder$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Recorder"]),
    "ScrollType": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$visualizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ScrollType"]),
    "SoundFontPlayer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$player$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SoundFontPlayer"]),
    "StaffSVGVisualizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$visualizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["StaffSVGVisualizer"]),
    "Visualizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$visualizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Visualizer"]),
    "WaterfallSVGVisualizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$visualizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["WaterfallSVGVisualizer"]),
    "aux_inputs": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$aux_inputs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__),
    "blobToNoteSequence": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$midi_io$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["blobToNoteSequence"]),
    "chords": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$chords$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__),
    "constants": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__),
    "data": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__),
    "logging": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__),
    "melodies": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$melodies$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__),
    "midiToSequenceProto": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$midi_io$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["midiToSequenceProto"]),
    "performance": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$performance$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__),
    "sequenceProtoToMidi": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$midi_io$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sequenceProtoToMidi"]),
    "sequences": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__),
    "urlToBlob": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$midi_io$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["urlToBlob"]),
    "urlToNoteSequence": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$midi_io$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["urlToNoteSequence"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$aux_inputs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/aux_inputs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$chords$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/chords.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/data.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$logging$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/logging.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$melodies$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/melodies.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$performance$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/performance.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$sequences$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/sequences.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$metronome$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/metronome.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$midi_io$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/midi_io.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$player$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/player.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$recorder$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/recorder.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$visualizer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/visualizer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/index.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/@magenta/music/esm/core/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BasePlayer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["BasePlayer"]),
    "BasePlayerCallback": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["BasePlayerCallback"]),
    "BaseRecorderCallback": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["BaseRecorderCallback"]),
    "BaseSVGVisualizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["BaseSVGVisualizer"]),
    "BaseVisualizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["BaseVisualizer"]),
    "MIDIPlayer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["MIDIPlayer"]),
    "Metronome": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["Metronome"]),
    "MetronomeCallbackObject": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["MetronomeCallbackObject"]),
    "MidiConversionError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["MidiConversionError"]),
    "PianoRollCanvasVisualizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["PianoRollCanvasVisualizer"]),
    "PianoRollSVGVisualizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["PianoRollSVGVisualizer"]),
    "Player": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["Player"]),
    "PlayerWithClick": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["PlayerWithClick"]),
    "Recorder": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["Recorder"]),
    "ScrollType": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ScrollType"]),
    "SoundFontPlayer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["SoundFontPlayer"]),
    "StaffSVGVisualizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["StaffSVGVisualizer"]),
    "Visualizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["Visualizer"]),
    "WaterfallSVGVisualizer": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["WaterfallSVGVisualizer"]),
    "aux_inputs": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["aux_inputs"]),
    "blobToNoteSequence": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["blobToNoteSequence"]),
    "chords": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["chords"]),
    "constants": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["constants"]),
    "data": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["data"]),
    "logging": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["logging"]),
    "melodies": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["melodies"]),
    "midiToSequenceProto": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["midiToSequenceProto"]),
    "performance": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["performance"]),
    "sequenceProtoToMidi": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["sequenceProtoToMidi"]),
    "sequences": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["sequences"]),
    "urlToBlob": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["urlToBlob"]),
    "urlToNoteSequence": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["urlToNoteSequence"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$magenta$2f$music$2f$esm$2f$core$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_context__.i("[project]/node_modules/@magenta/music/esm/core/index.js [app-client] (ecmascript) <exports>");
}}),
}]);

//# sourceMappingURL=node_modules_%40magenta_music_esm_core_8a94c460._.js.map